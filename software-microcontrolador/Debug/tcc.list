
tcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000893c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08008a48  08008a48  00018a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ad4  08008ad4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08008ad4  08008ad4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ad4  08008ad4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ad4  08008ad4  00018ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ad8  08008ad8  00018ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08008adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000171c  2000017c  08008c58  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  08008c58  00021898  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d36  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321c  00000000  00000000  00030f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00034140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b41  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a166  00000000  00000000  00035b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c9d  00000000  00000000  0004fccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bf56  00000000  00000000  0006496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c70  00000000  00000000  000f08c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  000f4534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a30 	.word	0x08008a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	08008a30 	.word	0x08008a30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a05      	ldr	r2, [pc, #20]	; (8000180 <HAL_ADC_ConvCpltCallback+0x24>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d102      	bne.n	8000174 <HAL_ADC_ConvCpltCallback+0x18>
    {
        adc_conversion_complete = 1;  // Flag para indicar que a convers√£o terminou
 800016e:	4b05      	ldr	r3, [pc, #20]	; (8000184 <HAL_ADC_ConvCpltCallback+0x28>)
 8000170:	2201      	movs	r2, #1
 8000172:	701a      	strb	r2, [r3, #0]
    }
}
 8000174:	bf00      	nop
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	40012400 	.word	0x40012400
 8000184:	200006b8 	.word	0x200006b8

08000188 <Process_Buffer>:
    }
    CDC_Transmit_FS(usb_tx_buffer, sizeof(usb_tx_buffer));
}

void Process_Buffer(uint8_t* buf, uint32_t len)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < len; i++)
 8000192:	2300      	movs	r3, #0
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	e03c      	b.n	8000212 <Process_Buffer+0x8a>
    {
        if (strncmp((char*)&buf[i], START_FLAG, strlen(START_FLAG)) == 0)
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	4413      	add	r3, r2
 800019e:	2207      	movs	r2, #7
 80001a0:	4920      	ldr	r1, [pc, #128]	; (8000224 <Process_Buffer+0x9c>)
 80001a2:	4618      	mov	r0, r3
 80001a4:	f008 fc00 	bl	80089a8 <strncmp>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d109      	bne.n	80001c2 <Process_Buffer+0x3a>
        {
            receiving_data = 1;
 80001ae:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <Process_Buffer+0xa0>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	701a      	strb	r2, [r3, #0]
            full_buffer_index = 0;
 80001b4:	4b1d      	ldr	r3, [pc, #116]	; (800022c <Process_Buffer+0xa4>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	801a      	strh	r2, [r3, #0]
            i += strlen(START_FLAG) - 1;
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	3306      	adds	r3, #6
 80001be:	60fb      	str	r3, [r7, #12]
 80001c0:	e024      	b.n	800020c <Process_Buffer+0x84>
        }
        else if (strncmp((char*)&buf[i], END_FLAG, strlen(END_FLAG)) == 0)
 80001c2:	687a      	ldr	r2, [r7, #4]
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	4413      	add	r3, r2
 80001c8:	2205      	movs	r2, #5
 80001ca:	4919      	ldr	r1, [pc, #100]	; (8000230 <Process_Buffer+0xa8>)
 80001cc:	4618      	mov	r0, r3
 80001ce:	f008 fbeb 	bl	80089a8 <strncmp>
 80001d2:	4603      	mov	r3, r0
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d106      	bne.n	80001e6 <Process_Buffer+0x5e>
        {
            receiving_data = 0;
 80001d8:	4b13      	ldr	r3, [pc, #76]	; (8000228 <Process_Buffer+0xa0>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
            full_received_flag = 1;
 80001de:	4b15      	ldr	r3, [pc, #84]	; (8000234 <Process_Buffer+0xac>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	701a      	strb	r2, [r3, #0]
            break;
 80001e4:	e01a      	b.n	800021c <Process_Buffer+0x94>
        }
        else if (receiving_data)
 80001e6:	4b10      	ldr	r3, [pc, #64]	; (8000228 <Process_Buffer+0xa0>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00d      	beq.n	800020c <Process_Buffer+0x84>
        {
            full_buffer[full_buffer_index++] = buf[i];
 80001f0:	687a      	ldr	r2, [r7, #4]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	441a      	add	r2, r3
 80001f6:	4b0d      	ldr	r3, [pc, #52]	; (800022c <Process_Buffer+0xa4>)
 80001f8:	881b      	ldrh	r3, [r3, #0]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	1c59      	adds	r1, r3, #1
 80001fe:	b288      	uxth	r0, r1
 8000200:	490a      	ldr	r1, [pc, #40]	; (800022c <Process_Buffer+0xa4>)
 8000202:	8008      	strh	r0, [r1, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	7812      	ldrb	r2, [r2, #0]
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <Process_Buffer+0xb0>)
 800020a:	545a      	strb	r2, [r3, r1]
    for (uint32_t i = 0; i < len; i++)
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	3301      	adds	r3, #1
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d3be      	bcc.n	8000198 <Process_Buffer+0x10>
        }
    }
}
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	3710      	adds	r7, #16
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	08008a48 	.word	0x08008a48
 8000228:	200006a4 	.word	0x200006a4
 800022c:	200006a2 	.word	0x200006a2
 8000230:	08008a50 	.word	0x08008a50
 8000234:	200006a1 	.word	0x200006a1
 8000238:	200002a0 	.word	0x200002a0

0800023c <Process_Received_Data>:

void Process_Received_Data(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
    // Convert full_buffer to 2D array here
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000242:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000246:	4822      	ldr	r0, [pc, #136]	; (80002d0 <Process_Received_Data+0x94>)
 8000248:	f001 fc66 	bl	8001b18 <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 800024c:	200a      	movs	r0, #10
 800024e:	f000 fbe5 	bl	8000a1c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000256:	481e      	ldr	r0, [pc, #120]	; (80002d0 <Process_Received_Data+0x94>)
 8000258:	f001 fc5e 	bl	8001b18 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800025c:	2064      	movs	r0, #100	; 0x64
 800025e:	f000 fbdd 	bl	8000a1c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	481a      	ldr	r0, [pc, #104]	; (80002d0 <Process_Received_Data+0x94>)
 8000268:	f001 fc56 	bl	8001b18 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800026c:	2064      	movs	r0, #100	; 0x64
 800026e:	f000 fbd5 	bl	8000a1c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	4816      	ldr	r0, [pc, #88]	; (80002d0 <Process_Received_Data+0x94>)
 8000278:	f001 fc4e 	bl	8001b18 <HAL_GPIO_TogglePin>

    // Send ACK to host
    uint8_t ack[] = "ACK\n";
 800027c:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <Process_Received_Data+0x98>)
 800027e:	463b      	mov	r3, r7
 8000280:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000284:	6018      	str	r0, [r3, #0]
 8000286:	3304      	adds	r3, #4
 8000288:	7019      	strb	r1, [r3, #0]
    CDC_Transmit_FS(ack, strlen((char*)ack));
 800028a:	463b      	mov	r3, r7
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ff5d 	bl	800014c <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29a      	uxth	r2, r3
 8000296:	463b      	mov	r3, r7
 8000298:	4611      	mov	r1, r2
 800029a:	4618      	mov	r0, r3
 800029c:	f007 ff9e 	bl	80081dc <CDC_Transmit_FS>

    // Indicar que a configura√ß√£o foi conclu√≠da
    HAL_Delay(1000);
 80002a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a4:	f000 fbba 	bl	8000a1c <HAL_Delay>
    config_complete = 1;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <Process_Received_Data+0x9c>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	701a      	strb	r2, [r3, #0]

    // Clear the buffer
    memset(full_buffer, 0, sizeof(full_buffer));
 80002ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002b2:	2100      	movs	r1, #0
 80002b4:	4809      	ldr	r0, [pc, #36]	; (80002dc <Process_Received_Data+0xa0>)
 80002b6:	f008 fb6f 	bl	8008998 <memset>
    full_buffer_index = 0;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <Process_Received_Data+0xa4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	801a      	strh	r2, [r3, #0]
    full_received_flag = 0;
 80002c0:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <Process_Received_Data+0xa8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	3708      	adds	r7, #8
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40011000 	.word	0x40011000
 80002d4:	08008a58 	.word	0x08008a58
 80002d8:	200006b9 	.word	0x200006b9
 80002dc:	200002a0 	.word	0x200002a0
 80002e0:	200006a2 	.word	0x200006a2
 80002e4:	200006a1 	.word	0x200006a1

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ec:	f000 fb34 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f0:	f000 f832 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f4:	f000 f96e 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f8:	f000 f94e 	bl	8000598 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80002fc:	f007 fe96 	bl	800802c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000300:	f000 f888 	bl	8000414 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000304:	f000 f91a 	bl	800053c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000308:	2208      	movs	r2, #8
 800030a:	490e      	ldr	r1, [pc, #56]	; (8000344 <main+0x5c>)
 800030c:	480e      	ldr	r0, [pc, #56]	; (8000348 <main+0x60>)
 800030e:	f000 fc81 	bl	8000c14 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (data_received_flag)
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <main+0x64>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d00a      	beq.n	8000332 <main+0x4a>
		{
			Process_Buffer(buffer, strlen((char*)buffer));
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <main+0x68>)
 800031e:	f7ff ff15 	bl	800014c <strlen>
 8000322:	4603      	mov	r3, r0
 8000324:	4619      	mov	r1, r3
 8000326:	480a      	ldr	r0, [pc, #40]	; (8000350 <main+0x68>)
 8000328:	f7ff ff2e 	bl	8000188 <Process_Buffer>
			data_received_flag = 0;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <main+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
		}

		if (full_received_flag)
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <main+0x6c>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2b00      	cmp	r3, #0
 800033a:	d0ea      	beq.n	8000312 <main+0x2a>
		{
			Process_Received_Data();
 800033c:	f7ff ff7e 	bl	800023c <Process_Received_Data>
		if (data_received_flag)
 8000340:	e7e7      	b.n	8000312 <main+0x2a>
 8000342:	bf00      	nop
 8000344:	200006a8 	.word	0x200006a8
 8000348:	20000198 	.word	0x20000198
 800034c:	200006a0 	.word	0x200006a0
 8000350:	20000260 	.word	0x20000260
 8000354:	200006a1 	.word	0x200006a1

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b094      	sub	sp, #80	; 0x50
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f008 fb16 	bl	8008998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000388:	2301      	movs	r3, #1
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800038c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000390:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039a:	2302      	movs	r3, #2
 800039c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80003a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ae:	4618      	mov	r0, r3
 80003b0:	f003 fa7e 	bl	80038b0 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003ba:	f000 f971 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2302      	movs	r3, #2
 80003c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ce:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d4:	f107 0314 	add.w	r3, r7, #20
 80003d8:	2101      	movs	r1, #1
 80003da:	4618      	mov	r0, r3
 80003dc:	f003 fcea 	bl	8003db4 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003e6:	f000 f95b 	bl	80006a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80003ea:	2312      	movs	r3, #18
 80003ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80003ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 fe53 	bl	80040a8 <HAL_RCCEx_PeriphCLKConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000408:	f000 f94a 	bl	80006a0 <Error_Handler>
  }
}
 800040c:	bf00      	nop
 800040e:	3750      	adds	r7, #80	; 0x50
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000424:	4b43      	ldr	r3, [pc, #268]	; (8000534 <MX_ADC1_Init+0x120>)
 8000426:	4a44      	ldr	r2, [pc, #272]	; (8000538 <MX_ADC1_Init+0x124>)
 8000428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800042a:	4b42      	ldr	r3, [pc, #264]	; (8000534 <MX_ADC1_Init+0x120>)
 800042c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000430:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000432:	4b40      	ldr	r3, [pc, #256]	; (8000534 <MX_ADC1_Init+0x120>)
 8000434:	2201      	movs	r2, #1
 8000436:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000438:	4b3e      	ldr	r3, [pc, #248]	; (8000534 <MX_ADC1_Init+0x120>)
 800043a:	2200      	movs	r2, #0
 800043c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800043e:	4b3d      	ldr	r3, [pc, #244]	; (8000534 <MX_ADC1_Init+0x120>)
 8000440:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000446:	4b3b      	ldr	r3, [pc, #236]	; (8000534 <MX_ADC1_Init+0x120>)
 8000448:	2200      	movs	r2, #0
 800044a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 800044c:	4b39      	ldr	r3, [pc, #228]	; (8000534 <MX_ADC1_Init+0x120>)
 800044e:	2208      	movs	r2, #8
 8000450:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000452:	4838      	ldr	r0, [pc, #224]	; (8000534 <MX_ADC1_Init+0x120>)
 8000454:	f000 fb06 	bl	8000a64 <HAL_ADC_Init>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800045e:	f000 f91f 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000462:	2301      	movs	r3, #1
 8000464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000466:	2301      	movs	r3, #1
 8000468:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800046a:	2306      	movs	r3, #6
 800046c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4619      	mov	r1, r3
 8000472:	4830      	ldr	r0, [pc, #192]	; (8000534 <MX_ADC1_Init+0x120>)
 8000474:	f000 fcbe 	bl	8000df4 <HAL_ADC_ConfigChannel>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800047e:	f000 f90f 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000482:	2302      	movs	r3, #2
 8000484:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	4619      	mov	r1, r3
 800048a:	482a      	ldr	r0, [pc, #168]	; (8000534 <MX_ADC1_Init+0x120>)
 800048c:	f000 fcb2 	bl	8000df4 <HAL_ADC_ConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000496:	f000 f903 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800049a:	2303      	movs	r3, #3
 800049c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4619      	mov	r1, r3
 80004a2:	4824      	ldr	r0, [pc, #144]	; (8000534 <MX_ADC1_Init+0x120>)
 80004a4:	f000 fca6 	bl	8000df4 <HAL_ADC_ConfigChannel>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004ae:	f000 f8f7 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80004b2:	2304      	movs	r3, #4
 80004b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b6:	1d3b      	adds	r3, r7, #4
 80004b8:	4619      	mov	r1, r3
 80004ba:	481e      	ldr	r0, [pc, #120]	; (8000534 <MX_ADC1_Init+0x120>)
 80004bc:	f000 fc9a 	bl	8000df4 <HAL_ADC_ConfigChannel>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80004c6:	f000 f8eb 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80004ca:	2305      	movs	r3, #5
 80004cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	4818      	ldr	r0, [pc, #96]	; (8000534 <MX_ADC1_Init+0x120>)
 80004d4:	f000 fc8e 	bl	8000df4 <HAL_ADC_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80004de:	f000 f8df 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80004e2:	2306      	movs	r3, #6
 80004e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	4619      	mov	r1, r3
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <MX_ADC1_Init+0x120>)
 80004ec:	f000 fc82 	bl	8000df4 <HAL_ADC_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80004f6:	f000 f8d3 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80004fa:	2307      	movs	r3, #7
 80004fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	480c      	ldr	r0, [pc, #48]	; (8000534 <MX_ADC1_Init+0x120>)
 8000504:	f000 fc76 	bl	8000df4 <HAL_ADC_ConfigChannel>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800050e:	f000 f8c7 	bl	80006a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000512:	2308      	movs	r3, #8
 8000514:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_ADC1_Init+0x120>)
 800051c:	f000 fc6a 	bl	8000df4 <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000526:	f000 f8bb 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000198 	.word	0x20000198
 8000538:	40012400 	.word	0x40012400

0800053c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C1_Init+0x50>)
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <MX_I2C1_Init+0x54>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_I2C1_Init+0x50>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_I2C1_Init+0x58>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_I2C1_Init+0x50>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_I2C1_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C1_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_I2C1_Init+0x50>)
 800057a:	f001 fae7 	bl	8001b4c <HAL_I2C_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000584:	f000 f88c 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000020c 	.word	0x2000020c
 8000590:	40005400 	.word	0x40005400
 8000594:	000186a0 	.word	0x000186a0

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <MX_DMA_Init+0x38>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <MX_DMA_Init+0x38>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <MX_DMA_Init+0x38>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200b      	movs	r0, #11
 80005bc:	f000 feeb 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c0:	200b      	movs	r0, #11
 80005c2:	f000 ff04 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_GPIO_Init+0xc0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a29      	ldr	r2, [pc, #164]	; (8000694 <MX_GPIO_Init+0xc0>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_GPIO_Init+0xc0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0310 	and.w	r3, r3, #16
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <MX_GPIO_Init+0xc0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a23      	ldr	r2, [pc, #140]	; (8000694 <MX_GPIO_Init+0xc0>)
 8000606:	f043 0320 	orr.w	r3, r3, #32
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_GPIO_Init+0xc0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0320 	and.w	r3, r3, #32
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_GPIO_Init+0xc0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <MX_GPIO_Init+0xc0>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_GPIO_Init+0xc0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_GPIO_Init+0xc0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_GPIO_Init+0xc0>)
 8000636:	f043 0308 	orr.w	r3, r3, #8
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_GPIO_Init+0xc0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_GPIO_Init+0xc4>)
 8000650:	f001 fa4a 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2302      	movs	r3, #2
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <MX_GPIO_Init+0xc4>)
 800066e:	f001 f8b7 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000672:	2301      	movs	r3, #1
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_GPIO_Init+0xc8>)
 8000686:	f001 f8ab 	bl	80017e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800068a:	bf00      	nop
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40011000 	.word	0x40011000
 800069c:	40010800 	.word	0x40010800

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <HAL_MspInit+0x54>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <HAL_MspInit+0x54>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x54>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x54>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <HAL_MspInit+0x54>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	61d3      	str	r3, [r2, #28]
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x54>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_MspInit+0x58>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_MspInit+0x58>)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3714      	adds	r7, #20
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000
 8000704:	40010000 	.word	0x40010000

08000708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0318 	add.w	r3, r7, #24
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a34      	ldr	r2, [pc, #208]	; (80007f4 <HAL_ADC_MspInit+0xec>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d160      	bne.n	80007ea <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a32      	ldr	r2, [pc, #200]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <HAL_ADC_MspInit+0xf0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000770:	23fe      	movs	r3, #254	; 0xfe
 8000772:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000774:	2303      	movs	r3, #3
 8000776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0318 	add.w	r3, r7, #24
 800077c:	4619      	mov	r1, r3
 800077e:	481f      	ldr	r0, [pc, #124]	; (80007fc <HAL_ADC_MspInit+0xf4>)
 8000780:	f001 f82e 	bl	80017e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000788:	2303      	movs	r3, #3
 800078a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 0318 	add.w	r3, r7, #24
 8000790:	4619      	mov	r1, r3
 8000792:	481b      	ldr	r0, [pc, #108]	; (8000800 <HAL_ADC_MspInit+0xf8>)
 8000794:	f001 f824 	bl	80017e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 800079a:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <HAL_ADC_MspInit+0x100>)
 800079c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007c2:	2220      	movs	r2, #32
 80007c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007d0:	f000 fe18 	bl	8001404 <HAL_DMA_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80007da:	f7ff ff61 	bl	80006a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007e2:	621a      	str	r2, [r3, #32]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_ADC_MspInit+0xfc>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40012400 	.word	0x40012400
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010800 	.word	0x40010800
 8000800:	40010c00 	.word	0x40010c00
 8000804:	200001c8 	.word	0x200001c8
 8000808:	40020008 	.word	0x40020008

0800080c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <HAL_I2C_MspInit+0x70>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d123      	bne.n	8000874 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <HAL_I2C_MspInit+0x74>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <HAL_I2C_MspInit+0x74>)
 8000832:	f043 0308 	orr.w	r3, r3, #8
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_I2C_MspInit+0x74>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0308 	and.w	r3, r3, #8
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000844:	23c0      	movs	r3, #192	; 0xc0
 8000846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000848:	2312      	movs	r3, #18
 800084a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084c:	2303      	movs	r3, #3
 800084e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <HAL_I2C_MspInit+0x78>)
 8000858:	f000 ffc2 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_I2C_MspInit+0x74>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_I2C_MspInit+0x74>)
 8000862:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000866:	61d3      	str	r3, [r2, #28]
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_I2C_MspInit+0x74>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40005400 	.word	0x40005400
 8000880:	40021000 	.word	0x40021000
 8000884:	40010c00 	.word	0x40010c00

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 f889 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <DMA1_Channel1_IRQHandler+0x10>)
 80008de:	f000 fe4b 	bl	8001578 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200001c8 	.word	0x200001c8

080008ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008f2:	f001 fb94 	bl	800201e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20001388 	.word	0x20001388

08000900 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800090c:	f7ff fff8 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000912:	490c      	ldr	r1, [pc, #48]	; (8000944 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000928:	4c09      	ldr	r4, [pc, #36]	; (8000950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000936:	f008 f849 	bl	80089cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093a:	f7ff fcd5 	bl	80002e8 <main>
  bx lr
 800093e:	4770      	bx	lr
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000948:	08008adc 	.word	0x08008adc
  ldr r2, =_sbss
 800094c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000950:	20001898 	.word	0x20001898

08000954 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC1_2_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_Init+0x28>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_Init+0x28>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 fd09 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f808 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fe9a 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40022000 	.word	0x40022000

08000984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0x54>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x58>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 fd21 	bl	80013ea <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00e      	b.n	80009d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d80a      	bhi.n	80009ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f000 fce9 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_InitTick+0x5c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000004 	.word	0x20000004

080009e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4413      	add	r3, r2
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <HAL_IncTick+0x20>)
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200006bc 	.word	0x200006bc

08000a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	200006bc 	.word	0x200006bc

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_GetTick>
 8000a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a42:	bf00      	nop
 8000a44:	f7ff ffe0 	bl	8000a08 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008

08000a64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e0be      	b.n	8000c04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff fe30 	bl	8000708 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 faf5 	bl	8001098 <ADC_ConversionStop_Disable>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 8099 	bne.w	8000bf2 <HAL_ADC_Init+0x18e>
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 8095 	bne.w	8000bf2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000acc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	f043 0202 	orr.w	r2, r3, #2
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7b1b      	ldrb	r3, [r3, #12]
 8000aea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000aec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000afc:	d003      	beq.n	8000b06 <HAL_ADC_Init+0xa2>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d102      	bne.n	8000b0c <HAL_ADC_Init+0xa8>
 8000b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0a:	e000      	b.n	8000b0e <HAL_ADC_Init+0xaa>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7d1b      	ldrb	r3, [r3, #20]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d119      	bne.n	8000b50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7b1b      	ldrb	r3, [r3, #12]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d109      	bne.n	8000b38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	035a      	lsls	r2, r3, #13
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	e00b      	b.n	8000b50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	f043 0220 	orr.w	r2, r3, #32
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	f043 0201 	orr.w	r2, r3, #1
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	430a      	orrs	r2, r1
 8000b62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <HAL_ADC_Init+0x1a8>)
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	430b      	orrs	r3, r1
 8000b76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b80:	d003      	beq.n	8000b8a <HAL_ADC_Init+0x126>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d104      	bne.n	8000b94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	691b      	ldr	r3, [r3, #16]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	051b      	lsls	r3, r3, #20
 8000b92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_Init+0x1ac>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d10b      	bne.n	8000bd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc2:	f023 0303 	bic.w	r3, r3, #3
 8000bc6:	f043 0201 	orr.w	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bce:	e018      	b.n	8000c02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd4:	f023 0312 	bic.w	r3, r3, #18
 8000bd8:	f043 0210 	orr.w	r2, r3, #16
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be4:	f043 0201 	orr.w	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bf0:	e007      	b.n	8000c02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf6:	f043 0210 	orr.w	r2, r3, #16
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	ffe1f7fd 	.word	0xffe1f7fd
 8000c10:	ff1f0efe 	.word	0xff1f0efe

08000c14 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a64      	ldr	r2, [pc, #400]	; (8000dbc <HAL_ADC_Start_DMA+0x1a8>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d004      	beq.n	8000c38 <HAL_ADC_Start_DMA+0x24>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a63      	ldr	r2, [pc, #396]	; (8000dc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d106      	bne.n	8000c46 <HAL_ADC_Start_DMA+0x32>
 8000c38:	4b60      	ldr	r3, [pc, #384]	; (8000dbc <HAL_ADC_Start_DMA+0x1a8>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f040 80b3 	bne.w	8000dac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_Start_DMA+0x40>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e0ae      	b.n	8000db2 <HAL_ADC_Start_DMA+0x19e>
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c5c:	68f8      	ldr	r0, [r7, #12]
 8000c5e:	f000 f9c1 	bl	8000fe4 <ADC_Enable>
 8000c62:	4603      	mov	r3, r0
 8000c64:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c66:	7dfb      	ldrb	r3, [r7, #23]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 809a 	bne.w	8000da2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c76:	f023 0301 	bic.w	r3, r3, #1
 8000c7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a4e      	ldr	r2, [pc, #312]	; (8000dc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d105      	bne.n	8000c98 <HAL_ADC_Start_DMA+0x84>
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HAL_ADC_Start_DMA+0x1a8>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d115      	bne.n	8000cc4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d026      	beq.n	8000d00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cc2:	e01d      	b.n	8000d00 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a39      	ldr	r2, [pc, #228]	; (8000dbc <HAL_ADC_Start_DMA+0x1a8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d004      	beq.n	8000ce4 <HAL_ADC_Start_DMA+0xd0>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a38      	ldr	r2, [pc, #224]	; (8000dc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d10d      	bne.n	8000d00 <HAL_ADC_Start_DMA+0xec>
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d10:	f023 0206 	bic.w	r2, r3, #6
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d18:	e002      	b.n	8000d20 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a25      	ldr	r2, [pc, #148]	; (8000dc4 <HAL_ADC_Start_DMA+0x1b0>)
 8000d2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a24      	ldr	r2, [pc, #144]	; (8000dc8 <HAL_ADC_Start_DMA+0x1b4>)
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_ADC_Start_DMA+0x1b8>)
 8000d3e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f06f 0202 	mvn.w	r2, #2
 8000d48:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d58:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6a18      	ldr	r0, [r3, #32]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	334c      	adds	r3, #76	; 0x4c
 8000d64:	4619      	mov	r1, r3
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f000 fba5 	bl	80014b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d7c:	d108      	bne.n	8000d90 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d8c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d8e:	e00f      	b.n	8000db0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d9e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000da0:	e006      	b.n	8000db0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000daa:	e001      	b.n	8000db0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40012400 	.word	0x40012400
 8000dc0:	40012800 	.word	0x40012800
 8000dc4:	0800111b 	.word	0x0800111b
 8000dc8:	08001197 	.word	0x08001197
 8000dcc:	080011b3 	.word	0x080011b3

08000dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr

08000de2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x20>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e0dc      	b.n	8000fce <HAL_ADC_ConfigChannel+0x1da>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b06      	cmp	r3, #6
 8000e22:	d81c      	bhi.n	8000e5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	3b05      	subs	r3, #5
 8000e36:	221f      	movs	r2, #31
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	4019      	ands	r1, r3
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b05      	subs	r3, #5
 8000e50:	fa00 f203 	lsl.w	r2, r0, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e5c:	e03c      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	d81c      	bhi.n	8000ea0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685a      	ldr	r2, [r3, #4]
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	3b23      	subs	r3, #35	; 0x23
 8000e78:	221f      	movs	r2, #31
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	4019      	ands	r1, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	3b23      	subs	r3, #35	; 0x23
 8000e92:	fa00 f203 	lsl.w	r2, r0, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e9e:	e01b      	b.n	8000ed8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b41      	subs	r3, #65	; 0x41
 8000eb2:	221f      	movs	r2, #31
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4019      	ands	r1, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b41      	subs	r3, #65	; 0x41
 8000ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b09      	cmp	r3, #9
 8000ede:	d91c      	bls.n	8000f1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68d9      	ldr	r1, [r3, #12]
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	3b1e      	subs	r3, #30
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4019      	ands	r1, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b1e      	subs	r3, #30
 8000f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	e019      	b.n	8000f4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6919      	ldr	r1, [r3, #16]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6898      	ldr	r0, [r3, #8]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	fa00 f203 	lsl.w	r2, r0, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d003      	beq.n	8000f5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f5a:	2b11      	cmp	r3, #17
 8000f5c:	d132      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d125      	bne.n	8000fb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d126      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d11a      	bne.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_ADC_ConfigChannel+0x1e8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a13      	ldr	r2, [pc, #76]	; (8000fe0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	0c9a      	lsrs	r2, r3, #18
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa4:	e002      	b.n	8000fac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f9      	bne.n	8000fa6 <HAL_ADC_ConfigChannel+0x1b2>
 8000fb2:	e007      	b.n	8000fc4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb8:	f043 0220 	orr.w	r2, r3, #32
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	40012400 	.word	0x40012400
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	431bde83 	.word	0x431bde83

08000fe4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d040      	beq.n	8001084 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0201 	orr.w	r2, r2, #1
 8001010:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001012:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <ADC_Enable+0xac>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1f      	ldr	r2, [pc, #124]	; (8001094 <ADC_Enable+0xb0>)
 8001018:	fba2 2303 	umull	r2, r3, r2, r3
 800101c:	0c9b      	lsrs	r3, r3, #18
 800101e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001020:	e002      	b.n	8001028 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	3b01      	subs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f9      	bne.n	8001022 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800102e:	f7ff fceb 	bl	8000a08 <HAL_GetTick>
 8001032:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001034:	e01f      	b.n	8001076 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001036:	f7ff fce7 	bl	8000a08 <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d918      	bls.n	8001076 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b01      	cmp	r3, #1
 8001050:	d011      	beq.n	8001076 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001056:	f043 0210 	orr.w	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	f043 0201 	orr.w	r2, r3, #1
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e007      	b.n	8001086 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d1d8      	bne.n	8001036 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d12e      	bne.n	8001110 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010c2:	f7ff fca1 	bl	8000a08 <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c8:	e01b      	b.n	8001102 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ca:	f7ff fc9d 	bl	8000a08 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d914      	bls.n	8001102 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10d      	bne.n	8001102 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f043 0210 	orr.w	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d0dc      	beq.n	80010ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001130:	2b00      	cmp	r3, #0
 8001132:	d127      	bne.n	8001184 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800114a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800114e:	d115      	bne.n	800117c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001154:	2b00      	cmp	r3, #0
 8001156:	d111      	bne.n	800117c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d105      	bne.n	800117c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f043 0201 	orr.w	r2, r3, #1
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7fe ffed 	bl	800015c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001182:	e004      	b.n	800118e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f7ff fe13 	bl	8000dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	f043 0204 	orr.w	r2, r3, #4
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fe02 	bl	8000de2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4906      	ldr	r1, [pc, #24]	; (8001280 <__NVIC_EnableIRQ+0x34>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff90 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff2d 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff42 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff35 	bl	800124c <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e043      	b.n	80014a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_DMA_Init+0xa8>)
 8001422:	4413      	add	r3, r2
 8001424:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <HAL_DMA_Init+0xac>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_DMA_Init+0xb0>)
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800144e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001452:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	bffdfff8 	.word	0xbffdfff8
 80014b0:	cccccccd 	.word	0xcccccccd
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_DMA_Start_IT+0x20>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e04b      	b.n	8001570 <HAL_DMA_Start_IT+0xb8>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d13a      	bne.n	8001562 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2202      	movs	r2, #2
 80014f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 f937 	bl	8001784 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 020e 	orr.w	r2, r2, #14
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e00f      	b.n	8001550 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 020a 	orr.w	r2, r2, #10
 800154e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e005      	b.n	800156e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800156a:	2302      	movs	r3, #2
 800156c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800156e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2204      	movs	r2, #4
 8001596:	409a      	lsls	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d04f      	beq.n	8001640 <HAL_DMA_IRQHandler+0xc8>
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d04a      	beq.n	8001640 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0320 	and.w	r3, r3, #32
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0204 	bic.w	r2, r2, #4
 80015c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a66      	ldr	r2, [pc, #408]	; (8001768 <HAL_DMA_IRQHandler+0x1f0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d029      	beq.n	8001626 <HAL_DMA_IRQHandler+0xae>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a65      	ldr	r2, [pc, #404]	; (800176c <HAL_DMA_IRQHandler+0x1f4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d022      	beq.n	8001622 <HAL_DMA_IRQHandler+0xaa>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a63      	ldr	r2, [pc, #396]	; (8001770 <HAL_DMA_IRQHandler+0x1f8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d01a      	beq.n	800161c <HAL_DMA_IRQHandler+0xa4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a62      	ldr	r2, [pc, #392]	; (8001774 <HAL_DMA_IRQHandler+0x1fc>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d012      	beq.n	8001616 <HAL_DMA_IRQHandler+0x9e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a60      	ldr	r2, [pc, #384]	; (8001778 <HAL_DMA_IRQHandler+0x200>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00a      	beq.n	8001610 <HAL_DMA_IRQHandler+0x98>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a5f      	ldr	r2, [pc, #380]	; (800177c <HAL_DMA_IRQHandler+0x204>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d102      	bne.n	800160a <HAL_DMA_IRQHandler+0x92>
 8001604:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001608:	e00e      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 800160a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800160e:	e00b      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001610:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001614:	e008      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001616:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161a:	e005      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 800161c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001620:	e002      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	e000      	b.n	8001628 <HAL_DMA_IRQHandler+0xb0>
 8001626:	2304      	movs	r3, #4
 8001628:	4a55      	ldr	r2, [pc, #340]	; (8001780 <HAL_DMA_IRQHandler+0x208>)
 800162a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8094 	beq.w	800175e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800163e:	e08e      	b.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2202      	movs	r2, #2
 8001646:	409a      	lsls	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4013      	ands	r3, r2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d056      	beq.n	80016fe <HAL_DMA_IRQHandler+0x186>
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d051      	beq.n	80016fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10b      	bne.n	8001680 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 020a 	bic.w	r2, r2, #10
 8001676:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a38      	ldr	r2, [pc, #224]	; (8001768 <HAL_DMA_IRQHandler+0x1f0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d029      	beq.n	80016de <HAL_DMA_IRQHandler+0x166>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_DMA_IRQHandler+0x1f4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d022      	beq.n	80016da <HAL_DMA_IRQHandler+0x162>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a35      	ldr	r2, [pc, #212]	; (8001770 <HAL_DMA_IRQHandler+0x1f8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d01a      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x15c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a34      	ldr	r2, [pc, #208]	; (8001774 <HAL_DMA_IRQHandler+0x1fc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d012      	beq.n	80016ce <HAL_DMA_IRQHandler+0x156>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_DMA_IRQHandler+0x200>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00a      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x150>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_DMA_IRQHandler+0x204>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <HAL_DMA_IRQHandler+0x14a>
 80016bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c0:	e00e      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c6:	e00b      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016cc:	e008      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016d2:	e005      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	e002      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016da:	2320      	movs	r3, #32
 80016dc:	e000      	b.n	80016e0 <HAL_DMA_IRQHandler+0x168>
 80016de:	2302      	movs	r3, #2
 80016e0:	4a27      	ldr	r2, [pc, #156]	; (8001780 <HAL_DMA_IRQHandler+0x208>)
 80016e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d034      	beq.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016fc:	e02f      	b.n	800175e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d028      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d023      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020e 	bic.w	r2, r2, #14
 8001726:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001730:	2101      	movs	r1, #1
 8001732:	fa01 f202 	lsl.w	r2, r1, r2
 8001736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	2b00      	cmp	r3, #0
 8001754:	d004      	beq.n	8001760 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
    }
  }
  return;
 800175e:	bf00      	nop
 8001760:	bf00      	nop
}
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40020008 	.word	0x40020008
 800176c:	4002001c 	.word	0x4002001c
 8001770:	40020030 	.word	0x40020030
 8001774:	40020044 	.word	0x40020044
 8001778:	40020058 	.word	0x40020058
 800177c:	4002006c 	.word	0x4002006c
 8001780:	40020000 	.word	0x40020000

08001784 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800179a:	2101      	movs	r1, #1
 800179c:	fa01 f202 	lsl.w	r2, r1, r2
 80017a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d108      	bne.n	80017c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c2:	e007      	b.n	80017d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f2:	e169      	b.n	8001ac8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f4:	2201      	movs	r2, #1
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 8158 	bne.w	8001ac2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4a9a      	ldr	r2, [pc, #616]	; (8001a80 <HAL_GPIO_Init+0x2a0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d05e      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 800181c:	4a98      	ldr	r2, [pc, #608]	; (8001a80 <HAL_GPIO_Init+0x2a0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d875      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001822:	4a98      	ldr	r2, [pc, #608]	; (8001a84 <HAL_GPIO_Init+0x2a4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d058      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001828:	4a96      	ldr	r2, [pc, #600]	; (8001a84 <HAL_GPIO_Init+0x2a4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d86f      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800182e:	4a96      	ldr	r2, [pc, #600]	; (8001a88 <HAL_GPIO_Init+0x2a8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d052      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001834:	4a94      	ldr	r2, [pc, #592]	; (8001a88 <HAL_GPIO_Init+0x2a8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d869      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800183a:	4a94      	ldr	r2, [pc, #592]	; (8001a8c <HAL_GPIO_Init+0x2ac>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d04c      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 8001840:	4a92      	ldr	r2, [pc, #584]	; (8001a8c <HAL_GPIO_Init+0x2ac>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d863      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001846:	4a92      	ldr	r2, [pc, #584]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d046      	beq.n	80018da <HAL_GPIO_Init+0xfa>
 800184c:	4a90      	ldr	r2, [pc, #576]	; (8001a90 <HAL_GPIO_Init+0x2b0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d85d      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 8001852:	2b12      	cmp	r3, #18
 8001854:	d82a      	bhi.n	80018ac <HAL_GPIO_Init+0xcc>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d859      	bhi.n	800190e <HAL_GPIO_Init+0x12e>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <HAL_GPIO_Init+0x80>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	080018db 	.word	0x080018db
 8001864:	080018b5 	.word	0x080018b5
 8001868:	080018c7 	.word	0x080018c7
 800186c:	08001909 	.word	0x08001909
 8001870:	0800190f 	.word	0x0800190f
 8001874:	0800190f 	.word	0x0800190f
 8001878:	0800190f 	.word	0x0800190f
 800187c:	0800190f 	.word	0x0800190f
 8001880:	0800190f 	.word	0x0800190f
 8001884:	0800190f 	.word	0x0800190f
 8001888:	0800190f 	.word	0x0800190f
 800188c:	0800190f 	.word	0x0800190f
 8001890:	0800190f 	.word	0x0800190f
 8001894:	0800190f 	.word	0x0800190f
 8001898:	0800190f 	.word	0x0800190f
 800189c:	0800190f 	.word	0x0800190f
 80018a0:	0800190f 	.word	0x0800190f
 80018a4:	080018bd 	.word	0x080018bd
 80018a8:	080018d1 	.word	0x080018d1
 80018ac:	4a79      	ldr	r2, [pc, #484]	; (8001a94 <HAL_GPIO_Init+0x2b4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d013      	beq.n	80018da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b2:	e02c      	b.n	800190e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	623b      	str	r3, [r7, #32]
          break;
 80018ba:	e029      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	3304      	adds	r3, #4
 80018c2:	623b      	str	r3, [r7, #32]
          break;
 80018c4:	e024      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	3308      	adds	r3, #8
 80018cc:	623b      	str	r3, [r7, #32]
          break;
 80018ce:	e01f      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	330c      	adds	r3, #12
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e01a      	b.n	8001910 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e2:	2304      	movs	r3, #4
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e013      	b.n	8001910 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d105      	bne.n	80018fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f0:	2308      	movs	r3, #8
 80018f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	611a      	str	r2, [r3, #16]
          break;
 80018fa:	e009      	b.n	8001910 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018fc:	2308      	movs	r3, #8
 80018fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	615a      	str	r2, [r3, #20]
          break;
 8001906:	e003      	b.n	8001910 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0x130>
          break;
 800190e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	2bff      	cmp	r3, #255	; 0xff
 8001914:	d801      	bhi.n	800191a <HAL_GPIO_Init+0x13a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	e001      	b.n	800191e <HAL_GPIO_Init+0x13e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3304      	adds	r3, #4
 800191e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d802      	bhi.n	800192c <HAL_GPIO_Init+0x14c>
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x152>
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	3b08      	subs	r3, #8
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	210f      	movs	r1, #15
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	401a      	ands	r2, r3
 8001944:	6a39      	ldr	r1, [r7, #32]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	431a      	orrs	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80b1 	beq.w	8001ac2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001960:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <HAL_GPIO_Init+0x2b8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_GPIO_Init+0x2b8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x2b8>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001978:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2bc>)
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001984:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a40      	ldr	r2, [pc, #256]	; (8001aa0 <HAL_GPIO_Init+0x2c0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_GPIO_Init+0x1ec>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a3f      	ldr	r2, [pc, #252]	; (8001aa4 <HAL_GPIO_Init+0x2c4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d00d      	beq.n	80019c8 <HAL_GPIO_Init+0x1e8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3e      	ldr	r2, [pc, #248]	; (8001aa8 <HAL_GPIO_Init+0x2c8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x1e4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3d      	ldr	r2, [pc, #244]	; (8001aac <HAL_GPIO_Init+0x2cc>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_GPIO_Init+0x1e0>
 80019bc:	2303      	movs	r3, #3
 80019be:	e006      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e004      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <HAL_GPIO_Init+0x1ee>
 80019cc:	2300      	movs	r3, #0
 80019ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d0:	f002 0203 	and.w	r2, r2, #3
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	4093      	lsls	r3, r2
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019de:	492f      	ldr	r1, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x2bc>)
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	492c      	ldr	r1, [pc, #176]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4928      	ldr	r1, [pc, #160]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4922      	ldr	r1, [pc, #136]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	491e      	ldr	r1, [pc, #120]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d006      	beq.n	8001a56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4918      	ldr	r1, [pc, #96]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4914      	ldr	r1, [pc, #80]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a60:	4013      	ands	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d021      	beq.n	8001ab4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	490e      	ldr	r1, [pc, #56]	; (8001ab0 <HAL_GPIO_Init+0x2d0>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e021      	b.n	8001ac2 <HAL_GPIO_Init+0x2e2>
 8001a7e:	bf00      	nop
 8001a80:	10320000 	.word	0x10320000
 8001a84:	10310000 	.word	0x10310000
 8001a88:	10220000 	.word	0x10220000
 8001a8c:	10210000 	.word	0x10210000
 8001a90:	10120000 	.word	0x10120000
 8001a94:	10110000 	.word	0x10110000
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000
 8001aa0:	40010800 	.word	0x40010800
 8001aa4:	40010c00 	.word	0x40010c00
 8001aa8:	40011000 	.word	0x40011000
 8001aac:	40011400 	.word	0x40011400
 8001ab0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4909      	ldr	r1, [pc, #36]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f47f ae8e 	bne.w	80017f4 <HAL_GPIO_Init+0x14>
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	372c      	adds	r7, #44	; 0x2c
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43d9      	mvns	r1, r3
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	400b      	ands	r3, r1
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e12b      	b.n	8001db6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fe4a 	bl	800080c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2224      	movs	r2, #36	; 0x24
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0201 	bic.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb0:	f002 fa48 	bl	8004044 <HAL_RCC_GetPCLK1Freq>
 8001bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a81      	ldr	r2, [pc, #516]	; (8001dc0 <HAL_I2C_Init+0x274>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d807      	bhi.n	8001bd0 <HAL_I2C_Init+0x84>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4a80      	ldr	r2, [pc, #512]	; (8001dc4 <HAL_I2C_Init+0x278>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	bf94      	ite	ls
 8001bc8:	2301      	movls	r3, #1
 8001bca:	2300      	movhi	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e006      	b.n	8001bde <HAL_I2C_Init+0x92>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a7d      	ldr	r2, [pc, #500]	; (8001dc8 <HAL_I2C_Init+0x27c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	bf94      	ite	ls
 8001bd8:	2301      	movls	r3, #1
 8001bda:	2300      	movhi	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0e7      	b.n	8001db6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4a78      	ldr	r2, [pc, #480]	; (8001dcc <HAL_I2C_Init+0x280>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0c9b      	lsrs	r3, r3, #18
 8001bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a6a      	ldr	r2, [pc, #424]	; (8001dc0 <HAL_I2C_Init+0x274>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d802      	bhi.n	8001c20 <HAL_I2C_Init+0xd4>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	e009      	b.n	8001c34 <HAL_I2C_Init+0xe8>
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4a69      	ldr	r2, [pc, #420]	; (8001dd0 <HAL_I2C_Init+0x284>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	099b      	lsrs	r3, r3, #6
 8001c32:	3301      	adds	r3, #1
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	495c      	ldr	r1, [pc, #368]	; (8001dc0 <HAL_I2C_Init+0x274>)
 8001c50:	428b      	cmp	r3, r1
 8001c52:	d819      	bhi.n	8001c88 <HAL_I2C_Init+0x13c>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	1e59      	subs	r1, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c62:	1c59      	adds	r1, r3, #1
 8001c64:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c68:	400b      	ands	r3, r1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_I2C_Init+0x138>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e59      	subs	r1, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c82:	e051      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e04f      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d111      	bne.n	8001cb4 <HAL_I2C_Init+0x168>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e58      	subs	r0, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e012      	b.n	8001cda <HAL_I2C_Init+0x18e>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1e58      	subs	r0, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6859      	ldr	r1, [r3, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	0099      	lsls	r1, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	bf0c      	ite	eq
 8001cd4:	2301      	moveq	r3, #1
 8001cd6:	2300      	movne	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x196>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e022      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10e      	bne.n	8001d08 <HAL_I2C_Init+0x1bc>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e58      	subs	r0, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6859      	ldr	r1, [r3, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d06:	e00f      	b.n	8001d28 <HAL_I2C_Init+0x1dc>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	1e58      	subs	r0, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	0099      	lsls	r1, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	6809      	ldr	r1, [r1, #0]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6911      	ldr	r1, [r2, #16]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	4311      	orrs	r1, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	000186a0 	.word	0x000186a0
 8001dc4:	001e847f 	.word	0x001e847f
 8001dc8:	003d08ff 	.word	0x003d08ff
 8001dcc:	431bde83 	.word	0x431bde83
 8001dd0:	10624dd3 	.word	0x10624dd3

08001dd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af06      	add	r7, sp, #24
 8001dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0f1      	b.n	8001fca <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f006 fb22 	bl	8008444 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fa27 	bl	8004260 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	687e      	ldr	r6, [r7, #4]
 8001e1a:	466d      	mov	r5, sp
 8001e1c:	f106 0410 	add.w	r4, r6, #16
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	602b      	str	r3, [r5, #0]
 8001e28:	1d33      	adds	r3, r6, #4
 8001e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f002 f9f1 	bl	8004214 <USB_CoreInit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0c2      	b.n	8001fca <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 fa22 	bl	8004294 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e040      	b.n	8001ed8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	3301      	adds	r3, #1
 8001e68:	2201      	movs	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	4613      	mov	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	440b      	add	r3, r1
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	3303      	adds	r3, #3
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3338      	adds	r3, #56	; 0x38
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	333c      	adds	r3, #60	; 0x3c
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	440b      	add	r3, r1
 8001ecc:	3340      	adds	r3, #64	; 0x40
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3b9      	bcc.n	8001e56 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	e044      	b.n	8001f72 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ee8:	7bfa      	ldrb	r2, [r7, #15]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	73fb      	strb	r3, [r7, #15]
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d3b5      	bcc.n	8001ee8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	687e      	ldr	r6, [r7, #4]
 8001f84:	466d      	mov	r5, sp
 8001f86:	f106 0410 	add.w	r4, r6, #16
 8001f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	602b      	str	r3, [r5, #0]
 8001f92:	1d33      	adds	r3, r6, #4
 8001f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f96:	6838      	ldr	r0, [r7, #0]
 8001f98:	f002 f988 	bl	80042ac <USB_DevInit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00d      	b.n	8001fca <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fc09 	bl	80067da <USB_DevDisconnect>

  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fd2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_PCD_Start+0x16>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e016      	b.n	8002016 <HAL_PCD_Start+0x44>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 f91d 	bl	8004234 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f006 fc94 	bl	800892a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f004 fbdd 	bl	80067c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b088      	sub	sp, #32
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f004 fbdf 	bl	80067ee <USB_ReadInterrupts>
 8002030:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fb1b 	bl	8002678 <PCD_EP_ISR_Handler>

    return;
 8002042:	e119      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	2b00      	cmp	r3, #0
 800204c:	d013      	beq.n	8002076 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002056:	b29a      	uxth	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002060:	b292      	uxth	r2, r2
 8002062:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f006 fa67 	bl	800853a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800206c:	2100      	movs	r1, #0
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f905 	bl	800227e <HAL_PCD_SetAddress>

    return;
 8002074:	e100      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00c      	beq.n	800209a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002092:	b292      	uxth	r2, r2
 8002094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002098:	e0ee      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00c      	beq.n	80020be <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020b6:	b292      	uxth	r2, r2
 80020b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020bc:	e0dc      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d027      	beq.n	8002118 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0204 	bic.w	r2, r2, #4
 80020da:	b292      	uxth	r2, r2
 80020dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0208 	bic.w	r2, r2, #8
 80020f2:	b292      	uxth	r2, r2
 80020f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f006 fa57 	bl	80085ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002106:	b29a      	uxth	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002110:	b292      	uxth	r2, r2
 8002112:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002116:	e0af      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8083 	beq.w	800222a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002124:	2300      	movs	r3, #0
 8002126:	77fb      	strb	r3, [r7, #31]
 8002128:	e010      	b.n	800214c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	7ffb      	ldrb	r3, [r7, #31]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	7ffb      	ldrb	r3, [r7, #31]
 8002138:	8812      	ldrh	r2, [r2, #0]
 800213a:	b292      	uxth	r2, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	3320      	adds	r3, #32
 8002140:	443b      	add	r3, r7
 8002142:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	3301      	adds	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	2b07      	cmp	r3, #7
 8002150:	d9eb      	bls.n	800212a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f042 0201 	orr.w	r2, r2, #1
 8002164:	b292      	uxth	r2, r2
 8002166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	b292      	uxth	r2, r2
 800217e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002182:	bf00      	nop
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800218c:	b29b      	uxth	r3, r3
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f6      	beq.n	8002184 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800219e:	b29a      	uxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021a8:	b292      	uxth	r2, r2
 80021aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	77fb      	strb	r3, [r7, #31]
 80021b2:	e00f      	b.n	80021d4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80021b4:	7ffb      	ldrb	r3, [r7, #31]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4611      	mov	r1, r2
 80021bc:	7ffa      	ldrb	r2, [r7, #31]
 80021be:	0092      	lsls	r2, r2, #2
 80021c0:	440a      	add	r2, r1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	3320      	adds	r3, #32
 80021c6:	443b      	add	r3, r7
 80021c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80021cc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80021ce:	7ffb      	ldrb	r3, [r7, #31]
 80021d0:	3301      	adds	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
 80021d6:	2b07      	cmp	r3, #7
 80021d8:	d9ec      	bls.n	80021b4 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0208 	orr.w	r2, r2, #8
 80021ec:	b292      	uxth	r2, r2
 80021ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002204:	b292      	uxth	r2, r2
 8002206:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0204 	orr.w	r2, r2, #4
 800221c:	b292      	uxth	r2, r2
 800221e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f006 f9a8 	bl	8008578 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002228:	e026      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00f      	beq.n	8002254 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800223c:	b29a      	uxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002246:	b292      	uxth	r2, r2
 8002248:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f006 f966 	bl	800851e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002252:	e011      	b.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00c      	beq.n	8002278 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002270:	b292      	uxth	r2, r2
 8002272:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002276:	bf00      	nop
  }
}
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_PCD_SetAddress+0x1a>
 8002294:	2302      	movs	r3, #2
 8002296:	e013      	b.n	80022c0 <HAL_PCD_SetAddress+0x42>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 fa75 	bl	80067a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	70fb      	strb	r3, [r7, #3]
 80022da:	460b      	mov	r3, r1
 80022dc:	803b      	strh	r3, [r7, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da0e      	bge.n	800230c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	705a      	strb	r2, [r3, #1]
 800230a:	e00e      	b.n	800232a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 0207 	and.w	r2, r3, #7
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002336:	883a      	ldrh	r2, [r7, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002342:	78bb      	ldrb	r3, [r7, #2]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d102      	bne.n	800234e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_PCD_EP_Open+0x94>
 8002358:	2302      	movs	r3, #2
 800235a:	e00e      	b.n	800237a <HAL_PCD_EP_Open+0xb2>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f001 ffbe 	bl	80042ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002378:	7afb      	ldrb	r3, [r7, #11]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800238e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	da0e      	bge.n	80023b4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002396:	78fb      	ldrb	r3, [r7, #3]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	705a      	strb	r2, [r3, #1]
 80023b2:	e00e      	b.n	80023d2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b4:	78fb      	ldrb	r3, [r7, #3]
 80023b6:	f003 0207 	and.w	r2, r3, #7
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <HAL_PCD_EP_Close+0x6a>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e00e      	b.n	800240a <HAL_PCD_EP_Close+0x88>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fb36 	bl	8004a6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	460b      	mov	r3, r1
 8002420:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	f003 0207 	and.w	r2, r3, #7
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4413      	add	r3, r2
 8002438:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2200      	movs	r2, #0
 8002450:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	b2da      	uxtb	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6979      	ldr	r1, [r7, #20]
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fced 	bl	8004e44 <USB_EPStartXfer>

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002480:	78fb      	ldrb	r3, [r7, #3]
 8002482:	f003 0207 	and.w	r2, r3, #7
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	440b      	add	r3, r1
 8002492:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	460b      	mov	r3, r1
 80024b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	7afb      	ldrb	r3, [r7, #11]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2201      	movs	r2, #1
 80024ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6979      	ldr	r1, [r7, #20]
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fc9f 	bl	8004e44 <USB_EPStartXfer>

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	f003 0207 	and.w	r2, r3, #7
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	429a      	cmp	r2, r3
 8002528:	d901      	bls.n	800252e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e04c      	b.n	80025c8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800252e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002532:	2b00      	cmp	r3, #0
 8002534:	da0e      	bge.n	8002554 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	705a      	strb	r2, [r3, #1]
 8002552:	e00c      	b.n	800256e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	b2da      	uxtb	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_PCD_EP_SetStall+0x7e>
 800258a:	2302      	movs	r3, #2
 800258c:	e01c      	b.n	80025c8 <HAL_PCD_EP_SetStall+0xb8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68f9      	ldr	r1, [r7, #12]
 800259c:	4618      	mov	r0, r3
 800259e:	f004 f802 	bl	80065a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d108      	bne.n	80025be <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f004 f927 	bl	800680c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 020f 	and.w	r2, r3, #15
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d901      	bls.n	80025ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e040      	b.n	8002670 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da0e      	bge.n	8002614 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	4613      	mov	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	705a      	strb	r2, [r3, #1]
 8002612:	e00e      	b.n	8002632 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	f003 0207 	and.w	r2, r3, #7
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	b2da      	uxtb	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_PCD_EP_ClrStall+0x82>
 800264e:	2302      	movs	r3, #2
 8002650:	e00e      	b.n	8002670 <HAL_PCD_EP_ClrStall+0xa0>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68f9      	ldr	r1, [r7, #12]
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fff0 	bl	8006646 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b096      	sub	sp, #88	; 0x58
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002680:	e3bf      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800268a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800268e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800269c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 8179 	bne.w	8002998 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d152      	bne.n	8002758 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	881b      	ldrh	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	81fb      	strh	r3, [r7, #14]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	89fb      	ldrh	r3, [r7, #14]
 80026ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3328      	adds	r3, #40	; 0x28
 80026da:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4413      	add	r3, r2
 80026f0:	3302      	adds	r3, #2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	441a      	add	r2, r3
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002716:	2100      	movs	r1, #0
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f005 fee6 	bl	80084ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 836b 	beq.w	8002e02 <PCD_EP_ISR_Handler+0x78a>
 800272c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 8366 	bne.w	8002e02 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002742:	b2da      	uxtb	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b292      	uxth	r2, r2
 800274a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002756:	e354      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800275e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800276a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800276e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002772:	2b00      	cmp	r3, #0
 8002774:	d034      	beq.n	80027e0 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	3306      	adds	r3, #6
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80027ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f004 f879 	bl	80068ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c6:	4013      	ands	r3, r2
 80027c8:	823b      	strh	r3, [r7, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	8a3a      	ldrh	r2, [r7, #16]
 80027d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d4:	b292      	uxth	r2, r2
 80027d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f005 fe59 	bl	8008490 <HAL_PCD_SetupStageCallback>
 80027de:	e310      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f280 830c 	bge.w	8002e02 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027f6:	4013      	ands	r3, r2
 80027f8:	83fb      	strh	r3, [r7, #30]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	8bfa      	ldrh	r2, [r7, #30]
 8002800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002804:	b292      	uxth	r2, r2
 8002806:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002810:	b29b      	uxth	r3, r3
 8002812:	461a      	mov	r2, r3
 8002814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	3306      	adds	r3, #6
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4413      	add	r3, r2
 8002826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d019      	beq.n	8002870 <PCD_EP_ISR_Handler+0x1f8>
 800283c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d015      	beq.n	8002870 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	6959      	ldr	r1, [r3, #20]
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002854:	b29b      	uxth	r3, r3
 8002856:	f004 f829 	bl	80068ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800285a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	441a      	add	r2, r3
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002868:	2100      	movs	r1, #0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f005 fe22 	bl	80084b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800287a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800287e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 82bd 	bne.w	8002e02 <PCD_EP_ISR_Handler+0x78a>
 8002888:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800288c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002894:	f000 82b5 	beq.w	8002e02 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	461a      	mov	r2, r3
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	801a      	strh	r2, [r3, #0]
 80028c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b3e      	cmp	r3, #62	; 0x3e
 80028ce:	d91d      	bls.n	800290c <PCD_EP_ISR_Handler+0x294>
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
 80028d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <PCD_EP_ISR_Handler+0x272>
 80028e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e6:	3b01      	subs	r3, #1
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	029b      	lsls	r3, r3, #10
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002904:	b29a      	uxth	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	801a      	strh	r2, [r3, #0]
 800290a:	e026      	b.n	800295a <PCD_EP_ISR_Handler+0x2e2>
 800290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <PCD_EP_ISR_Handler+0x2b2>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	b29b      	uxth	r3, r3
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29a      	uxth	r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	801a      	strh	r2, [r3, #0]
 8002928:	e017      	b.n	800295a <PCD_EP_ISR_Handler+0x2e2>
 800292a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	085b      	lsrs	r3, r3, #1
 8002930:	647b      	str	r3, [r7, #68]	; 0x44
 8002932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <PCD_EP_ISR_Handler+0x2cc>
 800293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002940:	3301      	adds	r3, #1
 8002942:	647b      	str	r3, [r7, #68]	; 0x44
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29a      	uxth	r2, r3
 800294a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800294c:	b29b      	uxth	r3, r3
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	b29b      	uxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b29a      	uxth	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	827b      	strh	r3, [r7, #18]
 800296c:	8a7b      	ldrh	r3, [r7, #18]
 800296e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002972:	827b      	strh	r3, [r7, #18]
 8002974:	8a7b      	ldrh	r3, [r7, #18]
 8002976:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800297a:	827b      	strh	r3, [r7, #18]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	8a7b      	ldrh	r3, [r7, #18]
 8002982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002992:	b29b      	uxth	r3, r3
 8002994:	8013      	strh	r3, [r2, #0]
 8002996:	e234      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f280 80fc 	bge.w	8002bae <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029cc:	4013      	ands	r3, r2
 80029ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80029e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e8:	b292      	uxth	r2, r2
 80029ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80029ec:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a04:	7b1b      	ldrb	r3, [r3, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d125      	bne.n	8002a56 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3306      	adds	r3, #6
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8092 	beq.w	8002b64 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a46:	6959      	ldr	r1, [r3, #20]
 8002a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a4a:	88da      	ldrh	r2, [r3, #6]
 8002a4c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a50:	f003 ff2c 	bl	80068ac <USB_ReadPMA>
 8002a54:	e086      	b.n	8002b64 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	78db      	ldrb	r3, [r3, #3]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d10a      	bne.n	8002a74 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a62:	461a      	mov	r2, r3
 8002a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f9d9 	bl	8002e1e <HAL_PCD_EP_DB_Receive>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a72:	e077      	b.n	8002b64 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d024      	beq.n	8002b1c <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002afe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d02e      	beq.n	8002b64 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0c:	6959      	ldr	r1, [r3, #20]
 8002b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b10:	891a      	ldrh	r2, [r3, #8]
 8002b12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b16:	f003 fec9 	bl	80068ac <USB_ReadPMA>
 8002b1a:	e023      	b.n	8002b64 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3306      	adds	r3, #6
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b56:	6959      	ldr	r1, [r3, #20]
 8002b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5a:	895a      	ldrh	r2, [r3, #10]
 8002b5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b60:	f003 fea4 	bl	80068ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b6c:	441a      	add	r2, r3
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b7a:	441a      	add	r2, r3
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <PCD_EP_ISR_Handler+0x51c>
 8002b88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d206      	bcs.n	8002ba2 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	4619      	mov	r1, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f005 fc8a 	bl	80084b4 <HAL_PCD_DataOutStageCallback>
 8002ba0:	e005      	b.n	8002bae <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 f94b 	bl	8004e44 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 8123 	beq.w	8002e02 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002bbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0e:	78db      	ldrb	r3, [r3, #3]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 80a2 	bne.w	8002d5a <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1e:	7b1b      	ldrb	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8093 	beq.w	8002d4c <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d046      	beq.n	8002cc0 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <PCD_EP_ISR_Handler+0x610>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	4413      	add	r3, r2
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	011a      	lsls	r2, r3, #4
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c60:	623b      	str	r3, [r7, #32]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	e061      	b.n	8002d4c <PCD_EP_ISR_Handler+0x6d4>
 8002c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d15d      	bne.n	8002d4c <PCD_EP_ISR_Handler+0x6d4>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	4413      	add	r3, r2
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	e045      	b.n	8002d4c <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	785b      	ldrb	r3, [r3, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d126      	bne.n	8002d1c <PCD_EP_ISR_Handler+0x6a4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	461a      	mov	r2, r3
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	4413      	add	r3, r2
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	011a      	lsls	r2, r3, #4
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	4413      	add	r3, r2
 8002cf0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	801a      	strh	r2, [r3, #0]
 8002d1a:	e017      	b.n	8002d4c <PCD_EP_ISR_Handler+0x6d4>
 8002d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1e:	785b      	ldrb	r3, [r3, #1]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d113      	bne.n	8002d4c <PCD_EP_ISR_Handler+0x6d4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d32:	4413      	add	r3, r2
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	011a      	lsls	r2, r3, #4
 8002d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3e:	4413      	add	r3, r2
 8002d40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d48:	2200      	movs	r2, #0
 8002d4a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f005 fbc9 	bl	80084ea <HAL_PCD_DataInStageCallback>
 8002d58:	e053      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d5a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d146      	bne.n	8002df4 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d94:	699a      	ldr	r2, [r3, #24]
 8002d96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d907      	bls.n	8002dae <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002da6:	1ad2      	subs	r2, r2, r3
 8002da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002daa:	619a      	str	r2, [r3, #24]
 8002dac:	e002      	b.n	8002db4 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db0:	2200      	movs	r2, #0
 8002db2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f005 fb91 	bl	80084ea <HAL_PCD_DataInStageCallback>
 8002dc8:	e01b      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dd2:	441a      	add	r2, r3
 8002dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002de0:	441a      	add	r2, r3
 8002de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de4:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dec:	4618      	mov	r0, r3
 8002dee:	f002 f829 	bl	8004e44 <USB_EPStartXfer>
 8002df2:	e006      	b.n	8002e02 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002df4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f91b 	bl	8003038 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f6ff ac37 	blt.w	8002682 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3758      	adds	r7, #88	; 0x58
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b088      	sub	sp, #32
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d07e      	beq.n	8002f34 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e5e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	8b7b      	ldrh	r3, [r7, #26]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d306      	bcc.n	8002e78 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	8b7b      	ldrh	r3, [r7, #26]
 8002e70:	1ad2      	subs	r2, r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	619a      	str	r2, [r3, #24]
 8002e76:	e002      	b.n	8002e7e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d123      	bne.n	8002ece <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea0:	833b      	strh	r3, [r7, #24]
 8002ea2:	8b3b      	ldrh	r3, [r7, #24]
 8002ea4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ea8:	833b      	strh	r3, [r7, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	441a      	add	r2, r3
 8002eb8:	8b3b      	ldrh	r3, [r7, #24]
 8002eba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01f      	beq.n	8002f18 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	82fb      	strh	r3, [r7, #22]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	8afb      	ldrh	r3, [r7, #22]
 8002f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6959      	ldr	r1, [r3, #20]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	891a      	ldrh	r2, [r3, #8]
 8002f2c:	8b7b      	ldrh	r3, [r7, #26]
 8002f2e:	f003 fcbd 	bl	80068ac <USB_ReadPMA>
 8002f32:	e07c      	b.n	800302e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	3306      	adds	r3, #6
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f5c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	8b7b      	ldrh	r3, [r7, #26]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d306      	bcc.n	8002f76 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	8b7b      	ldrh	r3, [r7, #26]
 8002f6e:	1ad2      	subs	r2, r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	619a      	str	r2, [r3, #24]
 8002f74:	e002      	b.n	8002f7c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d123      	bne.n	8002fcc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	83fb      	strh	r3, [r7, #30]
 8002fa0:	8bfb      	ldrh	r3, [r7, #30]
 8002fa2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fa6:	83fb      	strh	r3, [r7, #30]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	8bfb      	ldrh	r3, [r7, #30]
 8002fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11f      	bne.n	8003016 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	83bb      	strh	r3, [r7, #28]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	441a      	add	r2, r3
 8003000:	8bbb      	ldrh	r3, [r7, #28]
 8003002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800300a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003012:	b29b      	uxth	r3, r3
 8003014:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003016:	8b7b      	ldrh	r3, [r7, #26]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6959      	ldr	r1, [r3, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	895a      	ldrh	r2, [r3, #10]
 8003028:	8b7b      	ldrh	r3, [r7, #26]
 800302a:	f003 fc3f 	bl	80068ac <USB_ReadPMA>
    }
  }

  return count;
 800302e:	8b7b      	ldrh	r3, [r7, #26]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3720      	adds	r7, #32
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b0a4      	sub	sp, #144	; 0x90
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003046:	88fb      	ldrh	r3, [r7, #6]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 81dd 	beq.w	800340c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4413      	add	r3, r2
 8003066:	3302      	adds	r3, #2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	4413      	add	r3, r2
 8003070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800307a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003086:	429a      	cmp	r2, r3
 8003088:	d907      	bls.n	800309a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003092:	1ad2      	subs	r2, r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	619a      	str	r2, [r3, #24]
 8003098:	e002      	b.n	80030a0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 80b9 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d126      	bne.n	8003100 <HAL_PCD_EP_DB_Transmit+0xc8>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	4413      	add	r3, r2
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	011a      	lsls	r2, r3, #4
 80030d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d2:	4413      	add	r3, r2
 80030d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	e01a      	b.n	8003136 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d116      	bne.n	8003136 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311c:	4413      	add	r3, r2
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	011a      	lsls	r2, r3, #4
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003128:	4413      	add	r3, r2
 800312a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800312e:	633b      	str	r3, [r7, #48]	; 0x30
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	2200      	movs	r2, #0
 8003134:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	785b      	ldrb	r3, [r3, #1]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d126      	bne.n	8003192 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	011a      	lsls	r2, r3, #4
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800316a:	61bb      	str	r3, [r7, #24]
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003176:	b29a      	uxth	r2, r3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	801a      	strh	r2, [r3, #0]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	881b      	ldrh	r3, [r3, #0]
 8003180:	b29b      	uxth	r3, r3
 8003182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800318a:	b29a      	uxth	r2, r3
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	801a      	strh	r2, [r3, #0]
 8003190:	e017      	b.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d113      	bne.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	4413      	add	r3, r2
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	011a      	lsls	r2, r3, #4
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	4413      	add	r3, r2
 80031b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2200      	movs	r2, #0
 80031c0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4619      	mov	r1, r3
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f005 f98e 	bl	80084ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 82fc 	beq.w	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	82fb      	strh	r3, [r7, #22]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	441a      	add	r2, r3
 8003204:	8afb      	ldrh	r3, [r7, #22]
 8003206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800320a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
 800321a:	e2da      	b.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d021      	beq.n	800326a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	b29b      	uxth	r3, r3
 8003238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003240:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800325e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 82ae 	bne.w	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800327e:	441a      	add	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800328c:	441a      	add	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	6a1a      	ldr	r2, [r3, #32]
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	429a      	cmp	r2, r3
 800329c:	d30b      	bcc.n	80032b6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ae:	1ad2      	subs	r2, r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	621a      	str	r2, [r3, #32]
 80032b4:	e017      	b.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d108      	bne.n	80032d0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80032be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032ce:	e00a      	b.n	80032e6 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	785b      	ldrb	r3, [r3, #1]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d165      	bne.n	80033ba <HAL_PCD_EP_DB_Transmit+0x382>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003302:	4413      	add	r3, r2
 8003304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	011a      	lsls	r2, r3, #4
 800330c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330e:	4413      	add	r3, r2
 8003310:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003320:	b29a      	uxth	r2, r3
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800332a:	2b3e      	cmp	r3, #62	; 0x3e
 800332c:	d91d      	bls.n	800336a <HAL_PCD_EP_DB_Transmit+0x332>
 800332e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003332:	095b      	lsrs	r3, r3, #5
 8003334:	64bb      	str	r3, [r7, #72]	; 0x48
 8003336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x310>
 8003342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003344:	3b01      	subs	r3, #1
 8003346:	64bb      	str	r3, [r7, #72]	; 0x48
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	b29a      	uxth	r2, r3
 800334e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003350:	b29b      	uxth	r3, r3
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	b29b      	uxth	r3, r3
 8003356:	4313      	orrs	r3, r2
 8003358:	b29b      	uxth	r3, r3
 800335a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003362:	b29a      	uxth	r2, r3
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	e044      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800336a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <HAL_PCD_EP_DB_Transmit+0x350>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003380:	b29a      	uxth	r2, r3
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e035      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_PCD_EP_DB_Transmit+0x36a>
 800339c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800339e:	3301      	adds	r3, #1
 80033a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	029b      	lsls	r3, r3, #10
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	801a      	strh	r2, [r3, #0]
 80033b8:	e01c      	b.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	785b      	ldrb	r3, [r3, #1]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d118      	bne.n	80033f4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	647b      	str	r3, [r7, #68]	; 0x44
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d6:	4413      	add	r3, r2
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	011a      	lsls	r2, r3, #4
 80033e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e2:	4413      	add	r3, r2
 80033e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033e8:	643b      	str	r3, [r7, #64]	; 0x40
 80033ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6959      	ldr	r1, [r3, #20]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	891a      	ldrh	r2, [r3, #8]
 8003400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003404:	b29b      	uxth	r3, r3
 8003406:	f003 fa0c 	bl	8006822 <USB_WritePMA>
 800340a:	e1e2      	b.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	3306      	adds	r3, #6
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003434:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003440:	429a      	cmp	r2, r3
 8003442:	d307      	bcc.n	8003454 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800344c:	1ad2      	subs	r2, r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	619a      	str	r2, [r3, #24]
 8003452:	e002      	b.n	800345a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b00      	cmp	r3, #0
 8003460:	f040 80c0 	bne.w	80035e4 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d126      	bne.n	80034ba <HAL_PCD_EP_DB_Transmit+0x482>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347a:	b29b      	uxth	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003480:	4413      	add	r3, r2
 8003482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	011a      	lsls	r2, r3, #4
 800348a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800348c:	4413      	add	r3, r2
 800348e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003492:	67bb      	str	r3, [r7, #120]	; 0x78
 8003494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349e:	b29a      	uxth	r2, r3
 80034a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	801a      	strh	r2, [r3, #0]
 80034b8:	e01a      	b.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d116      	bne.n	80034f0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	667b      	str	r3, [r7, #100]	; 0x64
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034d6:	4413      	add	r3, r2
 80034d8:	667b      	str	r3, [r7, #100]	; 0x64
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	011a      	lsls	r2, r3, #4
 80034e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034e2:	4413      	add	r3, r2
 80034e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034e8:	663b      	str	r3, [r7, #96]	; 0x60
 80034ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ec:	2200      	movs	r2, #0
 80034ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	677b      	str	r3, [r7, #116]	; 0x74
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d12b      	bne.n	8003556 <HAL_PCD_EP_DB_Transmit+0x51e>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003512:	4413      	add	r3, r2
 8003514:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	011a      	lsls	r2, r3, #4
 800351c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351e:	4413      	add	r3, r2
 8003520:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003528:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003534:	b29a      	uxth	r2, r3
 8003536:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800353a:	801a      	strh	r2, [r3, #0]
 800353c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354c:	b29a      	uxth	r2, r3
 800354e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003552:	801a      	strh	r2, [r3, #0]
 8003554:	e017      	b.n	8003586 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	785b      	ldrb	r3, [r3, #1]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d113      	bne.n	8003586 <HAL_PCD_EP_DB_Transmit+0x54e>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003566:	b29b      	uxth	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356c:	4413      	add	r3, r2
 800356e:	677b      	str	r3, [r7, #116]	; 0x74
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	011a      	lsls	r2, r3, #4
 8003576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003578:	4413      	add	r3, r2
 800357a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800357e:	673b      	str	r3, [r7, #112]	; 0x70
 8003580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003582:	2200      	movs	r2, #0
 8003584:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f004 ffac 	bl	80084ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 811a 	bne.w	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	441a      	add	r2, r3
 80035ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80035ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035de:	b29b      	uxth	r3, r3
 80035e0:	8013      	strh	r3, [r2, #0]
 80035e2:	e0f6      	b.n	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d121      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	461a      	mov	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800361e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800362a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362e:	b29b      	uxth	r3, r3
 8003630:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003638:	2b01      	cmp	r3, #1
 800363a:	f040 80ca 	bne.w	80037d2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	695a      	ldr	r2, [r3, #20]
 8003642:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003646:	441a      	add	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003654:	441a      	add	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6a1a      	ldr	r2, [r3, #32]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	429a      	cmp	r2, r3
 8003664:	d30b      	bcc.n	800367e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6a1a      	ldr	r2, [r3, #32]
 8003672:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003676:	1ad2      	subs	r2, r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	621a      	str	r2, [r3, #32]
 800367c:	e017      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003686:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800368a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003696:	e00a      	b.n	80036ae <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2200      	movs	r2, #0
 80036a4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	657b      	str	r3, [r7, #84]	; 0x54
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d165      	bne.n	8003788 <HAL_PCD_EP_DB_Transmit+0x750>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	4413      	add	r3, r2
 80036d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	011a      	lsls	r2, r3, #4
 80036da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036dc:	4413      	add	r3, r2
 80036de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80036e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f2:	801a      	strh	r2, [r3, #0]
 80036f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036f8:	2b3e      	cmp	r3, #62	; 0x3e
 80036fa:	d91d      	bls.n	8003738 <HAL_PCD_EP_DB_Transmit+0x700>
 80036fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	66bb      	str	r3, [r7, #104]	; 0x68
 8003704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003712:	3b01      	subs	r3, #1
 8003714:	66bb      	str	r3, [r7, #104]	; 0x68
 8003716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29a      	uxth	r2, r3
 800371c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800371e:	b29b      	uxth	r3, r3
 8003720:	029b      	lsls	r3, r3, #10
 8003722:	b29b      	uxth	r3, r3
 8003724:	4313      	orrs	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800372c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003730:	b29a      	uxth	r2, r3
 8003732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e041      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x784>
 8003738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003740:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	b29b      	uxth	r3, r3
 8003746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800374e:	b29a      	uxth	r2, r3
 8003750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003752:	801a      	strh	r2, [r3, #0]
 8003754:	e032      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x784>
 8003756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375a:	085b      	lsrs	r3, r3, #1
 800375c:	66bb      	str	r3, [r7, #104]	; 0x68
 800375e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_PCD_EP_DB_Transmit+0x738>
 800376a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800376c:	3301      	adds	r3, #1
 800376e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	b29a      	uxth	r2, r3
 8003776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003778:	b29b      	uxth	r3, r3
 800377a:	029b      	lsls	r3, r3, #10
 800377c:	b29b      	uxth	r3, r3
 800377e:	4313      	orrs	r3, r2
 8003780:	b29a      	uxth	r2, r3
 8003782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	e019      	b.n	80037bc <HAL_PCD_EP_DB_Transmit+0x784>
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d115      	bne.n	80037bc <HAL_PCD_EP_DB_Transmit+0x784>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379e:	4413      	add	r3, r2
 80037a0:	657b      	str	r3, [r7, #84]	; 0x54
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	011a      	lsls	r2, r3, #4
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037aa:	4413      	add	r3, r2
 80037ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037b0:	653b      	str	r3, [r7, #80]	; 0x50
 80037b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6959      	ldr	r1, [r3, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	895a      	ldrh	r2, [r3, #10]
 80037c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f003 f828 	bl	8006822 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ec:	82bb      	strh	r3, [r7, #20]
 80037ee:	8abb      	ldrh	r3, [r7, #20]
 80037f0:	f083 0310 	eor.w	r3, r3, #16
 80037f4:	82bb      	strh	r3, [r7, #20]
 80037f6:	8abb      	ldrh	r3, [r7, #20]
 80037f8:	f083 0320 	eor.w	r3, r3, #32
 80037fc:	82bb      	strh	r3, [r7, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	441a      	add	r2, r3
 800380c:	8abb      	ldrh	r3, [r7, #20]
 800380e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3790      	adds	r7, #144	; 0x90
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	817b      	strh	r3, [r7, #10]
 800383a:	4613      	mov	r3, r2
 800383c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e009      	b.n	8003876 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003862:	897a      	ldrh	r2, [r7, #10]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003876:	893b      	ldrh	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2200      	movs	r2, #0
 8003880:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b29a      	uxth	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	80da      	strh	r2, [r3, #6]
 800388a:	e00b      	b.n	80038a4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2201      	movs	r2, #1
 8003890:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	b29a      	uxth	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	b29a      	uxth	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e272      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8087 	beq.w	80039de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d0:	4b92      	ldr	r3, [pc, #584]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d00c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038dc:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d112      	bne.n	800390e <HAL_RCC_OscConfig+0x5e>
 80038e8:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d10b      	bne.n	800390e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f6:	4b89      	ldr	r3, [pc, #548]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d06c      	beq.n	80039dc <HAL_RCC_OscConfig+0x12c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d168      	bne.n	80039dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e24c      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003916:	d106      	bne.n	8003926 <HAL_RCC_OscConfig+0x76>
 8003918:	4b80      	ldr	r3, [pc, #512]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a7f      	ldr	r2, [pc, #508]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800391e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x98>
 800392e:	4b7b      	ldr	r3, [pc, #492]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7a      	ldr	r2, [pc, #488]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b78      	ldr	r3, [pc, #480]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a77      	ldr	r2, [pc, #476]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e01d      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0xbc>
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a71      	ldr	r2, [pc, #452]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6e      	ldr	r2, [pc, #440]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 800396c:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6a      	ldr	r2, [pc, #424]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a67      	ldr	r2, [pc, #412]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800397e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd f83c 	bl	8000a08 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7fd f838 	bl	8000a08 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e200      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xe4>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd f828 	bl	8000a08 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd f824 	bl	8000a08 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1ec      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x10c>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d063      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d11c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x18c>
 8003a02:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1c0      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4939      	ldr	r1, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	e03a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fc ffdd 	bl	8000a08 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fc ffd9 	bl	8000a08 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e1a1      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4927      	ldr	r1, [pc, #156]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fc ffbc 	bl	8000a08 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fc ffb8 	bl	8000a08 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e180      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03a      	beq.n	8003b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d019      	beq.n	8003afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7fc ff9c 	bl	8000a08 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fc ff98 	bl	8000a08 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e160      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003af2:	2001      	movs	r0, #1
 8003af4:	f000 faba 	bl	800406c <RCC_Delay>
 8003af8:	e01c      	b.n	8003b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fc ff82 	bl	8000a08 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	e00f      	b.n	8003b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fc ff7e 	bl	8000a08 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d908      	bls.n	8003b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e146      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	42420000 	.word	0x42420000
 8003b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	4b92      	ldr	r3, [pc, #584]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e9      	bne.n	8003b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a6 	beq.w	8003c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b46:	4b8b      	ldr	r3, [pc, #556]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	4b88      	ldr	r3, [pc, #544]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	4a87      	ldr	r2, [pc, #540]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	61d3      	str	r3, [r2, #28]
 8003b5e:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b82      	ldr	r3, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a7e      	ldr	r2, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b86:	f7fc ff3f 	bl	8000a08 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fc ff3b 	bl	8000a08 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e103      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b75      	ldr	r3, [pc, #468]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x312>
 8003bb4:	4b6f      	ldr	r3, [pc, #444]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4a6e      	ldr	r2, [pc, #440]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6213      	str	r3, [r2, #32]
 8003bc0:	e02d      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x334>
 8003bca:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a69      	ldr	r2, [pc, #420]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6213      	str	r3, [r2, #32]
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a66      	ldr	r2, [pc, #408]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	e01c      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x356>
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a60      	ldr	r2, [pc, #384]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a5a      	ldr	r2, [pc, #360]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a57      	ldr	r2, [pc, #348]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fc feef 	bl	8000a08 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fc feeb 	bl	8000a08 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e0b1      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCC_OscConfig+0x37e>
 8003c50:	e014      	b.n	8003c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fc fed9 	bl	8000a08 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fc fed5 	bl	8000a08 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e09b      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ee      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8087 	beq.w	8003da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d061      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d146      	bne.n	8003d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fc fea9 	bl	8000a08 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fc fea5 	bl	8000a08 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e06d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4921      	ldr	r1, [pc, #132]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a19      	ldr	r1, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	430b      	orrs	r3, r1
 8003d06:	491b      	ldr	r1, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x4cc>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fc fe79 	bl	8000a08 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fc fe75 	bl	8000a08 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e03d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x46a>
 8003d38:	e035      	b.n	8003da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_OscConfig+0x4cc>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fc fe62 	bl	8000a08 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fc fe5e 	bl	8000a08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e026      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x498>
 8003d66:	e01e      	b.n	8003da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e019      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x500>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0d0      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d910      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4965      	ldr	r1, [pc, #404]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d040      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d115      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e073      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e06b      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4936      	ldr	r1, [pc, #216]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fc fdb0 	bl	8000a08 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fc fdac 	bl	8000a08 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e053      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d210      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	4922      	ldr	r1, [pc, #136]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	; (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1cc>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fd0e 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40022000 	.word	0x40022000
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08008aa8 	.word	0x08008aa8
 8003f80:	20000000 	.word	0x20000000
 8003f84:	20000004 	.word	0x20000004

08003f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x36>
 8003fb6:	e027      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fba:	613b      	str	r3, [r7, #16]
      break;
 8003fbc:	e027      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0c9b      	lsrs	r3, r3, #18
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d010      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0c5b      	lsrs	r3, r3, #17
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	4a11      	ldr	r2, [pc, #68]	; (8004028 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003fe2:	5cd3      	ldrb	r3, [r2, r3]
 8003fe4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fea:	fb03 f202 	mul.w	r2, r3, r2
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e004      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	; (800402c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ffc:	fb02 f303 	mul.w	r3, r2, r3
 8004000:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	613b      	str	r3, [r7, #16]
      break;
 8004006:	e002      	b.n	800400e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCC_GetSysClockFreq+0x98>)
 800400a:	613b      	str	r3, [r7, #16]
      break;
 800400c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800400e:	693b      	ldr	r3, [r7, #16]
}
 8004010:	4618      	mov	r0, r3
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40021000 	.word	0x40021000
 8004020:	007a1200 	.word	0x007a1200
 8004024:	08008ac0 	.word	0x08008ac0
 8004028:	08008ad0 	.word	0x08008ad0
 800402c:	003d0900 	.word	0x003d0900

08004030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b02      	ldr	r3, [pc, #8]	; (8004040 <HAL_RCC_GetHCLKFreq+0x10>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	20000000 	.word	0x20000000

08004044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004048:	f7ff fff2 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 800404c:	4602      	mov	r2, r0
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	4903      	ldr	r1, [pc, #12]	; (8004068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800405a:	5ccb      	ldrb	r3, [r1, r3]
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004060:	4618      	mov	r0, r3
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	08008ab8 	.word	0x08008ab8

0800406c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004074:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <RCC_Delay+0x34>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <RCC_Delay+0x38>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0a5b      	lsrs	r3, r3, #9
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004088:	bf00      	nop
  }
  while (Delay --);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1e5a      	subs	r2, r3, #1
 800408e:	60fa      	str	r2, [r7, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f9      	bne.n	8004088 <RCC_Delay+0x1c>
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	20000000 	.word	0x20000000
 80040a4:	10624dd3 	.word	0x10624dd3

080040a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d07d      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c8:	4b4f      	ldr	r3, [pc, #316]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10d      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040de:	61d3      	str	r3, [r2, #28]
 80040e0:	4b49      	ldr	r3, [pc, #292]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ec:	2301      	movs	r3, #1
 80040ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f0:	4b46      	ldr	r3, [pc, #280]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d118      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004106:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004108:	f7fc fc7e 	bl	8000a08 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410e:	e008      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004110:	f7fc fc7a 	bl	8000a08 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e06d      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4b3a      	ldr	r3, [pc, #232]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800412e:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004136:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d02e      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	429a      	cmp	r2, r3
 800414a:	d027      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800414c:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004154:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004156:	4b2e      	ldr	r3, [pc, #184]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415c:	4b2c      	ldr	r3, [pc, #176]	; (8004210 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004162:	4a29      	ldr	r2, [pc, #164]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d014      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004172:	f7fc fc49 	bl	8000a08 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	e00a      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417a:	f7fc fc45 	bl	8000a08 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e036      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ee      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4917      	ldr	r1, [pc, #92]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ae:	7dfb      	ldrb	r3, [r7, #23]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d105      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	4a13      	ldr	r2, [pc, #76]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	490b      	ldr	r1, [pc, #44]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ea:	4b07      	ldr	r3, [pc, #28]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4904      	ldr	r1, [pc, #16]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
 8004210:	42420440 	.word	0x42420440

08004214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004214:	b084      	sub	sp, #16
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	f107 0014 	add.w	r0, r7, #20
 8004222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	b004      	add	sp, #16
 8004232:	4770      	bx	lr

08004234 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004244:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004248:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	bc80      	pop	{r7}
 800425e:	4770      	bx	lr

08004260 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004268:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800426c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	b29b      	uxth	r3, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	b29b      	uxth	r3, r3
 800427e:	4013      	ands	r3, r2
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042ac:	b084      	sub	sp, #16
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	f107 0014 	add.w	r0, r7, #20
 80042ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	b004      	add	sp, #16
 80042ea:	4770      	bx	lr

080042ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b09d      	sub	sp, #116	; 0x74
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	78db      	ldrb	r3, [r3, #3]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d81f      	bhi.n	800435e <USB_ActivateEndpoint+0x72>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <USB_ActivateEndpoint+0x38>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004335 	.word	0x08004335
 8004328:	08004351 	.word	0x08004351
 800432c:	08004367 	.word	0x08004367
 8004330:	08004343 	.word	0x08004343
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004334:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004338:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004340:	e012      	b.n	8004368 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004342:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004346:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800434a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800434e:	e00b      	b.n	8004368 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004350:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004358:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800435c:	e004      	b.n	8004368 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004364:	e000      	b.n	8004368 <USB_ActivateEndpoint+0x7c>
      break;
 8004366:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	441a      	add	r2, r3
 8004372:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004386:	b29b      	uxth	r3, r3
 8004388:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80043bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	7b1b      	ldrb	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 8178 	bne.w	80046ca <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 8084 	beq.w	80044ec <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4413      	add	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	011a      	lsls	r2, r3, #4
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	88db      	ldrh	r3, [r3, #6]
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	b29b      	uxth	r3, r3
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	827b      	strh	r3, [r7, #18]
 8004426:	8a7b      	ldrh	r3, [r7, #18]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <USB_ActivateEndpoint+0x17c>
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004446:	823b      	strh	r3, [r7, #16]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	441a      	add	r2, r3
 8004452:	8a3b      	ldrh	r3, [r7, #16]
 8004454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004460:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004464:	b29b      	uxth	r3, r3
 8004466:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	78db      	ldrb	r3, [r3, #3]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d020      	beq.n	80044b2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29b      	uxth	r3, r3
 800447e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004486:	81bb      	strh	r3, [r7, #12]
 8004488:	89bb      	ldrh	r3, [r7, #12]
 800448a:	f083 0320 	eor.w	r3, r3, #32
 800448e:	81bb      	strh	r3, [r7, #12]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	441a      	add	r2, r3
 800449a:	89bb      	ldrh	r3, [r7, #12]
 800449c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	8013      	strh	r3, [r2, #0]
 80044b0:	e2d5      	b.n	8004a5e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c8:	81fb      	strh	r3, [r7, #14]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	441a      	add	r2, r3
 80044d4:	89fb      	ldrh	r3, [r7, #14]
 80044d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	8013      	strh	r3, [r2, #0]
 80044ea:	e2b8      	b.n	8004a5e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	4413      	add	r3, r2
 80044fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	011a      	lsls	r2, r3, #4
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	4413      	add	r3, r2
 800450a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800450e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	88db      	ldrh	r3, [r3, #6]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	4413      	add	r3, r2
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	4413      	add	r3, r2
 800453e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800454e:	b29a      	uxth	r2, r3
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	801a      	strh	r2, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b3e      	cmp	r3, #62	; 0x3e
 800455a:	d91d      	bls.n	8004598 <USB_ActivateEndpoint+0x2ac>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	095b      	lsrs	r3, r3, #5
 8004562:	66bb      	str	r3, [r7, #104]	; 0x68
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	2b00      	cmp	r3, #0
 800456e:	d102      	bne.n	8004576 <USB_ActivateEndpoint+0x28a>
 8004570:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004572:	3b01      	subs	r3, #1
 8004574:	66bb      	str	r3, [r7, #104]	; 0x68
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29a      	uxth	r2, r3
 800457c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800457e:	b29b      	uxth	r3, r3
 8004580:	029b      	lsls	r3, r3, #10
 8004582:	b29b      	uxth	r3, r3
 8004584:	4313      	orrs	r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004590:	b29a      	uxth	r2, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	e026      	b.n	80045e6 <USB_ActivateEndpoint+0x2fa>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <USB_ActivateEndpoint+0x2ca>
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	e017      	b.n	80045e6 <USB_ActivateEndpoint+0x2fa>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	085b      	lsrs	r3, r3, #1
 80045bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <USB_ActivateEndpoint+0x2e4>
 80045ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045cc:	3301      	adds	r3, #1
 80045ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045d8:	b29b      	uxth	r3, r3
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4313      	orrs	r3, r2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80045f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d01b      	beq.n	8004636 <USB_ActivateEndpoint+0x34a>
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004614:	843b      	strh	r3, [r7, #32]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	441a      	add	r2, r3
 8004620:	8c3b      	ldrh	r3, [r7, #32]
 8004622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800462e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004632:	b29b      	uxth	r3, r3
 8004634:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d124      	bne.n	8004688 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	83bb      	strh	r3, [r7, #28]
 8004656:	8bbb      	ldrh	r3, [r7, #28]
 8004658:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800465c:	83bb      	strh	r3, [r7, #28]
 800465e:	8bbb      	ldrh	r3, [r7, #28]
 8004660:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004664:	83bb      	strh	r3, [r7, #28]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	8bbb      	ldrh	r3, [r7, #28]
 8004672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800467a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004682:	b29b      	uxth	r3, r3
 8004684:	8013      	strh	r3, [r2, #0]
 8004686:	e1ea      	b.n	8004a5e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	83fb      	strh	r3, [r7, #30]
 80046a0:	8bfb      	ldrh	r3, [r7, #30]
 80046a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046a6:	83fb      	strh	r3, [r7, #30]
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	8bfb      	ldrh	r3, [r7, #30]
 80046b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
 80046c8:	e1c9      	b.n	8004a5e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	78db      	ldrb	r3, [r3, #3]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d11e      	bne.n	8004710 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	881b      	ldrh	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	441a      	add	r2, r3
 80046f6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004702:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]
 800470e:	e01d      	b.n	800474c <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29b      	uxth	r3, r3
 800471e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004726:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004748:	b29b      	uxth	r3, r3
 800474a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	4413      	add	r3, r2
 800475e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	011a      	lsls	r2, r3, #4
 8004766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004768:	4413      	add	r3, r2
 800476a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	891b      	ldrh	r3, [r3, #8]
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	b29b      	uxth	r3, r3
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	657b      	str	r3, [r7, #84]	; 0x54
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	4413      	add	r3, r2
 8004792:	657b      	str	r3, [r7, #84]	; 0x54
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	4413      	add	r3, r2
 800479e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047a2:	653b      	str	r3, [r7, #80]	; 0x50
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	895b      	ldrh	r3, [r3, #10]
 80047a8:	085b      	lsrs	r3, r3, #1
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f040 8093 	bne.w	80048e4 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01b      	beq.n	8004812 <USB_ActivateEndpoint+0x526>
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	441a      	add	r2, r3
 80047fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800480a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480e:	b29b      	uxth	r3, r3
 8004810:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004820:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01b      	beq.n	8004862 <USB_ActivateEndpoint+0x576>
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004840:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	441a      	add	r2, r3
 800484c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800484e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800485e:	b29b      	uxth	r3, r3
 8004860:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	873b      	strh	r3, [r7, #56]	; 0x38
 800487a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800487c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004880:	873b      	strh	r3, [r7, #56]	; 0x38
 8004882:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004884:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004888:	873b      	strh	r3, [r7, #56]	; 0x38
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	441a      	add	r2, r3
 80048cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048de:	b29b      	uxth	r3, r3
 80048e0:	8013      	strh	r3, [r2, #0]
 80048e2:	e0bc      	b.n	8004a5e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80048f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01d      	beq.n	800493c <USB_ActivateEndpoint+0x650>
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004916:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004938:	b29b      	uxth	r3, r3
 800493a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800494c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01d      	beq.n	8004994 <USB_ActivateEndpoint+0x6a8>
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800498c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004990:	b29b      	uxth	r3, r3
 8004992:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	78db      	ldrb	r3, [r3, #3]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d024      	beq.n	80049e6 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049ba:	f083 0320 	eor.w	r3, r3, #32
 80049be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80049d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	8013      	strh	r3, [r2, #0]
 80049e4:	e01d      	b.n	8004a22 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004a5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3774      	adds	r7, #116	; 0x74
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b08d      	sub	sp, #52	; 0x34
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	7b1b      	ldrb	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 808e 	bne.w	8004b9c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d044      	beq.n	8004b12 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	81bb      	strh	r3, [r7, #12]
 8004a96:	89bb      	ldrh	r3, [r7, #12]
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01b      	beq.n	8004ad8 <USB_DeactivateEndpoint+0x6c>
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	817b      	strh	r3, [r7, #10]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	897b      	ldrh	r3, [r7, #10]
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	813b      	strh	r3, [r7, #8]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	893b      	ldrh	r3, [r7, #8]
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]
 8004b10:	e192      	b.n	8004e38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	827b      	strh	r3, [r7, #18]
 8004b20:	8a7b      	ldrh	r3, [r7, #18]
 8004b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01b      	beq.n	8004b62 <USB_DeactivateEndpoint+0xf6>
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b40:	823b      	strh	r3, [r7, #16]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	441a      	add	r2, r3
 8004b4c:	8a3b      	ldrh	r3, [r7, #16]
 8004b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b78:	81fb      	strh	r3, [r7, #14]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	89fb      	ldrh	r3, [r7, #14]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
 8004b9a:	e14d      	b.n	8004e38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 80a5 	bne.w	8004cf0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	843b      	strh	r3, [r7, #32]
 8004bb4:	8c3b      	ldrh	r3, [r7, #32]
 8004bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01b      	beq.n	8004bf6 <USB_DeactivateEndpoint+0x18a>
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd4:	83fb      	strh	r3, [r7, #30]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	8bfb      	ldrh	r3, [r7, #30]
 8004be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	83bb      	strh	r3, [r7, #28]
 8004c04:	8bbb      	ldrh	r3, [r7, #28]
 8004c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d01b      	beq.n	8004c46 <USB_DeactivateEndpoint+0x1da>
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	837b      	strh	r3, [r7, #26]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	8b7b      	ldrh	r3, [r7, #26]
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	833b      	strh	r3, [r7, #24]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	8b3b      	ldrh	r3, [r7, #24]
 8004c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	82fb      	strh	r3, [r7, #22]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	441a      	add	r2, r3
 8004ca0:	8afb      	ldrh	r3, [r7, #22]
 8004ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	82bb      	strh	r3, [r7, #20]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	441a      	add	r2, r3
 8004cd8:	8abb      	ldrh	r3, [r7, #20]
 8004cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	8013      	strh	r3, [r2, #0]
 8004cee:	e0a3      	b.n	8004e38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	881b      	ldrh	r3, [r3, #0]
 8004cfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004cfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <USB_DeactivateEndpoint+0x2d4>
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <USB_DeactivateEndpoint+0x324>
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	441a      	add	r2, r3
 8004db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	441a      	add	r2, r3
 8004dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	441a      	add	r2, r3
 8004e22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3734      	adds	r7, #52	; 0x34
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b0c2      	sub	sp, #264	; 0x108
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e52:	6018      	str	r0, [r3, #0]
 8004e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e5c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	f040 86b7 	bne.w	8005bde <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d908      	bls.n	8004e9e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004e9c:	e007      	b.n	8004eae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	7b1b      	ldrb	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d13a      	bne.n	8004f34 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6959      	ldr	r1, [r3, #20]
 8004eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	88da      	ldrh	r2, [r3, #6]
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ee0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ee4:	6800      	ldr	r0, [r0, #0]
 8004ee6:	f001 fc9c 	bl	8006822 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	461a      	mov	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	011a      	lsls	r2, r3, #4
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	f000 be1f 	b.w	8005b72 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	78db      	ldrb	r3, [r3, #3]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	f040 8462 	bne.w	800580a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f240 83df 	bls.w	8005722 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fd0:	1ad2      	subs	r2, r2, r3
 8004fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 81c7 	beq.w	8005394 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	633b      	str	r3, [r7, #48]	; 0x30
 8005012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	785b      	ldrb	r3, [r3, #1]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d177      	bne.n	8005112 <USB_EPStartXfer+0x2ce>
 8005022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
 800502e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005032:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503c:	b29b      	uxth	r3, r3
 800503e:	461a      	mov	r2, r3
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	4413      	add	r3, r2
 8005044:	62bb      	str	r3, [r7, #40]	; 0x28
 8005046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800504a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	011a      	lsls	r2, r3, #4
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	4413      	add	r3, r2
 8005058:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005068:	b29a      	uxth	r2, r3
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005072:	2b3e      	cmp	r3, #62	; 0x3e
 8005074:	d921      	bls.n	80050ba <USB_EPStartXfer+0x276>
 8005076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <USB_EPStartXfer+0x252>
 800508c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005090:	3b01      	subs	r3, #1
 8005092:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	881b      	ldrh	r3, [r3, #0]
 800509a:	b29a      	uxth	r2, r3
 800509c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	029b      	lsls	r3, r3, #10
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	4313      	orrs	r3, r2
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e050      	b.n	800515c <USB_EPStartXfer+0x318>
 80050ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <USB_EPStartXfer+0x294>
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	801a      	strh	r2, [r3, #0]
 80050d6:	e041      	b.n	800515c <USB_EPStartXfer+0x318>
 80050d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <USB_EPStartXfer+0x2b4>
 80050ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050f2:	3301      	adds	r3, #1
 80050f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005102:	b29b      	uxth	r3, r3
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	b29b      	uxth	r3, r3
 8005108:	4313      	orrs	r3, r2
 800510a:	b29a      	uxth	r2, r3
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e024      	b.n	800515c <USB_EPStartXfer+0x318>
 8005112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	785b      	ldrb	r3, [r3, #1]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d11c      	bne.n	800515c <USB_EPStartXfer+0x318>
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	4413      	add	r3, r2
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	011a      	lsls	r2, r3, #4
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	4413      	add	r3, r2
 800514c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005156:	b29a      	uxth	r2, r3
 8005158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800515c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	895b      	ldrh	r3, [r3, #10]
 8005168:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6959      	ldr	r1, [r3, #20]
 8005178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800517c:	b29b      	uxth	r3, r3
 800517e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005182:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005186:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	f001 fb49 	bl	8006822 <USB_WritePMA>
            ep->xfer_buff += len;
 8005190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051a0:	441a      	add	r2, r3
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d90f      	bls.n	80051ea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80051ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a1a      	ldr	r2, [r3, #32]
 80051d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	621a      	str	r2, [r3, #32]
 80051e8:	e00e      	b.n	8005208 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d177      	bne.n	8005308 <USB_EPStartXfer+0x4c4>
 8005218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4413      	add	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	4413      	add	r3, r2
 800524e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525e:	b29a      	uxth	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005268:	2b3e      	cmp	r3, #62	; 0x3e
 800526a:	d921      	bls.n	80052b0 <USB_EPStartXfer+0x46c>
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005270:	095b      	lsrs	r3, r3, #5
 8005272:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	2b00      	cmp	r3, #0
 8005280:	d104      	bne.n	800528c <USB_EPStartXfer+0x448>
 8005282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005286:	3b01      	subs	r3, #1
 8005288:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	b29b      	uxth	r3, r3
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29b      	uxth	r3, r3
 800529c:	4313      	orrs	r3, r2
 800529e:	b29b      	uxth	r3, r3
 80052a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e056      	b.n	800535e <USB_EPStartXfer+0x51a>
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <USB_EPStartXfer+0x48a>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	e047      	b.n	800535e <USB_EPStartXfer+0x51a>
 80052ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <USB_EPStartXfer+0x4aa>
 80052e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052e8:	3301      	adds	r3, #1
 80052ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	029b      	lsls	r3, r3, #10
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4313      	orrs	r3, r2
 8005300:	b29a      	uxth	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e02a      	b.n	800535e <USB_EPStartXfer+0x51a>
 8005308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	785b      	ldrb	r3, [r3, #1]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d122      	bne.n	800535e <USB_EPStartXfer+0x51a>
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	623b      	str	r3, [r7, #32]
 8005324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005332:	b29b      	uxth	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	4413      	add	r3, r2
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	011a      	lsls	r2, r3, #4
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	4413      	add	r3, r2
 800534e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005358:	b29a      	uxth	r2, r3
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800535e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	891b      	ldrh	r3, [r3, #8]
 800536a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800536e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6959      	ldr	r1, [r3, #20]
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537e:	b29b      	uxth	r3, r3
 8005380:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005384:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005388:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800538c:	6800      	ldr	r0, [r0, #0]
 800538e:	f001 fa48 	bl	8006822 <USB_WritePMA>
 8005392:	e3ee      	b.n	8005b72 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d177      	bne.n	8005494 <USB_EPStartXfer+0x650>
 80053a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c4:	4413      	add	r3, r2
 80053c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	011a      	lsls	r2, r3, #4
 80053d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d8:	4413      	add	r3, r2
 80053da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053de:	647b      	str	r3, [r7, #68]	; 0x44
 80053e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e2:	881b      	ldrh	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f4:	2b3e      	cmp	r3, #62	; 0x3e
 80053f6:	d921      	bls.n	800543c <USB_EPStartXfer+0x5f8>
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053fc:	095b      	lsrs	r3, r3, #5
 80053fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	f003 031f 	and.w	r3, r3, #31
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <USB_EPStartXfer+0x5d4>
 800540e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005412:	3b01      	subs	r3, #1
 8005414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005422:	b29b      	uxth	r3, r3
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	b29b      	uxth	r3, r3
 8005428:	4313      	orrs	r3, r2
 800542a:	b29b      	uxth	r3, r3
 800542c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005434:	b29a      	uxth	r2, r3
 8005436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e056      	b.n	80054ea <USB_EPStartXfer+0x6a6>
 800543c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <USB_EPStartXfer+0x616>
 8005444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29b      	uxth	r3, r3
 800544a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005452:	b29a      	uxth	r2, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e047      	b.n	80054ea <USB_EPStartXfer+0x6a6>
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <USB_EPStartXfer+0x636>
 8005470:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005474:	3301      	adds	r3, #1
 8005476:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800547a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29a      	uxth	r2, r3
 8005480:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005484:	b29b      	uxth	r3, r3
 8005486:	029b      	lsls	r3, r3, #10
 8005488:	b29b      	uxth	r3, r3
 800548a:	4313      	orrs	r3, r2
 800548c:	b29a      	uxth	r2, r3
 800548e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	e02a      	b.n	80054ea <USB_EPStartXfer+0x6a6>
 8005494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d122      	bne.n	80054ea <USB_EPStartXfer+0x6a6>
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	653b      	str	r3, [r7, #80]	; 0x50
 80054b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c4:	4413      	add	r3, r2
 80054c6:	653b      	str	r3, [r7, #80]	; 0x50
 80054c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	011a      	lsls	r2, r3, #4
 80054d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d8:	4413      	add	r3, r2
 80054da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	891b      	ldrh	r3, [r3, #8]
 80054f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6959      	ldr	r1, [r3, #20]
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550a:	b29b      	uxth	r3, r3
 800550c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005510:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005514:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005518:	6800      	ldr	r0, [r0, #0]
 800551a:	f001 f982 	bl	8006822 <USB_WritePMA>
            ep->xfer_buff += len;
 800551e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800552e:	441a      	add	r2, r3
 8005530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800553c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a1a      	ldr	r2, [r3, #32]
 8005548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d90f      	bls.n	8005578 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005568:	1ad2      	subs	r2, r2, r3
 800556a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	621a      	str	r2, [r3, #32]
 8005576:	e00e      	b.n	8005596 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2200      	movs	r2, #0
 8005594:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	785b      	ldrb	r3, [r3, #1]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d177      	bne.n	80056a2 <USB_EPStartXfer+0x85e>
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80055be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d2:	4413      	add	r3, r2
 80055d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	011a      	lsls	r2, r3, #4
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	4413      	add	r3, r2
 80055e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005602:	2b3e      	cmp	r3, #62	; 0x3e
 8005604:	d921      	bls.n	800564a <USB_EPStartXfer+0x806>
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2b00      	cmp	r3, #0
 800561a:	d104      	bne.n	8005626 <USB_EPStartXfer+0x7e2>
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005620:	3b01      	subs	r3, #1
 8005622:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	b29a      	uxth	r2, r3
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005630:	b29b      	uxth	r3, r3
 8005632:	029b      	lsls	r3, r3, #10
 8005634:	b29b      	uxth	r3, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005642:	b29a      	uxth	r2, r3
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e050      	b.n	80056ec <USB_EPStartXfer+0x8a8>
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <USB_EPStartXfer+0x824>
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29a      	uxth	r2, r3
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e041      	b.n	80056ec <USB_EPStartXfer+0x8a8>
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <USB_EPStartXfer+0x844>
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	3301      	adds	r3, #1
 8005684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29a      	uxth	r2, r3
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	b29b      	uxth	r3, r3
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	b29b      	uxth	r3, r3
 8005698:	4313      	orrs	r3, r2
 800569a:	b29a      	uxth	r2, r3
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	e024      	b.n	80056ec <USB_EPStartXfer+0x8a8>
 80056a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d11c      	bne.n	80056ec <USB_EPStartXfer+0x8a8>
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c6:	4413      	add	r3, r2
 80056c8:	643b      	str	r3, [r7, #64]	; 0x40
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	011a      	lsls	r2, r3, #4
 80056d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056da:	4413      	add	r3, r2
 80056dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	895b      	ldrh	r3, [r3, #10]
 80056f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6959      	ldr	r1, [r3, #20]
 8005708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570c:	b29b      	uxth	r3, r3
 800570e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005712:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005716:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	f001 f881 	bl	8006822 <USB_WritePMA>
 8005720:	e227      	b.n	8005b72 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	881b      	ldrh	r3, [r3, #0]
 800574e:	b29b      	uxth	r3, r3
 8005750:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005758:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800575c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800577a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800577e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800578a:	b29b      	uxth	r3, r3
 800578c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800579a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	461a      	mov	r2, r3
 80057ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ae:	4413      	add	r3, r2
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	011a      	lsls	r2, r3, #4
 80057c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057c2:	4413      	add	r3, r2
 80057c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	891b      	ldrh	r3, [r3, #8]
 80057e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6959      	ldr	r1, [r3, #20]
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005802:	6800      	ldr	r0, [r0, #0]
 8005804:	f001 f80d 	bl	8006822 <USB_WritePMA>
 8005808:	e1b3      	b.n	8005b72 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800580a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a1a      	ldr	r2, [r3, #32]
 8005816:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80c6 	beq.w	80059dc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	673b      	str	r3, [r7, #112]	; 0x70
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d177      	bne.n	800595c <USB_EPStartXfer+0xb18>
 800586c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	66bb      	str	r3, [r7, #104]	; 0x68
 8005878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800588c:	4413      	add	r3, r2
 800588e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011a      	lsls	r2, r3, #4
 800589e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058a6:	667b      	str	r3, [r7, #100]	; 0x64
 80058a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058bc:	2b3e      	cmp	r3, #62	; 0x3e
 80058be:	d921      	bls.n	8005904 <USB_EPStartXfer+0xac0>
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <USB_EPStartXfer+0xa9c>
 80058d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058da:	3b01      	subs	r3, #1
 80058dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	029b      	lsls	r3, r3, #10
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e050      	b.n	80059a6 <USB_EPStartXfer+0xb62>
 8005904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <USB_EPStartXfer+0xade>
 800590c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591a:	b29a      	uxth	r2, r3
 800591c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e041      	b.n	80059a6 <USB_EPStartXfer+0xb62>
 8005922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <USB_EPStartXfer+0xafe>
 8005938:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800593c:	3301      	adds	r3, #1
 800593e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005942:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	b29a      	uxth	r2, r3
 8005948:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800594c:	b29b      	uxth	r3, r3
 800594e:	029b      	lsls	r3, r3, #10
 8005950:	b29b      	uxth	r3, r3
 8005952:	4313      	orrs	r3, r2
 8005954:	b29a      	uxth	r2, r3
 8005956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	e024      	b.n	80059a6 <USB_EPStartXfer+0xb62>
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d11c      	bne.n	80059a6 <USB_EPStartXfer+0xb62>
 800596c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005980:	4413      	add	r3, r2
 8005982:	673b      	str	r3, [r7, #112]	; 0x70
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	011a      	lsls	r2, r3, #4
 8005992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005994:	4413      	add	r3, r2
 8005996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800599a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800599c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80059a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	895b      	ldrh	r3, [r3, #10]
 80059b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6959      	ldr	r1, [r3, #20]
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059d4:	6800      	ldr	r0, [r0, #0]
 80059d6:	f000 ff24 	bl	8006822 <USB_WritePMA>
 80059da:	e0ca      	b.n	8005b72 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d177      	bne.n	8005adc <USB_EPStartXfer+0xc98>
 80059ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80059f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a0c:	4413      	add	r3, r2
 8005a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	011a      	lsls	r2, r3, #4
 8005a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a20:	4413      	add	r3, r2
 8005a22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a26:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a3e:	d921      	bls.n	8005a84 <USB_EPStartXfer+0xc40>
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	095b      	lsrs	r3, r3, #5
 8005a46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <USB_EPStartXfer+0xc1c>
 8005a56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	4313      	orrs	r3, r2
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a80:	801a      	strh	r2, [r3, #0]
 8005a82:	e05c      	b.n	8005b3e <USB_EPStartXfer+0xcfa>
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <USB_EPStartXfer+0xc5e>
 8005a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	e04d      	b.n	8005b3e <USB_EPStartXfer+0xcfa>
 8005aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa6:	085b      	lsrs	r3, r3, #1
 8005aa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d004      	beq.n	8005ac2 <USB_EPStartXfer+0xc7e>
 8005ab8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005abc:	3301      	adds	r3, #1
 8005abe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e030      	b.n	8005b3e <USB_EPStartXfer+0xcfa>
 8005adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d128      	bne.n	8005b3e <USB_EPStartXfer+0xcfa>
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b10:	4413      	add	r3, r2
 8005b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	011a      	lsls	r2, r3, #4
 8005b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	891b      	ldrh	r3, [r3, #8]
 8005b4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6959      	ldr	r1, [r3, #20]
 8005b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b6c:	6800      	ldr	r0, [r0, #0]
 8005b6e:	f000 fe58 	bl	8006822 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	897b      	ldrh	r3, [r7, #10]
 8005b9c:	f083 0310 	eor.w	r3, r3, #16
 8005ba0:	817b      	strh	r3, [r7, #10]
 8005ba2:	897b      	ldrh	r3, [r7, #10]
 8005ba4:	f083 0320 	eor.w	r3, r3, #32
 8005ba8:	817b      	strh	r3, [r7, #10]
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	897b      	ldrh	r3, [r7, #10]
 8005bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	8013      	strh	r3, [r2, #0]
 8005bda:	f000 bcde 	b.w	800659a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	7b1b      	ldrb	r3, [r3, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f040 80bb 	bne.w	8005d66 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d917      	bls.n	8005c3c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	e00e      	b.n	8005c5a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005c4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c7e:	4413      	add	r3, r2
 8005c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	011a      	lsls	r2, r3, #4
 8005c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c96:	4413      	add	r3, r2
 8005c98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cba:	d924      	bls.n	8005d06 <USB_EPStartXfer+0xec2>
 8005cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d104      	bne.n	8005cdc <USB_EPStartXfer+0xe98>
 8005cd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	029b      	lsls	r3, r3, #10
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d00:	801a      	strh	r2, [r3, #0]
 8005d02:	f000 bc10 	b.w	8006526 <USB_EPStartXfer+0x16e2>
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10c      	bne.n	8005d28 <USB_EPStartXfer+0xee4>
 8005d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e3fe      	b.n	8006526 <USB_EPStartXfer+0x16e2>
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	085b      	lsrs	r3, r3, #1
 8005d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <USB_EPStartXfer+0xf04>
 8005d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d42:	3301      	adds	r3, #1
 8005d44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e3df      	b.n	8006526 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	78db      	ldrb	r3, [r3, #3]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	f040 8218 	bne.w	80061a8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f040 809d 	bne.w	8005ec4 <USB_EPStartXfer+0x1080>
 8005d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dae:	4413      	add	r3, r2
 8005db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	011a      	lsls	r2, r3, #4
 8005dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b3e      	cmp	r3, #62	; 0x3e
 8005df2:	d92b      	bls.n	8005e4c <USB_EPStartXfer+0x1008>
 8005df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <USB_EPStartXfer+0xfe0>
 8005e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	029b      	lsls	r3, r3, #10
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e48:	801a      	strh	r2, [r3, #0]
 8005e4a:	e070      	b.n	8005f2e <USB_EPStartXfer+0x10ea>
 8005e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10c      	bne.n	8005e76 <USB_EPStartXfer+0x1032>
 8005e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e05b      	b.n	8005f2e <USB_EPStartXfer+0x10ea>
 8005e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <USB_EPStartXfer+0x1062>
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	029b      	lsls	r3, r3, #10
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e034      	b.n	8005f2e <USB_EPStartXfer+0x10ea>
 8005ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d12c      	bne.n	8005f2e <USB_EPStartXfer+0x10ea>
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ef8:	4413      	add	r3, r2
 8005efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	011a      	lsls	r2, r3, #4
 8005f0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f10:	4413      	add	r3, r2
 8005f12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	785b      	ldrb	r3, [r3, #1]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 809d 	bne.w	8006088 <USB_EPStartXfer+0x1244>
 8005f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f72:	4413      	add	r3, r2
 8005f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	011a      	lsls	r2, r3, #4
 8005f86:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fb6:	d92b      	bls.n	8006010 <USB_EPStartXfer+0x11cc>
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d104      	bne.n	8005fe8 <USB_EPStartXfer+0x11a4>
 8005fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	029b      	lsls	r3, r3, #10
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006006:	b29a      	uxth	r2, r3
 8006008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800600c:	801a      	strh	r2, [r3, #0]
 800600e:	e069      	b.n	80060e4 <USB_EPStartXfer+0x12a0>
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10c      	bne.n	800603a <USB_EPStartXfer+0x11f6>
 8006020:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006030:	b29a      	uxth	r2, r3
 8006032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e054      	b.n	80060e4 <USB_EPStartXfer+0x12a0>
 800603a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <USB_EPStartXfer+0x1226>
 8006060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800606a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	b29a      	uxth	r2, r3
 8006072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006076:	b29b      	uxth	r3, r3
 8006078:	029b      	lsls	r3, r3, #10
 800607a:	b29b      	uxth	r3, r3
 800607c:	4313      	orrs	r3, r2
 800607e:	b29a      	uxth	r2, r3
 8006080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e02d      	b.n	80060e4 <USB_EPStartXfer+0x12a0>
 8006088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d125      	bne.n	80060e4 <USB_EPStartXfer+0x12a0>
 8006098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	461a      	mov	r2, r3
 80060aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060ae:	4413      	add	r3, r2
 80060b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	011a      	lsls	r2, r3, #4
 80060c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060c6:	4413      	add	r3, r2
 80060c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060e2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8218 	beq.w	8006526 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80060f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006116:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800611a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <USB_EPStartXfer+0x12ea>
 8006122:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800612e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006136:	2b00      	cmp	r3, #0
 8006138:	f040 81f5 	bne.w	8006526 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800613c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	f040 81ee 	bne.w	8006526 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800614a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006170:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006178:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	441a      	add	r2, r3
 800618e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006192:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006196:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800619e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]
 80061a6:	e1be      	b.n	8006526 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	78db      	ldrb	r3, [r3, #3]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 81b4 	bne.w	8006522 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80061ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d917      	bls.n	8006206 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80061d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80061e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	619a      	str	r2, [r3, #24]
 8006204:	e00e      	b.n	8006224 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800621a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2200      	movs	r2, #0
 8006222:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 8085 	bne.w	8006340 <USB_EPStartXfer+0x14fc>
 8006236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800623a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006252:	b29b      	uxth	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800625a:	4413      	add	r3, r2
 800625c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	011a      	lsls	r2, r3, #4
 800626e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006272:	4413      	add	r3, r2
 8006274:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800627c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006294:	2b3e      	cmp	r3, #62	; 0x3e
 8006296:	d923      	bls.n	80062e0 <USB_EPStartXfer+0x149c>
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d104      	bne.n	80062b8 <USB_EPStartXfer+0x1474>
 80062ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062b2:	3b01      	subs	r3, #1
 80062b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29a      	uxth	r2, r3
 80062c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	4313      	orrs	r3, r2
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e060      	b.n	80063a2 <USB_EPStartXfer+0x155e>
 80062e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10c      	bne.n	8006302 <USB_EPStartXfer+0x14be>
 80062e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	e04f      	b.n	80063a2 <USB_EPStartXfer+0x155e>
 8006302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <USB_EPStartXfer+0x14de>
 8006318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800631c:	3301      	adds	r3, #1
 800631e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	b29a      	uxth	r2, r3
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632e:	b29b      	uxth	r3, r3
 8006330:	029b      	lsls	r3, r3, #10
 8006332:	b29b      	uxth	r3, r3
 8006334:	4313      	orrs	r3, r2
 8006336:	b29a      	uxth	r2, r3
 8006338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e030      	b.n	80063a2 <USB_EPStartXfer+0x155e>
 8006340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d128      	bne.n	80063a2 <USB_EPStartXfer+0x155e>
 8006350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800635e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006374:	4413      	add	r3, r2
 8006376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800637a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	011a      	lsls	r2, r3, #4
 8006388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800638c:	4413      	add	r3, r2
 800638e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 8085 	bne.w	80064cc <USB_EPStartXfer+0x1688>
 80063c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063de:	b29b      	uxth	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063e6:	4413      	add	r3, r2
 80063e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	011a      	lsls	r2, r3, #4
 80063fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063fe:	4413      	add	r3, r2
 8006400:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006408:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800640c:	881b      	ldrh	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 8006410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006414:	b29a      	uxth	r2, r3
 8006416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800641a:	801a      	strh	r2, [r3, #0]
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006420:	2b3e      	cmp	r3, #62	; 0x3e
 8006422:	d923      	bls.n	800646c <USB_EPStartXfer+0x1628>
 8006424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006432:	f003 031f 	and.w	r3, r3, #31
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <USB_EPStartXfer+0x1600>
 800643a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800643e:	3b01      	subs	r3, #1
 8006440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006450:	b29b      	uxth	r3, r3
 8006452:	029b      	lsls	r3, r3, #10
 8006454:	b29b      	uxth	r3, r3
 8006456:	4313      	orrs	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	e05c      	b.n	8006526 <USB_EPStartXfer+0x16e2>
 800646c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10c      	bne.n	800648e <USB_EPStartXfer+0x164a>
 8006474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006484:	b29a      	uxth	r2, r3
 8006486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800648a:	801a      	strh	r2, [r3, #0]
 800648c:	e04b      	b.n	8006526 <USB_EPStartXfer+0x16e2>
 800648e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006498:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <USB_EPStartXfer+0x166a>
 80064a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a8:	3301      	adds	r3, #1
 80064aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	029b      	lsls	r3, r3, #10
 80064be:	b29b      	uxth	r3, r3
 80064c0:	4313      	orrs	r3, r2
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e02c      	b.n	8006526 <USB_EPStartXfer+0x16e2>
 80064cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d124      	bne.n	8006526 <USB_EPStartXfer+0x16e2>
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064f2:	4413      	add	r3, r2
 80064f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	011a      	lsls	r2, r3, #4
 8006506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800650a:	4413      	add	r3, r2
 800650c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006518:	b29a      	uxth	r2, r3
 800651a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e001      	b.n	8006526 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e03a      	b.n	800659c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006550:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006554:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006558:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800655c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006560:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006564:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	441a      	add	r2, r3
 8006582:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006586:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800658a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800658e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006596:	b29b      	uxth	r3, r3
 8006598:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785b      	ldrb	r3, [r3, #1]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d020      	beq.n	80065fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ce:	81bb      	strh	r3, [r7, #12]
 80065d0:	89bb      	ldrh	r3, [r7, #12]
 80065d2:	f083 0310 	eor.w	r3, r3, #16
 80065d6:	81bb      	strh	r3, [r7, #12]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	89bb      	ldrh	r3, [r7, #12]
 80065e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	8013      	strh	r3, [r2, #0]
 80065f8:	e01f      	b.n	800663a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006610:	81fb      	strh	r3, [r7, #14]
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006618:	81fb      	strh	r3, [r7, #14]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	89fb      	ldrh	r3, [r7, #14]
 8006626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800662a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006636:	b29b      	uxth	r3, r3
 8006638:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006646:	b480      	push	{r7}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	7b1b      	ldrb	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	f040 809d 	bne.w	8006794 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d04c      	beq.n	80066fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	823b      	strh	r3, [r7, #16]
 8006670:	8a3b      	ldrh	r3, [r7, #16]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01b      	beq.n	80066b2 <USB_EPClearStall+0x6c>
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006690:	81fb      	strh	r3, [r7, #14]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	441a      	add	r2, r3
 800669c:	89fb      	ldrh	r3, [r7, #14]
 800669e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d06c      	beq.n	8006794 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d0:	81bb      	strh	r3, [r7, #12]
 80066d2:	89bb      	ldrh	r3, [r7, #12]
 80066d4:	f083 0320 	eor.w	r3, r3, #32
 80066d8:	81bb      	strh	r3, [r7, #12]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	89bb      	ldrh	r3, [r7, #12]
 80066e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]
 80066fa:	e04b      	b.n	8006794 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	82fb      	strh	r3, [r7, #22]
 800670a:	8afb      	ldrh	r3, [r7, #22]
 800670c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01b      	beq.n	800674c <USB_EPClearStall+0x106>
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	881b      	ldrh	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672a:	82bb      	strh	r3, [r7, #20]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	441a      	add	r2, r3
 8006736:	8abb      	ldrh	r3, [r7, #20]
 8006738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	b29b      	uxth	r3, r3
 800674a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	827b      	strh	r3, [r7, #18]
 8006764:	8a7b      	ldrh	r3, [r7, #18]
 8006766:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800676a:	827b      	strh	r3, [r7, #18]
 800676c:	8a7b      	ldrh	r3, [r7, #18]
 800676e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006772:	827b      	strh	r3, [r7, #18]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	441a      	add	r2, r3
 800677e:	8a7b      	ldrh	r3, [r7, #18]
 8006780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006790:	b29b      	uxth	r3, r3
 8006792:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	371c      	adds	r7, #28
 800679a:	46bd      	mov	sp, r7
 800679c:	bc80      	pop	{r7}
 800679e:	4770      	bx	lr

080067a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d103      	bne.n	80067ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr

080067c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr

080067da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr

080067ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006800:	68fb      	ldr	r3, [r7, #12]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006822:	b480      	push	{r7}
 8006824:	b08b      	sub	sp, #44	; 0x2c
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	4611      	mov	r1, r2
 800682e:	461a      	mov	r2, r3
 8006830:	460b      	mov	r3, r1
 8006832:	80fb      	strh	r3, [r7, #6]
 8006834:	4613      	mov	r3, r2
 8006836:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006838:	88bb      	ldrh	r3, [r7, #4]
 800683a:	3301      	adds	r3, #1
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006848:	88fb      	ldrh	r3, [r7, #6]
 800684a:	005a      	lsls	r2, r3, #1
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006854:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	e01e      	b.n	800689a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	b21a      	sxth	r2, r3
 800686c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006870:	4313      	orrs	r3, r2
 8006872:	b21b      	sxth	r3, r3
 8006874:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	8a7a      	ldrh	r2, [r7, #18]
 800687a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	3302      	adds	r3, #2
 8006880:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	3302      	adds	r3, #2
 8006886:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3301      	adds	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	3b01      	subs	r3, #1
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1dd      	bne.n	800685c <USB_WritePMA+0x3a>
  }
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	372c      	adds	r7, #44	; 0x2c
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b08b      	sub	sp, #44	; 0x2c
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4611      	mov	r1, r2
 80068b8:	461a      	mov	r2, r3
 80068ba:	460b      	mov	r3, r1
 80068bc:	80fb      	strh	r3, [r7, #6]
 80068be:	4613      	mov	r3, r2
 80068c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80068c2:	88bb      	ldrh	r3, [r7, #4]
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	005a      	lsls	r2, r3, #1
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
 80068e4:	e01b      	b.n	800691e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	3302      	adds	r3, #2
 80068f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	0a1b      	lsrs	r3, r3, #8
 8006906:	b2da      	uxtb	r2, r3
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	3302      	adds	r3, #2
 8006916:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691a:	3b01      	subs	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1e0      	bne.n	80068e6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006924:	88bb      	ldrh	r3, [r7, #4]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	701a      	strb	r2, [r3, #0]
  }
}
 8006940:	bf00      	nop
 8006942:	372c      	adds	r7, #44	; 0x2c
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr

0800694a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	7c1b      	ldrb	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d115      	bne.n	800698e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006962:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006966:	2202      	movs	r2, #2
 8006968:	2181      	movs	r1, #129	; 0x81
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 fea1 	bl	80086b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800697a:	2202      	movs	r2, #2
 800697c:	2101      	movs	r1, #1
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 fe97 	bl	80086b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800698c:	e012      	b.n	80069b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800698e:	2340      	movs	r3, #64	; 0x40
 8006990:	2202      	movs	r2, #2
 8006992:	2181      	movs	r1, #129	; 0x81
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fe8c 	bl	80086b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	2202      	movs	r2, #2
 80069a4:	2101      	movs	r1, #1
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fe83 	bl	80086b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069b4:	2308      	movs	r3, #8
 80069b6:	2203      	movs	r2, #3
 80069b8:	2182      	movs	r1, #130	; 0x82
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fe79 	bl	80086b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80069c6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80069ca:	f001 ff99 	bl	8008900 <USBD_static_malloc>
 80069ce:	4602      	mov	r2, r0
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
 80069e4:	e026      	b.n	8006a34 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7c1b      	ldrb	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 ff39 	bl	8008894 <USBD_LL_PrepareReceive>
 8006a22:	e007      	b.n	8006a34 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a2a:	2340      	movs	r3, #64	; 0x40
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 ff30 	bl	8008894 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006a4e:	2181      	movs	r1, #129	; 0x81
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fe54 	bl	80086fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f001 fe4d 	bl	80086fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006a6c:	2182      	movs	r1, #130	; 0x82
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 fe45 	bl	80086fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00e      	beq.n	8006aa2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 ff3f 	bl	8008918 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d039      	beq.n	8006b4a <USBD_CDC_Setup+0x9e>
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d17f      	bne.n	8006bda <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	88db      	ldrh	r3, [r3, #6]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d029      	beq.n	8006b36 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	da11      	bge.n	8006b10 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006af8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	88d2      	ldrh	r2, [r2, #6]
 8006afe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b00:	6939      	ldr	r1, [r7, #16]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	88db      	ldrh	r3, [r3, #6]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fa0a 	bl	8007f22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006b0e:	e06b      	b.n	8006be8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	785a      	ldrb	r2, [r3, #1]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006b26:	6939      	ldr	r1, [r7, #16]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	88db      	ldrh	r3, [r3, #6]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fa25 	bl	8007f7e <USBD_CtlPrepareRx>
      break;
 8006b34:	e058      	b.n	8006be8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	7850      	ldrb	r0, [r2, #1]
 8006b42:	2200      	movs	r2, #0
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	4798      	blx	r3
      break;
 8006b48:	e04e      	b.n	8006be8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b0b      	cmp	r3, #11
 8006b50:	d02e      	beq.n	8006bb0 <USBD_CDC_Setup+0x104>
 8006b52:	2b0b      	cmp	r3, #11
 8006b54:	dc38      	bgt.n	8006bc8 <USBD_CDC_Setup+0x11c>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <USBD_CDC_Setup+0xb4>
 8006b5a:	2b0a      	cmp	r3, #10
 8006b5c:	d014      	beq.n	8006b88 <USBD_CDC_Setup+0xdc>
 8006b5e:	e033      	b.n	8006bc8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d107      	bne.n	8006b7a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b6a:	f107 030c 	add.w	r3, r7, #12
 8006b6e:	2202      	movs	r2, #2
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f9d5 	bl	8007f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b78:	e02e      	b.n	8006bd8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f966 	bl	8007e4e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	75fb      	strb	r3, [r7, #23]
          break;
 8006b86:	e027      	b.n	8006bd8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d107      	bne.n	8006ba2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b92:	f107 030f 	add.w	r3, r7, #15
 8006b96:	2201      	movs	r2, #1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 f9c1 	bl	8007f22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ba0:	e01a      	b.n	8006bd8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 f952 	bl	8007e4e <USBD_CtlError>
            ret = USBD_FAIL;
 8006baa:	2302      	movs	r3, #2
 8006bac:	75fb      	strb	r3, [r7, #23]
          break;
 8006bae:	e013      	b.n	8006bd8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d00d      	beq.n	8006bd6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f946 	bl	8007e4e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006bc6:	e006      	b.n	8006bd6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 f93f 	bl	8007e4e <USBD_CtlError>
          ret = USBD_FAIL;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	75fb      	strb	r3, [r7, #23]
          break;
 8006bd4:	e000      	b.n	8006bd8 <USBD_CDC_Setup+0x12c>
          break;
 8006bd6:	bf00      	nop
      }
      break;
 8006bd8:	e006      	b.n	8006be8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f936 	bl	8007e4e <USBD_CtlError>
      ret = USBD_FAIL;
 8006be2:	2302      	movs	r3, #2
 8006be4:	75fb      	strb	r3, [r7, #23]
      break;
 8006be6:	bf00      	nop
  }

  return ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d03a      	beq.n	8006c8e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	440b      	add	r3, r1
 8006c26:	331c      	adds	r3, #28
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d029      	beq.n	8006c82 <USBD_CDC_DataIn+0x90>
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	331c      	adds	r3, #28
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	78f9      	ldrb	r1, [r7, #3]
 8006c42:	68b8      	ldr	r0, [r7, #8]
 8006c44:	460b      	mov	r3, r1
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	440b      	add	r3, r1
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4403      	add	r3, r0
 8006c4e:	3338      	adds	r3, #56	; 0x38
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c56:	fb01 f303 	mul.w	r3, r1, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d110      	bne.n	8006c82 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	331c      	adds	r3, #28
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c74:	78f9      	ldrb	r1, [r7, #3]
 8006c76:	2300      	movs	r3, #0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fde7 	bl	800884e <USBD_LL_Transmit>
 8006c80:	e003      	b.n	8006c8a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e000      	b.n	8006c90 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006c8e:	2302      	movs	r3, #2
  }
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fe12 	bl	80088da <USBD_LL_GetRxDataSize>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006cdc:	4611      	mov	r1, r2
 8006cde:	4798      	blx	r3

    return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d015      	beq.n	8006d34 <USBD_CDC_EP0_RxReady+0x46>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006d0e:	2bff      	cmp	r3, #255	; 0xff
 8006d10:	d010      	beq.n	8006d34 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006d20:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006d28:	b292      	uxth	r2, r2
 8006d2a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	22ff      	movs	r2, #255	; 0xff
 8006d30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2243      	movs	r2, #67	; 0x43
 8006d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006d4e:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000094 	.word	0x20000094

08006d60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2243      	movs	r2, #67	; 0x43
 8006d6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006d6e:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000050 	.word	0x20000050

08006d80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2243      	movs	r2, #67	; 0x43
 8006d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006d8e:	4b03      	ldr	r3, [pc, #12]	; (8006d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	200000d8 	.word	0x200000d8

08006da0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	220a      	movs	r2, #10
 8006dac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006dae:	4b03      	ldr	r3, [pc, #12]	; (8006dbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	2000000c 	.word	0x2000000c

08006dc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e0a:	88fa      	ldrh	r2, [r7, #6]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bc80      	pop	{r7}
 8006e42:	4770      	bx	lr

08006e44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01c      	beq.n	8006e98 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d115      	bne.n	8006e94 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	2181      	movs	r1, #129	; 0x81
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fcdf 	bl	800884e <USBD_LL_Transmit>

      return USBD_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e002      	b.n	8006e9a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006e98:	2302      	movs	r3, #2
  }
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b084      	sub	sp, #16
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d017      	beq.n	8006eec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	7c1b      	ldrb	r3, [r3, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d109      	bne.n	8006ed8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ece:	2101      	movs	r1, #1
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 fcdf 	bl	8008894 <USBD_LL_PrepareReceive>
 8006ed6:	e007      	b.n	8006ee8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 fcd6 	bl	8008894 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	e000      	b.n	8006eee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006eec:	2302      	movs	r3, #2
  }
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	4613      	mov	r3, r2
 8006f02:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e01a      	b.n	8006f44 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	79fa      	ldrb	r2, [r7, #7]
 8006f3a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f001 fb43 	bl	80085c8 <USBD_LL_Init>

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e001      	b.n	8006f72 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bc80      	pop	{r7}
 8006f7c:	4770      	bx	lr

08006f7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f001 fb78 	bl	800867c <USBD_LL_Start>

  return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr

08006faa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00c      	beq.n	8006fde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	78fa      	ldrb	r2, [r7, #3]
 8006fce:	4611      	mov	r1, r2
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d101      	bne.n	8006fde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	78fa      	ldrb	r2, [r7, #3]
 8006ffe:	4611      	mov	r1, r2
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3

  return USBD_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fed8 	bl	8007dd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007034:	461a      	mov	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	2b02      	cmp	r3, #2
 8007048:	d016      	beq.n	8007078 <USBD_LL_SetupStage+0x6a>
 800704a:	2b02      	cmp	r3, #2
 800704c:	d81c      	bhi.n	8007088 <USBD_LL_SetupStage+0x7a>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <USBD_LL_SetupStage+0x4a>
 8007052:	2b01      	cmp	r3, #1
 8007054:	d008      	beq.n	8007068 <USBD_LL_SetupStage+0x5a>
 8007056:	e017      	b.n	8007088 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f9cb 	bl	80073fc <USBD_StdDevReq>
      break;
 8007066:	e01a      	b.n	800709e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fa2d 	bl	80074d0 <USBD_StdItfReq>
      break;
 8007076:	e012      	b.n	800709e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fa6d 	bl	8007560 <USBD_StdEPReq>
      break;
 8007086:	e00a      	b.n	800709e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800708e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007092:	b2db      	uxtb	r3, r3
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fb50 	bl	800873c <USBD_LL_StallEP>
      break;
 800709c:	bf00      	nop
  }

  return USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	460b      	mov	r3, r1
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070b6:	7afb      	ldrb	r3, [r7, #11]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d14b      	bne.n	8007154 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80070c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d134      	bne.n	8007138 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d919      	bls.n	800710e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d203      	bcs.n	80070fc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	e002      	b.n	8007102 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 ff57 	bl	8007fba <USBD_CtlContinueRx>
 800710c:	e038      	b.n	8007180 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007120:	2b03      	cmp	r3, #3
 8007122:	d105      	bne.n	8007130 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 ff54 	bl	8007fde <USBD_CtlSendStatus>
 8007136:	e023      	b.n	8007180 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800713e:	2b05      	cmp	r3, #5
 8007140:	d11e      	bne.n	8007180 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800714a:	2100      	movs	r1, #0
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f001 faf5 	bl	800873c <USBD_LL_StallEP>
 8007152:	e015      	b.n	8007180 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00d      	beq.n	800717c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007166:	2b03      	cmp	r3, #3
 8007168:	d108      	bne.n	800717c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	7afa      	ldrb	r2, [r7, #11]
 8007174:	4611      	mov	r1, r2
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	4798      	blx	r3
 800717a:	e001      	b.n	8007180 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800717c:	2302      	movs	r3, #2
 800717e:	e000      	b.n	8007182 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b086      	sub	sp, #24
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	460b      	mov	r3, r1
 8007194:	607a      	str	r2, [r7, #4]
 8007196:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007198:	7afb      	ldrb	r3, [r7, #11]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d17f      	bne.n	800729e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	3314      	adds	r3, #20
 80071a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d15c      	bne.n	8007268 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d915      	bls.n	80071e6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	461a      	mov	r2, r3
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fec1 	bl	8007f5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071d8:	2300      	movs	r3, #0
 80071da:	2200      	movs	r2, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f001 fb58 	bl	8008894 <USBD_LL_PrepareReceive>
 80071e4:	e04e      	b.n	8007284 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	6912      	ldr	r2, [r2, #16]
 80071ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80071f2:	fb01 f202 	mul.w	r2, r1, r2
 80071f6:	1a9b      	subs	r3, r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11c      	bne.n	8007236 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	689a      	ldr	r2, [r3, #8]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007204:	429a      	cmp	r2, r3
 8007206:	d316      	bcc.n	8007236 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007212:	429a      	cmp	r2, r3
 8007214:	d20f      	bcs.n	8007236 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007216:	2200      	movs	r2, #0
 8007218:	2100      	movs	r1, #0
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fe9d 	bl	8007f5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007228:	2300      	movs	r3, #0
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f001 fb30 	bl	8008894 <USBD_LL_PrepareReceive>
 8007234:	e026      	b.n	8007284 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007248:	2b03      	cmp	r3, #3
 800724a:	d105      	bne.n	8007258 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007258:	2180      	movs	r1, #128	; 0x80
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f001 fa6e 	bl	800873c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fecf 	bl	8008004 <USBD_CtlReceiveStatus>
 8007266:	e00d      	b.n	8007284 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800726e:	2b04      	cmp	r3, #4
 8007270:	d004      	beq.n	800727c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800727c:	2180      	movs	r1, #128	; 0x80
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f001 fa5c 	bl	800873c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800728a:	2b01      	cmp	r3, #1
 800728c:	d11d      	bne.n	80072ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff fe81 	bl	8006f96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800729c:	e015      	b.n	80072ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00d      	beq.n	80072c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d108      	bne.n	80072c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	7afa      	ldrb	r2, [r7, #11]
 80072be:	4611      	mov	r1, r2
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	4798      	blx	r3
 80072c4:	e001      	b.n	80072ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072c6:	2302      	movs	r3, #2
 80072c8:	e000      	b.n	80072cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072dc:	2340      	movs	r3, #64	; 0x40
 80072de:	2200      	movs	r2, #0
 80072e0:	2100      	movs	r1, #0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f9e5 	bl	80086b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2240      	movs	r2, #64	; 0x40
 80072f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	2200      	movs	r2, #0
 80072fc:	2180      	movs	r1, #128	; 0x80
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 f9d7 	bl	80086b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2240      	movs	r2, #64	; 0x40
 800730e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6852      	ldr	r2, [r2, #4]
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	4611      	mov	r1, r2
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
  }

  return USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2204      	movs	r2, #4
 800738c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d105      	bne.n	80073ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bc80      	pop	{r7}
 80073c4:	4770      	bx	lr

080073c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d10b      	bne.n	80073f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d005      	beq.n	80073f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d005      	beq.n	8007422 <USBD_StdDevReq+0x26>
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d84f      	bhi.n	80074ba <USBD_StdDevReq+0xbe>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <USBD_StdDevReq+0x36>
 800741e:	2b20      	cmp	r3, #32
 8007420:	d14b      	bne.n	80074ba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
      break;
 8007430:	e048      	b.n	80074c4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	785b      	ldrb	r3, [r3, #1]
 8007436:	2b09      	cmp	r3, #9
 8007438:	d839      	bhi.n	80074ae <USBD_StdDevReq+0xb2>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <USBD_StdDevReq+0x44>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	08007491 	.word	0x08007491
 8007444:	080074a5 	.word	0x080074a5
 8007448:	080074af 	.word	0x080074af
 800744c:	0800749b 	.word	0x0800749b
 8007450:	080074af 	.word	0x080074af
 8007454:	08007473 	.word	0x08007473
 8007458:	08007469 	.word	0x08007469
 800745c:	080074af 	.word	0x080074af
 8007460:	08007487 	.word	0x08007487
 8007464:	0800747d 	.word	0x0800747d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007468:	6839      	ldr	r1, [r7, #0]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f9dc 	bl	8007828 <USBD_GetDescriptor>
          break;
 8007470:	e022      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fb3f 	bl	8007af8 <USBD_SetAddress>
          break;
 800747a:	e01d      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fb7e 	bl	8007b80 <USBD_SetConfig>
          break;
 8007484:	e018      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc07 	bl	8007c9c <USBD_GetConfig>
          break;
 800748e:	e013      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc37 	bl	8007d06 <USBD_GetStatus>
          break;
 8007498:	e00e      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fc65 	bl	8007d6c <USBD_SetFeature>
          break;
 80074a2:	e009      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc74 	bl	8007d94 <USBD_ClrFeature>
          break;
 80074ac:	e004      	b.n	80074b8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fccc 	bl	8007e4e <USBD_CtlError>
          break;
 80074b6:	bf00      	nop
      }
      break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fcc6 	bl	8007e4e <USBD_CtlError>
      break;
 80074c2:	bf00      	nop
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop

080074d0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	d005      	beq.n	80074f6 <USBD_StdItfReq+0x26>
 80074ea:	2b40      	cmp	r3, #64	; 0x40
 80074ec:	d82e      	bhi.n	800754c <USBD_StdItfReq+0x7c>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <USBD_StdItfReq+0x26>
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d12a      	bne.n	800754c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074fc:	3b01      	subs	r3, #1
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d81d      	bhi.n	800753e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	889b      	ldrh	r3, [r3, #4]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d813      	bhi.n	8007534 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	88db      	ldrh	r3, [r3, #6]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d110      	bne.n	8007548 <USBD_StdItfReq+0x78>
 8007526:	7bfb      	ldrb	r3, [r7, #15]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fd56 	bl	8007fde <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007532:	e009      	b.n	8007548 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fc89 	bl	8007e4e <USBD_CtlError>
          break;
 800753c:	e004      	b.n	8007548 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fc84 	bl	8007e4e <USBD_CtlError>
          break;
 8007546:	e000      	b.n	800754a <USBD_StdItfReq+0x7a>
          break;
 8007548:	bf00      	nop
      }
      break;
 800754a:	e004      	b.n	8007556 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fc7d 	bl	8007e4e <USBD_CtlError>
      break;
 8007554:	bf00      	nop
  }

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	889b      	ldrh	r3, [r3, #4]
 8007572:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d007      	beq.n	8007590 <USBD_StdEPReq+0x30>
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	f200 8146 	bhi.w	8007812 <USBD_StdEPReq+0x2b2>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <USBD_StdEPReq+0x40>
 800758a:	2b20      	cmp	r3, #32
 800758c:	f040 8141 	bne.w	8007812 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
      break;
 800759e:	e13d      	b.n	800781c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d10a      	bne.n	80075c2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]

        return ret;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	e12d      	b.n	800781e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d007      	beq.n	80075da <USBD_StdEPReq+0x7a>
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	f300 811b 	bgt.w	8007806 <USBD_StdEPReq+0x2a6>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d072      	beq.n	80076ba <USBD_StdEPReq+0x15a>
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d03a      	beq.n	800764e <USBD_StdEPReq+0xee>
 80075d8:	e115      	b.n	8007806 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d002      	beq.n	80075ea <USBD_StdEPReq+0x8a>
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d015      	beq.n	8007614 <USBD_StdEPReq+0xb4>
 80075e8:	e02b      	b.n	8007642 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00c      	beq.n	800760a <USBD_StdEPReq+0xaa>
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d009      	beq.n	800760a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f89e 	bl	800873c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007600:	2180      	movs	r1, #128	; 0x80
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 f89a 	bl	800873c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007608:	e020      	b.n	800764c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fc1e 	bl	8007e4e <USBD_CtlError>
              break;
 8007612:	e01b      	b.n	800764c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	885b      	ldrh	r3, [r3, #2]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10e      	bne.n	800763a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00b      	beq.n	800763a <USBD_StdEPReq+0xda>
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	2b80      	cmp	r3, #128	; 0x80
 8007626:	d008      	beq.n	800763a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	88db      	ldrh	r3, [r3, #6]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f881 	bl	800873c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fccf 	bl	8007fde <USBD_CtlSendStatus>

              break;
 8007640:	e004      	b.n	800764c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fc02 	bl	8007e4e <USBD_CtlError>
              break;
 800764a:	bf00      	nop
          }
          break;
 800764c:	e0e0      	b.n	8007810 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007654:	2b02      	cmp	r3, #2
 8007656:	d002      	beq.n	800765e <USBD_StdEPReq+0xfe>
 8007658:	2b03      	cmp	r3, #3
 800765a:	d015      	beq.n	8007688 <USBD_StdEPReq+0x128>
 800765c:	e026      	b.n	80076ac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800765e:	7bbb      	ldrb	r3, [r7, #14]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00c      	beq.n	800767e <USBD_StdEPReq+0x11e>
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	2b80      	cmp	r3, #128	; 0x80
 8007668:	d009      	beq.n	800767e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f864 	bl	800873c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007674:	2180      	movs	r1, #128	; 0x80
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f001 f860 	bl	800873c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800767c:	e01c      	b.n	80076b8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fbe4 	bl	8007e4e <USBD_CtlError>
              break;
 8007686:	e017      	b.n	80076b8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	885b      	ldrh	r3, [r3, #2]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d112      	bne.n	80076b6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800769a:	7bbb      	ldrb	r3, [r7, #14]
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 f86b 	bl	800877a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fc9a 	bl	8007fde <USBD_CtlSendStatus>
              }
              break;
 80076aa:	e004      	b.n	80076b6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fbcd 	bl	8007e4e <USBD_CtlError>
              break;
 80076b4:	e000      	b.n	80076b8 <USBD_StdEPReq+0x158>
              break;
 80076b6:	bf00      	nop
          }
          break;
 80076b8:	e0aa      	b.n	8007810 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d002      	beq.n	80076ca <USBD_StdEPReq+0x16a>
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d032      	beq.n	800772e <USBD_StdEPReq+0x1ce>
 80076c8:	e097      	b.n	80077fa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <USBD_StdEPReq+0x180>
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d004      	beq.n	80076e0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fbb8 	bl	8007e4e <USBD_CtlError>
                break;
 80076de:	e091      	b.n	8007804 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da0b      	bge.n	8007700 <USBD_StdEPReq+0x1a0>
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	3310      	adds	r3, #16
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	3304      	adds	r3, #4
 80076fe:	e00b      	b.n	8007718 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2202      	movs	r2, #2
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fbfb 	bl	8007f22 <USBD_CtlSendData>
              break;
 800772c:	e06a      	b.n	8007804 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800772e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007732:	2b00      	cmp	r3, #0
 8007734:	da11      	bge.n	800775a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007736:	7bbb      	ldrb	r3, [r7, #14]
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	4613      	mov	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	4413      	add	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	440b      	add	r3, r1
 8007748:	3318      	adds	r3, #24
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d117      	bne.n	8007780 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fb7b 	bl	8007e4e <USBD_CtlError>
                  break;
 8007758:	e054      	b.n	8007804 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800775a:	7bbb      	ldrb	r3, [r7, #14]
 800775c:	f003 020f 	and.w	r2, r3, #15
 8007760:	6879      	ldr	r1, [r7, #4]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d104      	bne.n	8007780 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fb68 	bl	8007e4e <USBD_CtlError>
                  break;
 800777e:	e041      	b.n	8007804 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	da0b      	bge.n	80077a0 <USBD_StdEPReq+0x240>
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	3310      	adds	r3, #16
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	4413      	add	r3, r2
 800779c:	3304      	adds	r3, #4
 800779e:	e00b      	b.n	80077b8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	3304      	adds	r3, #4
 80077b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <USBD_StdEPReq+0x266>
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d103      	bne.n	80077ce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e00e      	b.n	80077ec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fff0 	bl	80087b8 <USBD_LL_IsStallEP>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2201      	movs	r2, #1
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e002      	b.n	80077ec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2202      	movs	r2, #2
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fb95 	bl	8007f22 <USBD_CtlSendData>
              break;
 80077f8:	e004      	b.n	8007804 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb26 	bl	8007e4e <USBD_CtlError>
              break;
 8007802:	bf00      	nop
          }
          break;
 8007804:	e004      	b.n	8007810 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fb20 	bl	8007e4e <USBD_CtlError>
          break;
 800780e:	bf00      	nop
      }
      break;
 8007810:	e004      	b.n	800781c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb1a 	bl	8007e4e <USBD_CtlError>
      break;
 800781a:	bf00      	nop
  }

  return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	885b      	ldrh	r3, [r3, #2]
 8007842:	0a1b      	lsrs	r3, r3, #8
 8007844:	b29b      	uxth	r3, r3
 8007846:	3b01      	subs	r3, #1
 8007848:	2b06      	cmp	r3, #6
 800784a:	f200 8128 	bhi.w	8007a9e <USBD_GetDescriptor+0x276>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <USBD_GetDescriptor+0x2c>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	08007871 	.word	0x08007871
 8007858:	08007889 	.word	0x08007889
 800785c:	080078c9 	.word	0x080078c9
 8007860:	08007a9f 	.word	0x08007a9f
 8007864:	08007a9f 	.word	0x08007a9f
 8007868:	08007a3f 	.word	0x08007a3f
 800786c:	08007a6b 	.word	0x08007a6b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	7c12      	ldrb	r2, [r2, #16]
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3
 8007884:	60f8      	str	r0, [r7, #12]
      break;
 8007886:	e112      	b.n	8007aae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	7c1b      	ldrb	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10d      	bne.n	80078ac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007898:	f107 0208 	add.w	r2, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3301      	adds	r3, #1
 80078a6:	2202      	movs	r2, #2
 80078a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078aa:	e100      	b.n	8007aae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	f107 0208 	add.w	r2, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	2202      	movs	r2, #2
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	e0f2      	b.n	8007aae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	885b      	ldrh	r3, [r3, #2]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	f200 80ac 	bhi.w	8007a2c <USBD_GetDescriptor+0x204>
 80078d4:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USBD_GetDescriptor+0xb4>)
 80078d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078da:	bf00      	nop
 80078dc:	080078f5 	.word	0x080078f5
 80078e0:	08007929 	.word	0x08007929
 80078e4:	0800795d 	.word	0x0800795d
 80078e8:	08007991 	.word	0x08007991
 80078ec:	080079c5 	.word	0x080079c5
 80078f0:	080079f9 	.word	0x080079f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	7c12      	ldrb	r2, [r2, #16]
 800790c:	f107 0108 	add.w	r1, r7, #8
 8007910:	4610      	mov	r0, r2
 8007912:	4798      	blx	r3
 8007914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007916:	e091      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa97 	bl	8007e4e <USBD_CtlError>
            err++;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	3301      	adds	r3, #1
 8007924:	72fb      	strb	r3, [r7, #11]
          break;
 8007926:	e089      	b.n	8007a3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	7c12      	ldrb	r2, [r2, #16]
 8007940:	f107 0108 	add.w	r1, r7, #8
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
 8007948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800794a:	e077      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fa7d 	bl	8007e4e <USBD_CtlError>
            err++;
 8007954:	7afb      	ldrb	r3, [r7, #11]
 8007956:	3301      	adds	r3, #1
 8007958:	72fb      	strb	r3, [r7, #11]
          break;
 800795a:	e06f      	b.n	8007a3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	7c12      	ldrb	r2, [r2, #16]
 8007974:	f107 0108 	add.w	r1, r7, #8
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800797e:	e05d      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fa63 	bl	8007e4e <USBD_CtlError>
            err++;
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	3301      	adds	r3, #1
 800798c:	72fb      	strb	r3, [r7, #11]
          break;
 800798e:	e055      	b.n	8007a3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	7c12      	ldrb	r2, [r2, #16]
 80079a8:	f107 0108 	add.w	r1, r7, #8
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
 80079b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079b2:	e043      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fa49 	bl	8007e4e <USBD_CtlError>
            err++;
 80079bc:	7afb      	ldrb	r3, [r7, #11]
 80079be:	3301      	adds	r3, #1
 80079c0:	72fb      	strb	r3, [r7, #11]
          break;
 80079c2:	e03b      	b.n	8007a3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	7c12      	ldrb	r2, [r2, #16]
 80079dc:	f107 0108 	add.w	r1, r7, #8
 80079e0:	4610      	mov	r0, r2
 80079e2:	4798      	blx	r3
 80079e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079e6:	e029      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fa2f 	bl	8007e4e <USBD_CtlError>
            err++;
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	3301      	adds	r3, #1
 80079f4:	72fb      	strb	r3, [r7, #11]
          break;
 80079f6:	e021      	b.n	8007a3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	7c12      	ldrb	r2, [r2, #16]
 8007a10:	f107 0108 	add.w	r1, r7, #8
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
 8007a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a1a:	e00f      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa15 	bl	8007e4e <USBD_CtlError>
            err++;
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	3301      	adds	r3, #1
 8007a28:	72fb      	strb	r3, [r7, #11]
          break;
 8007a2a:	e007      	b.n	8007a3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa0d 	bl	8007e4e <USBD_CtlError>
          err++;
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	3301      	adds	r3, #1
 8007a38:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007a3a:	e038      	b.n	8007aae <USBD_GetDescriptor+0x286>
 8007a3c:	e037      	b.n	8007aae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7c1b      	ldrb	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	f107 0208 	add.w	r2, r7, #8
 8007a52:	4610      	mov	r0, r2
 8007a54:	4798      	blx	r3
 8007a56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a58:	e029      	b.n	8007aae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f9f6 	bl	8007e4e <USBD_CtlError>
        err++;
 8007a62:	7afb      	ldrb	r3, [r7, #11]
 8007a64:	3301      	adds	r3, #1
 8007a66:	72fb      	strb	r3, [r7, #11]
      break;
 8007a68:	e021      	b.n	8007aae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	7c1b      	ldrb	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10d      	bne.n	8007a8e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4798      	blx	r3
 8007a82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	2207      	movs	r2, #7
 8007a8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a8c:	e00f      	b.n	8007aae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f9dc 	bl	8007e4e <USBD_CtlError>
        err++;
 8007a96:	7afb      	ldrb	r3, [r7, #11]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a9c:	e007      	b.n	8007aae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f9d4 	bl	8007e4e <USBD_CtlError>
      err++;
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	72fb      	strb	r3, [r7, #11]
      break;
 8007aac:	bf00      	nop
  }

  if (err != 0U)
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d11c      	bne.n	8007aee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007ab4:	893b      	ldrh	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d011      	beq.n	8007ade <USBD_GetDescriptor+0x2b6>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00d      	beq.n	8007ade <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	88da      	ldrh	r2, [r3, #6]
 8007ac6:	893b      	ldrh	r3, [r7, #8]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bf28      	it	cs
 8007acc:	4613      	movcs	r3, r2
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ad2:	893b      	ldrh	r3, [r7, #8]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa22 	bl	8007f22 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88db      	ldrh	r3, [r3, #6]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa79 	bl	8007fde <USBD_CtlSendStatus>
 8007aec:	e000      	b.n	8007af0 <USBD_GetDescriptor+0x2c8>
    return;
 8007aee:	bf00      	nop
    }
  }
}
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop

08007af8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	889b      	ldrh	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d130      	bne.n	8007b6c <USBD_SetAddress+0x74>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	88db      	ldrh	r3, [r3, #6]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d12c      	bne.n	8007b6c <USBD_SetAddress+0x74>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	885b      	ldrh	r3, [r3, #2]
 8007b16:	2b7f      	cmp	r3, #127	; 0x7f
 8007b18:	d828      	bhi.n	8007b6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d104      	bne.n	8007b3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f98b 	bl	8007e4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b38:	e01d      	b.n	8007b76 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7bfa      	ldrb	r2, [r7, #15]
 8007b3e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fe62 	bl	8008810 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fa46 	bl	8007fde <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d004      	beq.n	8007b62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b60:	e009      	b.n	8007b76 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	e004      	b.n	8007b76 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f96d 	bl	8007e4e <USBD_CtlError>
  }
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	4b41      	ldr	r3, [pc, #260]	; (8007c98 <USBD_SetConfig+0x118>)
 8007b92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007b94:	4b40      	ldr	r3, [pc, #256]	; (8007c98 <USBD_SetConfig+0x118>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d904      	bls.n	8007ba6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f955 	bl	8007e4e <USBD_CtlError>
 8007ba4:	e075      	b.n	8007c92 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d002      	beq.n	8007bb6 <USBD_SetConfig+0x36>
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d023      	beq.n	8007bfc <USBD_SetConfig+0x7c>
 8007bb4:	e062      	b.n	8007c7c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007bb6:	4b38      	ldr	r3, [pc, #224]	; (8007c98 <USBD_SetConfig+0x118>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d01a      	beq.n	8007bf4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007bbe:	4b36      	ldr	r3, [pc, #216]	; (8007c98 <USBD_SetConfig+0x118>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2203      	movs	r2, #3
 8007bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007bd0:	4b31      	ldr	r3, [pc, #196]	; (8007c98 <USBD_SetConfig+0x118>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f7ff f9e7 	bl	8006faa <USBD_SetClassConfig>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d104      	bne.n	8007bec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f932 	bl	8007e4e <USBD_CtlError>
            return;
 8007bea:	e052      	b.n	8007c92 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9f6 	bl	8007fde <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007bf2:	e04e      	b.n	8007c92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9f2 	bl	8007fde <USBD_CtlSendStatus>
        break;
 8007bfa:	e04a      	b.n	8007c92 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007bfc:	4b26      	ldr	r3, [pc, #152]	; (8007c98 <USBD_SetConfig+0x118>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d112      	bne.n	8007c2a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007c0c:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <USBD_SetConfig+0x118>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c16:	4b20      	ldr	r3, [pc, #128]	; (8007c98 <USBD_SetConfig+0x118>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff f9e3 	bl	8006fe8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f9db 	bl	8007fde <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c28:	e033      	b.n	8007c92 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007c2a:	4b1b      	ldr	r3, [pc, #108]	; (8007c98 <USBD_SetConfig+0x118>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d01d      	beq.n	8007c74 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff f9d1 	bl	8006fe8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007c46:	4b14      	ldr	r3, [pc, #80]	; (8007c98 <USBD_SetConfig+0x118>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c50:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <USBD_SetConfig+0x118>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff f9a7 	bl	8006faa <USBD_SetClassConfig>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d104      	bne.n	8007c6c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f8f2 	bl	8007e4e <USBD_CtlError>
            return;
 8007c6a:	e012      	b.n	8007c92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f9b6 	bl	8007fde <USBD_CtlSendStatus>
        break;
 8007c72:	e00e      	b.n	8007c92 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9b2 	bl	8007fde <USBD_CtlSendStatus>
        break;
 8007c7a:	e00a      	b.n	8007c92 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f8e5 	bl	8007e4e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c84:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <USBD_SetConfig+0x118>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff f9ac 	bl	8006fe8 <USBD_ClrClassConfig>
        break;
 8007c90:	bf00      	nop
    }
  }
}
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	200006c0 	.word	0x200006c0

08007c9c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	88db      	ldrh	r3, [r3, #6]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d004      	beq.n	8007cb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f8cc 	bl	8007e4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007cb6:	e022      	b.n	8007cfe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	dc02      	bgt.n	8007cc8 <USBD_GetConfig+0x2c>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dc03      	bgt.n	8007cce <USBD_GetConfig+0x32>
 8007cc6:	e015      	b.n	8007cf4 <USBD_GetConfig+0x58>
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetConfig+0x48>
 8007ccc:	e012      	b.n	8007cf4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f920 	bl	8007f22 <USBD_CtlSendData>
        break;
 8007ce2:	e00c      	b.n	8007cfe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	2201      	movs	r2, #1
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f918 	bl	8007f22 <USBD_CtlSendData>
        break;
 8007cf2:	e004      	b.n	8007cfe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f8a9 	bl	8007e4e <USBD_CtlError>
        break;
 8007cfc:	bf00      	nop
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d16:	3b01      	subs	r3, #1
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d81e      	bhi.n	8007d5a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	88db      	ldrh	r3, [r3, #6]
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d004      	beq.n	8007d2e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f891 	bl	8007e4e <USBD_CtlError>
        break;
 8007d2c:	e01a      	b.n	8007d64 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f043 0202 	orr.w	r2, r3, #2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	2202      	movs	r2, #2
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f8e5 	bl	8007f22 <USBD_CtlSendData>
      break;
 8007d58:	e004      	b.n	8007d64 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f876 	bl	8007e4e <USBD_CtlError>
      break;
 8007d62:	bf00      	nop
  }
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	885b      	ldrh	r3, [r3, #2]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d106      	bne.n	8007d8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f929 	bl	8007fde <USBD_CtlSendStatus>
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	3b01      	subs	r3, #1
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d80b      	bhi.n	8007dc2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	885b      	ldrh	r3, [r3, #2]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d10c      	bne.n	8007dcc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f90f 	bl	8007fde <USBD_CtlSendStatus>
      }
      break;
 8007dc0:	e004      	b.n	8007dcc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f842 	bl	8007e4e <USBD_CtlError>
      break;
 8007dca:	e000      	b.n	8007dce <USBD_ClrFeature+0x3a>
      break;
 8007dcc:	bf00      	nop
  }
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781a      	ldrb	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	785a      	ldrb	r2, [r3, #1]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	3302      	adds	r3, #2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	3303      	adds	r3, #3
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	3305      	adds	r3, #5
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	021b      	lsls	r3, r3, #8
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	3306      	adds	r3, #6
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	3307      	adds	r3, #7
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	80da      	strh	r2, [r3, #6]

}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bc80      	pop	{r7}
 8007e4c:	4770      	bx	lr

08007e4e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007e58:	2180      	movs	r1, #128	; 0x80
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fc6e 	bl	800873c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007e60:	2100      	movs	r1, #0
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fc6a 	bl	800873c <USBD_LL_StallEP>
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d032      	beq.n	8007eec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f834 	bl	8007ef4 <USBD_GetLen>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	3301      	adds	r3, #1
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	75fa      	strb	r2, [r7, #23]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	75fa      	strb	r2, [r7, #23]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	2203      	movs	r2, #3
 8007eba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007ebc:	e012      	b.n	8007ee4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	60fa      	str	r2, [r7, #12]
 8007ec4:	7dfa      	ldrb	r2, [r7, #23]
 8007ec6:	1c51      	adds	r1, r2, #1
 8007ec8:	75f9      	strb	r1, [r7, #23]
 8007eca:	4611      	mov	r1, r2
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	440a      	add	r2, r1
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ed4:	7dfb      	ldrb	r3, [r7, #23]
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	75fa      	strb	r2, [r7, #23]
 8007eda:	461a      	mov	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	4413      	add	r3, r2
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e8      	bne.n	8007ebe <USBD_GetString+0x4e>
    }
  }
}
 8007eec:	bf00      	nop
 8007eee:	3718      	adds	r7, #24
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007f00:	e005      	b.n	8007f0e <USBD_GetLen+0x1a>
  {
    len++;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	3301      	adds	r3, #1
 8007f06:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1f5      	bne.n	8007f02 <USBD_GetLen+0xe>
  }

  return len;
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr

08007f22 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007f3e:	88fa      	ldrh	r2, [r7, #6]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fc7f 	bl	800884e <USBD_LL_Transmit>

  return USBD_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	4613      	mov	r3, r2
 8007f66:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	68ba      	ldr	r2, [r7, #8]
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fc6d 	bl	800884e <USBD_LL_Transmit>

  return USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2203      	movs	r2, #3
 8007f90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f94:	88fa      	ldrh	r2, [r7, #6]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fc72 	bl	8008894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fc60 	bl	8008894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fc2a 	bl	800884e <USBD_LL_Transmit>

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2205      	movs	r2, #5
 8008010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008014:	2300      	movs	r3, #0
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fc3a 	bl	8008894 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008030:	2200      	movs	r2, #0
 8008032:	4912      	ldr	r1, [pc, #72]	; (800807c <MX_USB_DEVICE_Init+0x50>)
 8008034:	4812      	ldr	r0, [pc, #72]	; (8008080 <MX_USB_DEVICE_Init+0x54>)
 8008036:	f7fe ff5e 	bl	8006ef6 <USBD_Init>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008040:	f7f8 fb2e 	bl	80006a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008044:	490f      	ldr	r1, [pc, #60]	; (8008084 <MX_USB_DEVICE_Init+0x58>)
 8008046:	480e      	ldr	r0, [pc, #56]	; (8008080 <MX_USB_DEVICE_Init+0x54>)
 8008048:	f7fe ff80 	bl	8006f4c <USBD_RegisterClass>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008052:	f7f8 fb25 	bl	80006a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008056:	490c      	ldr	r1, [pc, #48]	; (8008088 <MX_USB_DEVICE_Init+0x5c>)
 8008058:	4809      	ldr	r0, [pc, #36]	; (8008080 <MX_USB_DEVICE_Init+0x54>)
 800805a:	f7fe feb1 	bl	8006dc0 <USBD_CDC_RegisterInterface>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008064:	f7f8 fb1c 	bl	80006a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008068:	4805      	ldr	r0, [pc, #20]	; (8008080 <MX_USB_DEVICE_Init+0x54>)
 800806a:	f7fe ff88 	bl	8006f7e <USBD_Start>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008074:	f7f8 fb14 	bl	80006a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008078:	bf00      	nop
 800807a:	bd80      	pop	{r7, pc}
 800807c:	2000012c 	.word	0x2000012c
 8008080:	200006c4 	.word	0x200006c4
 8008084:	20000018 	.word	0x20000018
 8008088:	2000011c 	.word	0x2000011c

0800808c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008090:	2200      	movs	r2, #0
 8008092:	4905      	ldr	r1, [pc, #20]	; (80080a8 <CDC_Init_FS+0x1c>)
 8008094:	4805      	ldr	r0, [pc, #20]	; (80080ac <CDC_Init_FS+0x20>)
 8008096:	f7fe fea9 	bl	8006dec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800809a:	4905      	ldr	r1, [pc, #20]	; (80080b0 <CDC_Init_FS+0x24>)
 800809c:	4803      	ldr	r0, [pc, #12]	; (80080ac <CDC_Init_FS+0x20>)
 800809e:	f7fe febe 	bl	8006e1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80080a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000d88 	.word	0x20000d88
 80080ac:	200006c4 	.word	0x200006c4
 80080b0:	20000988 	.word	0x20000988

080080b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80080b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr
	...

080080c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]
 80080d0:	4613      	mov	r3, r2
 80080d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b23      	cmp	r3, #35	; 0x23
 80080d8:	d84a      	bhi.n	8008170 <CDC_Control_FS+0xac>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <CDC_Control_FS+0x1c>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	08008171 	.word	0x08008171
 80080e4:	08008171 	.word	0x08008171
 80080e8:	08008171 	.word	0x08008171
 80080ec:	08008171 	.word	0x08008171
 80080f0:	08008171 	.word	0x08008171
 80080f4:	08008171 	.word	0x08008171
 80080f8:	08008171 	.word	0x08008171
 80080fc:	08008171 	.word	0x08008171
 8008100:	08008171 	.word	0x08008171
 8008104:	08008171 	.word	0x08008171
 8008108:	08008171 	.word	0x08008171
 800810c:	08008171 	.word	0x08008171
 8008110:	08008171 	.word	0x08008171
 8008114:	08008171 	.word	0x08008171
 8008118:	08008171 	.word	0x08008171
 800811c:	08008171 	.word	0x08008171
 8008120:	08008171 	.word	0x08008171
 8008124:	08008171 	.word	0x08008171
 8008128:	08008171 	.word	0x08008171
 800812c:	08008171 	.word	0x08008171
 8008130:	08008171 	.word	0x08008171
 8008134:	08008171 	.word	0x08008171
 8008138:	08008171 	.word	0x08008171
 800813c:	08008171 	.word	0x08008171
 8008140:	08008171 	.word	0x08008171
 8008144:	08008171 	.word	0x08008171
 8008148:	08008171 	.word	0x08008171
 800814c:	08008171 	.word	0x08008171
 8008150:	08008171 	.word	0x08008171
 8008154:	08008171 	.word	0x08008171
 8008158:	08008171 	.word	0x08008171
 800815c:	08008171 	.word	0x08008171
 8008160:	08008171 	.word	0x08008171
 8008164:	08008171 	.word	0x08008171
 8008168:	08008171 	.word	0x08008171
 800816c:	08008171 	.word	0x08008171
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008170:	bf00      	nop
  }

  return (USBD_OK);
 8008172:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	bc80      	pop	{r7}
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop

08008180 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	4810      	ldr	r0, [pc, #64]	; (80081d0 <CDC_Receive_FS+0x50>)
 800818e:	f7fe fe46 	bl	8006e1e <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008192:	480f      	ldr	r0, [pc, #60]	; (80081d0 <CDC_Receive_FS+0x50>)
 8008194:	f7fe fe85 	bl	8006ea2 <USBD_CDC_ReceivePacket>

	  memset(buffer, '\0', sizeof(buffer));  // clear the buffer
 8008198:	2240      	movs	r2, #64	; 0x40
 800819a:	2100      	movs	r1, #0
 800819c:	480d      	ldr	r0, [pc, #52]	; (80081d4 <CDC_Receive_FS+0x54>)
 800819e:	f000 fbfb 	bl	8008998 <memset>
	  uint8_t len = (uint8_t)*Len;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	73fb      	strb	r3, [r7, #15]
	  memcpy(buffer, Buf, len);  // copy the data to the buffer
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	461a      	mov	r2, r3
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	4809      	ldr	r0, [pc, #36]	; (80081d4 <CDC_Receive_FS+0x54>)
 80081b0:	f000 fc30 	bl	8008a14 <memcpy>
	  memset(Buf, '\0', len);   // clear the Buf also
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	461a      	mov	r2, r3
 80081b8:	2100      	movs	r1, #0
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fbec 	bl	8008998 <memset>

	  data_received_flag = 1;  // Set flag to indicate data received
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <CDC_Receive_FS+0x58>)
 80081c2:	2201      	movs	r2, #1
 80081c4:	701a      	strb	r2, [r3, #0]

	  return (USBD_OK);
 80081c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	200006c4 	.word	0x200006c4
 80081d4:	20000260 	.word	0x20000260
 80081d8:	200006a0 	.word	0x200006a0

080081dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80081ec:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <CDC_Transmit_FS+0x48>)
 80081ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80081fe:	2301      	movs	r3, #1
 8008200:	e00b      	b.n	800821a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008202:	887b      	ldrh	r3, [r7, #2]
 8008204:	461a      	mov	r2, r3
 8008206:	6879      	ldr	r1, [r7, #4]
 8008208:	4806      	ldr	r0, [pc, #24]	; (8008224 <CDC_Transmit_FS+0x48>)
 800820a:	f7fe fdef 	bl	8006dec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800820e:	4805      	ldr	r0, [pc, #20]	; (8008224 <CDC_Transmit_FS+0x48>)
 8008210:	f7fe fe18 	bl	8006e44 <USBD_CDC_TransmitPacket>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	200006c4 	.word	0x200006c4

08008228 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2212      	movs	r2, #18
 8008238:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <USBD_FS_DeviceDescriptor+0x20>)
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000148 	.word	0x20000148

0800824c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	6039      	str	r1, [r7, #0]
 8008256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2204      	movs	r2, #4
 800825c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	bc80      	pop	{r7}
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	2000015c 	.word	0x2000015c

08008270 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	6039      	str	r1, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	4907      	ldr	r1, [pc, #28]	; (80082a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008286:	4808      	ldr	r0, [pc, #32]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008288:	f7ff fdf2 	bl	8007e70 <USBD_GetString>
 800828c:	e004      	b.n	8008298 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	4904      	ldr	r1, [pc, #16]	; (80082a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008292:	4805      	ldr	r0, [pc, #20]	; (80082a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008294:	f7ff fdec 	bl	8007e70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800829a:	4618      	mov	r0, r3
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20001188 	.word	0x20001188
 80082a8:	08008a60 	.word	0x08008a60

080082ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	4603      	mov	r3, r0
 80082b4:	6039      	str	r1, [r7, #0]
 80082b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4904      	ldr	r1, [pc, #16]	; (80082cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80082bc:	4804      	ldr	r0, [pc, #16]	; (80082d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80082be:	f7ff fdd7 	bl	8007e70 <USBD_GetString>
  return USBD_StrDesc;
 80082c2:	4b02      	ldr	r3, [pc, #8]	; (80082cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20001188 	.word	0x20001188
 80082d0:	08008a78 	.word	0x08008a78

080082d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	221a      	movs	r2, #26
 80082e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80082e6:	f000 f843 	bl	8008370 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80082ea:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20000160 	.word	0x20000160

080082f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	4603      	mov	r3, r0
 8008300:	6039      	str	r1, [r7, #0]
 8008302:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d105      	bne.n	8008316 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	4907      	ldr	r1, [pc, #28]	; (800832c <USBD_FS_ConfigStrDescriptor+0x34>)
 800830e:	4808      	ldr	r0, [pc, #32]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008310:	f7ff fdae 	bl	8007e70 <USBD_GetString>
 8008314:	e004      	b.n	8008320 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	4904      	ldr	r1, [pc, #16]	; (800832c <USBD_FS_ConfigStrDescriptor+0x34>)
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <USBD_FS_ConfigStrDescriptor+0x38>)
 800831c:	f7ff fda8 	bl	8007e70 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008320:	4b02      	ldr	r3, [pc, #8]	; (800832c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20001188 	.word	0x20001188
 8008330:	08008a8c 	.word	0x08008a8c

08008334 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d105      	bne.n	8008352 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	4907      	ldr	r1, [pc, #28]	; (8008368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800834a:	4808      	ldr	r0, [pc, #32]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800834c:	f7ff fd90 	bl	8007e70 <USBD_GetString>
 8008350:	e004      	b.n	800835c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4904      	ldr	r1, [pc, #16]	; (8008368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008356:	4805      	ldr	r0, [pc, #20]	; (800836c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008358:	f7ff fd8a 	bl	8007e70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800835c:	4b02      	ldr	r3, [pc, #8]	; (8008368 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20001188 	.word	0x20001188
 800836c:	08008a98 	.word	0x08008a98

08008370 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <Get_SerialNum+0x44>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800837c:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <Get_SerialNum+0x48>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <Get_SerialNum+0x4c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4413      	add	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d009      	beq.n	80083aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008396:	2208      	movs	r2, #8
 8008398:	4909      	ldr	r1, [pc, #36]	; (80083c0 <Get_SerialNum+0x50>)
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 f814 	bl	80083c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083a0:	2204      	movs	r2, #4
 80083a2:	4908      	ldr	r1, [pc, #32]	; (80083c4 <Get_SerialNum+0x54>)
 80083a4:	68b8      	ldr	r0, [r7, #8]
 80083a6:	f000 f80f 	bl	80083c8 <IntToUnicode>
  }
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	1ffff7e8 	.word	0x1ffff7e8
 80083b8:	1ffff7ec 	.word	0x1ffff7ec
 80083bc:	1ffff7f0 	.word	0x1ffff7f0
 80083c0:	20000162 	.word	0x20000162
 80083c4:	20000172 	.word	0x20000172

080083c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80083d6:	2300      	movs	r3, #0
 80083d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
 80083de:	e027      	b.n	8008430 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	0f1b      	lsrs	r3, r3, #28
 80083e4:	2b09      	cmp	r3, #9
 80083e6:	d80b      	bhi.n	8008400 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	0f1b      	lsrs	r3, r3, #28
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	005b      	lsls	r3, r3, #1
 80083f2:	4619      	mov	r1, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	440b      	add	r3, r1
 80083f8:	3230      	adds	r2, #48	; 0x30
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]
 80083fe:	e00a      	b.n	8008416 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	0f1b      	lsrs	r3, r3, #28
 8008404:	b2da      	uxtb	r2, r3
 8008406:	7dfb      	ldrb	r3, [r7, #23]
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	4619      	mov	r1, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	440b      	add	r3, r1
 8008410:	3237      	adds	r2, #55	; 0x37
 8008412:	b2d2      	uxtb	r2, r2
 8008414:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	3301      	adds	r3, #1
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	4413      	add	r3, r2
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	3301      	adds	r3, #1
 800842e:	75fb      	strb	r3, [r7, #23]
 8008430:	7dfa      	ldrb	r2, [r7, #23]
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	429a      	cmp	r2, r3
 8008436:	d3d3      	bcc.n	80083e0 <IntToUnicode+0x18>
  }
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr

08008444 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <HAL_PCD_MspInit+0x44>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d113      	bne.n	800847e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <HAL_PCD_MspInit+0x48>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	4a0c      	ldr	r2, [pc, #48]	; (800848c <HAL_PCD_MspInit+0x48>)
 800845c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008460:	61d3      	str	r3, [r2, #28]
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_PCD_MspInit+0x48>)
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800846e:	2200      	movs	r2, #0
 8008470:	2100      	movs	r1, #0
 8008472:	2014      	movs	r0, #20
 8008474:	f7f8 ff8f 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008478:	2014      	movs	r0, #20
 800847a:	f7f8 ffa8 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40005c00 	.word	0x40005c00
 800848c:	40021000 	.word	0x40021000

08008490 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7fe fdb1 	bl	800700e <USBD_LL_SetupStage>
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80084c6:	78fa      	ldrb	r2, [r7, #3]
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	00db      	lsls	r3, r3, #3
 80084d2:	440b      	add	r3, r1
 80084d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	78fb      	ldrb	r3, [r7, #3]
 80084dc:	4619      	mov	r1, r3
 80084de:	f7fe fde3 	bl	80070a8 <USBD_LL_DataOutStage>
}
 80084e2:	bf00      	nop
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b082      	sub	sp, #8
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	440b      	add	r3, r1
 800850a:	333c      	adds	r3, #60	; 0x3c
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	4619      	mov	r1, r3
 8008512:	f7fe fe3a 	bl	800718a <USBD_LL_DataInStage>
}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe ff4a 	bl	80073c6 <USBD_LL_SOF>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008542:	2301      	movs	r3, #1
 8008544:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d001      	beq.n	8008552 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800854e:	f7f8 f8a7 	bl	80006a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008558:	7bfa      	ldrb	r2, [r7, #15]
 800855a:	4611      	mov	r1, r2
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fefa 	bl	8007356 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008568:	4618      	mov	r0, r3
 800856a:	f7fe feb3 	bl	80072d4 <USBD_LL_Reset>
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fef4 	bl	8007374 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008594:	4b04      	ldr	r3, [pc, #16]	; (80085a8 <HAL_PCD_SuspendCallback+0x30>)
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	4a03      	ldr	r2, [pc, #12]	; (80085a8 <HAL_PCD_SuspendCallback+0x30>)
 800859a:	f043 0306 	orr.w	r3, r3, #6
 800859e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed00 	.word	0xe000ed00

080085ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe feee 	bl	800739c <USBD_LL_Resume>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80085d0:	4a28      	ldr	r2, [pc, #160]	; (8008674 <USBD_LL_Init+0xac>)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a26      	ldr	r2, [pc, #152]	; (8008674 <USBD_LL_Init+0xac>)
 80085dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80085e0:	4b24      	ldr	r3, [pc, #144]	; (8008674 <USBD_LL_Init+0xac>)
 80085e2:	4a25      	ldr	r2, [pc, #148]	; (8008678 <USBD_LL_Init+0xb0>)
 80085e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80085e6:	4b23      	ldr	r3, [pc, #140]	; (8008674 <USBD_LL_Init+0xac>)
 80085e8:	2208      	movs	r2, #8
 80085ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80085ec:	4b21      	ldr	r3, [pc, #132]	; (8008674 <USBD_LL_Init+0xac>)
 80085ee:	2202      	movs	r2, #2
 80085f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80085f2:	4b20      	ldr	r3, [pc, #128]	; (8008674 <USBD_LL_Init+0xac>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80085f8:	4b1e      	ldr	r3, [pc, #120]	; (8008674 <USBD_LL_Init+0xac>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80085fe:	4b1d      	ldr	r3, [pc, #116]	; (8008674 <USBD_LL_Init+0xac>)
 8008600:	2200      	movs	r2, #0
 8008602:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008604:	481b      	ldr	r0, [pc, #108]	; (8008674 <USBD_LL_Init+0xac>)
 8008606:	f7f9 fbe5 	bl	8001dd4 <HAL_PCD_Init>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008610:	f7f8 f846 	bl	80006a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800861a:	2318      	movs	r3, #24
 800861c:	2200      	movs	r2, #0
 800861e:	2100      	movs	r1, #0
 8008620:	f7fb f904 	bl	800382c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800862a:	2358      	movs	r3, #88	; 0x58
 800862c:	2200      	movs	r2, #0
 800862e:	2180      	movs	r1, #128	; 0x80
 8008630:	f7fb f8fc 	bl	800382c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800863a:	23c0      	movs	r3, #192	; 0xc0
 800863c:	2200      	movs	r2, #0
 800863e:	2181      	movs	r1, #129	; 0x81
 8008640:	f7fb f8f4 	bl	800382c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800864a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800864e:	2200      	movs	r2, #0
 8008650:	2101      	movs	r1, #1
 8008652:	f7fb f8eb 	bl	800382c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800865c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008660:	2200      	movs	r2, #0
 8008662:	2182      	movs	r1, #130	; 0x82
 8008664:	f7fb f8e2 	bl	800382c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20001388 	.word	0x20001388
 8008678:	40005c00 	.word	0x40005c00

0800867c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008692:	4618      	mov	r0, r3
 8008694:	f7f9 fc9d 	bl	8001fd2 <HAL_PCD_Start>
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 f94e 	bl	8008940 <USBD_Get_USB_Status>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b084      	sub	sp, #16
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	4608      	mov	r0, r1
 80086bc:	4611      	mov	r1, r2
 80086be:	461a      	mov	r2, r3
 80086c0:	4603      	mov	r3, r0
 80086c2:	70fb      	strb	r3, [r7, #3]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70bb      	strb	r3, [r7, #2]
 80086c8:	4613      	mov	r3, r2
 80086ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80086da:	78bb      	ldrb	r3, [r7, #2]
 80086dc:	883a      	ldrh	r2, [r7, #0]
 80086de:	78f9      	ldrb	r1, [r7, #3]
 80086e0:	f7f9 fdf2 	bl	80022c8 <HAL_PCD_EP_Open>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 f928 	bl	8008940 <USBD_Get_USB_Status>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008718:	78fa      	ldrb	r2, [r7, #3]
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f7f9 fe30 	bl	8002382 <HAL_PCD_EP_Close>
 8008722:	4603      	mov	r3, r0
 8008724:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	4618      	mov	r0, r3
 800872a:	f000 f909 	bl	8008940 <USBD_Get_USB_Status>
 800872e:	4603      	mov	r3, r0
 8008730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008732:	7bbb      	ldrb	r3, [r7, #14]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008756:	78fa      	ldrb	r2, [r7, #3]
 8008758:	4611      	mov	r1, r2
 800875a:	4618      	mov	r0, r3
 800875c:	f7f9 fed8 	bl	8002510 <HAL_PCD_EP_SetStall>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f8ea 	bl	8008940 <USBD_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008770:	7bbb      	ldrb	r3, [r7, #14]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008794:	78fa      	ldrb	r2, [r7, #3]
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f7f9 ff19 	bl	80025d0 <HAL_PCD_EP_ClrStall>
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f8cb 	bl	8008940 <USBD_Get_USB_Status>
 80087aa:	4603      	mov	r3, r0
 80087ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	da0c      	bge.n	80087ee <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087da:	68f9      	ldr	r1, [r7, #12]
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	4613      	mov	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	440b      	add	r3, r1
 80087e8:	3302      	adds	r3, #2
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	e00b      	b.n	8008806 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f4:	68f9      	ldr	r1, [r7, #12]
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	440b      	add	r3, r1
 8008800:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008804:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800882a:	78fa      	ldrb	r2, [r7, #3]
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7f9 fd25 	bl	800227e <HAL_PCD_SetAddress>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4618      	mov	r0, r3
 800883c:	f000 f880 	bl	8008940 <USBD_Get_USB_Status>
 8008840:	4603      	mov	r3, r0
 8008842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008844:	7bbb      	ldrb	r3, [r7, #14]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	461a      	mov	r2, r3
 800885a:	460b      	mov	r3, r1
 800885c:	72fb      	strb	r3, [r7, #11]
 800885e:	4613      	mov	r3, r2
 8008860:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008870:	893b      	ldrh	r3, [r7, #8]
 8008872:	7af9      	ldrb	r1, [r7, #11]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	f7f9 fe14 	bl	80024a2 <HAL_PCD_EP_Transmit>
 800887a:	4603      	mov	r3, r0
 800887c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f85d 	bl	8008940 <USBD_Get_USB_Status>
 8008886:	4603      	mov	r3, r0
 8008888:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800888a:	7dbb      	ldrb	r3, [r7, #22]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	461a      	mov	r2, r3
 80088a0:	460b      	mov	r3, r1
 80088a2:	72fb      	strb	r3, [r7, #11]
 80088a4:	4613      	mov	r3, r2
 80088a6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088b6:	893b      	ldrh	r3, [r7, #8]
 80088b8:	7af9      	ldrb	r1, [r7, #11]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	f7f9 fda9 	bl	8002412 <HAL_PCD_EP_Receive>
 80088c0:	4603      	mov	r3, r0
 80088c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f83a 	bl	8008940 <USBD_Get_USB_Status>
 80088cc:	4603      	mov	r3, r0
 80088ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3718      	adds	r7, #24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f9 fdbf 	bl	8002474 <HAL_PCD_EP_GetRxCount>
 80088f6:	4603      	mov	r3, r0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008908:	4b02      	ldr	r3, [pc, #8]	; (8008914 <USBD_static_malloc+0x14>)
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr
 8008914:	20001678 	.word	0x20001678

08008918 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]

}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	bc80      	pop	{r7}
 8008928:	4770      	bx	lr

0800892a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008936:	bf00      	nop
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	bc80      	pop	{r7}
 800893e:	4770      	bx	lr

08008940 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d817      	bhi.n	8008984 <USBD_Get_USB_Status+0x44>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <USBD_Get_USB_Status+0x1c>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	0800896d 	.word	0x0800896d
 8008960:	08008973 	.word	0x08008973
 8008964:	08008979 	.word	0x08008979
 8008968:	0800897f 	.word	0x0800897f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
    break;
 8008970:	e00b      	b.n	800898a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008972:	2302      	movs	r3, #2
 8008974:	73fb      	strb	r3, [r7, #15]
    break;
 8008976:	e008      	b.n	800898a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008978:	2301      	movs	r3, #1
 800897a:	73fb      	strb	r3, [r7, #15]
    break;
 800897c:	e005      	b.n	800898a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800897e:	2302      	movs	r3, #2
 8008980:	73fb      	strb	r3, [r7, #15]
    break;
 8008982:	e002      	b.n	800898a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008984:	2302      	movs	r3, #2
 8008986:	73fb      	strb	r3, [r7, #15]
    break;
 8008988:	bf00      	nop
  }
  return usb_status;
 800898a:	7bfb      	ldrb	r3, [r7, #15]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bc80      	pop	{r7}
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop

08008998 <memset>:
 8008998:	4603      	mov	r3, r0
 800899a:	4402      	add	r2, r0
 800899c:	4293      	cmp	r3, r2
 800899e:	d100      	bne.n	80089a2 <memset+0xa>
 80089a0:	4770      	bx	lr
 80089a2:	f803 1b01 	strb.w	r1, [r3], #1
 80089a6:	e7f9      	b.n	800899c <memset+0x4>

080089a8 <strncmp>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	b16a      	cbz	r2, 80089c8 <strncmp+0x20>
 80089ac:	3901      	subs	r1, #1
 80089ae:	1884      	adds	r4, r0, r2
 80089b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d103      	bne.n	80089c4 <strncmp+0x1c>
 80089bc:	42a0      	cmp	r0, r4
 80089be:	d001      	beq.n	80089c4 <strncmp+0x1c>
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	d1f5      	bne.n	80089b0 <strncmp+0x8>
 80089c4:	1ad0      	subs	r0, r2, r3
 80089c6:	bd10      	pop	{r4, pc}
 80089c8:	4610      	mov	r0, r2
 80089ca:	e7fc      	b.n	80089c6 <strncmp+0x1e>

080089cc <__libc_init_array>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	2600      	movs	r6, #0
 80089d0:	4d0c      	ldr	r5, [pc, #48]	; (8008a04 <__libc_init_array+0x38>)
 80089d2:	4c0d      	ldr	r4, [pc, #52]	; (8008a08 <__libc_init_array+0x3c>)
 80089d4:	1b64      	subs	r4, r4, r5
 80089d6:	10a4      	asrs	r4, r4, #2
 80089d8:	42a6      	cmp	r6, r4
 80089da:	d109      	bne.n	80089f0 <__libc_init_array+0x24>
 80089dc:	f000 f828 	bl	8008a30 <_init>
 80089e0:	2600      	movs	r6, #0
 80089e2:	4d0a      	ldr	r5, [pc, #40]	; (8008a0c <__libc_init_array+0x40>)
 80089e4:	4c0a      	ldr	r4, [pc, #40]	; (8008a10 <__libc_init_array+0x44>)
 80089e6:	1b64      	subs	r4, r4, r5
 80089e8:	10a4      	asrs	r4, r4, #2
 80089ea:	42a6      	cmp	r6, r4
 80089ec:	d105      	bne.n	80089fa <__libc_init_array+0x2e>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f4:	4798      	blx	r3
 80089f6:	3601      	adds	r6, #1
 80089f8:	e7ee      	b.n	80089d8 <__libc_init_array+0xc>
 80089fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fe:	4798      	blx	r3
 8008a00:	3601      	adds	r6, #1
 8008a02:	e7f2      	b.n	80089ea <__libc_init_array+0x1e>
 8008a04:	08008ad4 	.word	0x08008ad4
 8008a08:	08008ad4 	.word	0x08008ad4
 8008a0c:	08008ad4 	.word	0x08008ad4
 8008a10:	08008ad8 	.word	0x08008ad8

08008a14 <memcpy>:
 8008a14:	440a      	add	r2, r1
 8008a16:	4291      	cmp	r1, r2
 8008a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a1c:	d100      	bne.n	8008a20 <memcpy+0xc>
 8008a1e:	4770      	bx	lr
 8008a20:	b510      	push	{r4, lr}
 8008a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a26:	4291      	cmp	r1, r2
 8008a28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a2c:	d1f9      	bne.n	8008a22 <memcpy+0xe>
 8008a2e:	bd10      	pop	{r4, pc}

08008a30 <_init>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr

08008a3c <_fini>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr
