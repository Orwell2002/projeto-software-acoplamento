
tcc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5d4  0800b5d4  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5d4  0800b5d4  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5d4  0800b5d4  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d8  0800b5d8  0001b5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800b5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015dc  200001cc  0800b7a8  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017a8  0800b7a8  000217a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   000169fb  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b2a  00000000  00000000  00036c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  0003a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103f  00000000  00000000  0003bc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b545  00000000  00000000  0003ccb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b772  00000000  00000000  000581fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094bd4  00000000  00000000  0007396e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e98  00000000  00000000  00108544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0010e3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b498 	.word	0x0800b498

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	0800b498 	.word	0x0800b498

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <Reset_All_PCF8574>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Função para resetar todos os PCF8574
void Reset_All_PCF8574(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af02      	add	r7, sp, #8
    uint8_t resetValue = 0x00;  // Desligar todos os LEDs
 8000756:	2300      	movs	r3, #0
 8000758:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = 0; i < ADC_BUFFER_SIZE; i++)
 800075a:	2300      	movs	r3, #0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	e020      	b.n	80007a2 <Reset_All_PCF8574+0x52>
    {
        HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, PCF8574_BASE_ADDRESS + i, &resetValue, 1, HAL_MAX_DELAY);
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	b29b      	uxth	r3, r3
 8000764:	3340      	adds	r3, #64	; 0x40
 8000766:	b299      	uxth	r1, r3
 8000768:	1d7a      	adds	r2, r7, #5
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	4810      	ldr	r0, [pc, #64]	; (80007b4 <Reset_All_PCF8574+0x64>)
 8000774:	f002 fc88 	bl	8003088 <HAL_I2C_Master_Transmit>
 8000778:	4603      	mov	r3, r0
 800077a:	71bb      	strb	r3, [r7, #6]
        if (status != HAL_OK)
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d00c      	beq.n	800079c <Reset_All_PCF8574+0x4c>
        {
            // Opcional: Adicione um log ou tratamento de erro
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <Reset_All_PCF8574+0x68>)
 8000788:	f002 fb20 	bl	8002dcc <HAL_GPIO_TogglePin>
            HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f001 f82b 	bl	80017e8 <HAL_Delay>
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <Reset_All_PCF8574+0x68>)
 8000798:	f002 fb18 	bl	8002dcc <HAL_GPIO_TogglePin>
    for (uint8_t i = 0; i < ADC_BUFFER_SIZE; i++)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	3301      	adds	r3, #1
 80007a0:	71fb      	strb	r3, [r7, #7]
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b07      	cmp	r3, #7
 80007a6:	d9db      	bls.n	8000760 <Reset_All_PCF8574+0x10>
        }
    }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000028c 	.word	0x2000028c
 80007b8:	40011000 	.word	0x40011000

080007bc <Reset_Matrix>:

// Função para resetar matriz de adjascencia antes de receber nova
void Reset_Matrix(void) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
    for(uint8_t i = 0; i < ADC_BUFFER_SIZE; i++) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	e014      	b.n	80007f2 <Reset_Matrix+0x36>
        for(uint8_t j = 0; j < ADC_BUFFER_SIZE; j++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	71bb      	strb	r3, [r7, #6]
 80007cc:	e00b      	b.n	80007e6 <Reset_Matrix+0x2a>
            matrix[i][j] = 0;
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	79bb      	ldrb	r3, [r7, #6]
 80007d2:	490c      	ldr	r1, [pc, #48]	; (8000804 <Reset_Matrix+0x48>)
 80007d4:	00d2      	lsls	r2, r2, #3
 80007d6:	4413      	add	r3, r2
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(uint8_t j = 0; j < ADC_BUFFER_SIZE; j++) {
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	3301      	adds	r3, #1
 80007e4:	71bb      	strb	r3, [r7, #6]
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	d9f0      	bls.n	80007ce <Reset_Matrix+0x12>
    for(uint8_t i = 0; i < ADC_BUFFER_SIZE; i++) {
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	3301      	adds	r3, #1
 80007f0:	71fb      	strb	r3, [r7, #7]
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d9e7      	bls.n	80007c8 <Reset_Matrix+0xc>
        }
    }
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	20000344 	.word	0x20000344

08000808 <Print_Matrix_USB>:

// Função para imprimir matriz na serial (usada no debug)
void Print_Matrix_USB(void) {
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b0a5      	sub	sp, #148	; 0x94
 800080c:	af00      	add	r7, sp, #0
    char line_buffer[128]; // Buffer para armazenar uma linha da matriz
    CDC_Transmit_FS((uint8_t *)"\n", 1); // Linha vazia para separação
 800080e:	2101      	movs	r1, #1
 8000810:	4832      	ldr	r0, [pc, #200]	; (80008dc <Print_Matrix_USB+0xd4>)
 8000812:	f009 fdb1 	bl	800a378 <CDC_Transmit_FS>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800081c:	e050      	b.n	80008c0 <Print_Matrix_USB+0xb8>
        int pos = 0; // Posicionamento no buffer
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (uint8_t j = 0; j < matrixSize; j++) {
 8000824:	2300      	movs	r3, #0
 8000826:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800082a:	e020      	b.n	800086e <Print_Matrix_USB+0x66>
            pos += sprintf(&line_buffer[pos], "%d ", (int)matrix[i][j]); // Concatena valores na linha
 800082c:	1d3a      	adds	r2, r7, #4
 800082e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000832:	18d4      	adds	r4, r2, r3
 8000834:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000838:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800083c:	4928      	ldr	r1, [pc, #160]	; (80008e0 <Print_Matrix_USB+0xd8>)
 800083e:	00d2      	lsls	r2, r2, #3
 8000840:	4413      	add	r3, r2
 8000842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff ff5c 	bl	8000704 <__aeabi_f2iz>
 800084c:	4603      	mov	r3, r0
 800084e:	461a      	mov	r2, r3
 8000850:	4924      	ldr	r1, [pc, #144]	; (80008e4 <Print_Matrix_USB+0xdc>)
 8000852:	4620      	mov	r0, r4
 8000854:	f00a f96e 	bl	800ab34 <siprintf>
 8000858:	4602      	mov	r2, r0
 800085a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800085e:	4413      	add	r3, r2
 8000860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (uint8_t j = 0; j < matrixSize; j++) {
 8000864:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000868:	3301      	adds	r3, #1
 800086a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800086e:	4b1e      	ldr	r3, [pc, #120]	; (80008e8 <Print_Matrix_USB+0xe0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000876:	429a      	cmp	r2, r3
 8000878:	d3d8      	bcc.n	800082c <Print_Matrix_USB+0x24>
        }
        line_buffer[pos++] = '\n'; // Adiciona quebra de linha
 800087a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8000884:	3390      	adds	r3, #144	; 0x90
 8000886:	443b      	add	r3, r7
 8000888:	220a      	movs	r2, #10
 800088a:	f803 2c8c 	strb.w	r2, [r3, #-140]
        line_buffer[pos] = '\0';   // Finaliza a string
 800088e:	1d3a      	adds	r2, r7, #4
 8000890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000894:	4413      	add	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
        CDC_Transmit_FS((uint8_t *)line_buffer, strlen(line_buffer)); // Envia a linha via USB
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fc55 	bl	800014c <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 fd64 	bl	800a378 <CDC_Transmit_FS>
        HAL_Delay(50); // Pequeno delay para evitar sobrecarga de dados no Hercules
 80008b0:	2032      	movs	r0, #50	; 0x32
 80008b2:	f000 ff99 	bl	80017e8 <HAL_Delay>
    for (uint8_t i = 0; i < matrixSize; i++) {
 80008b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80008ba:	3301      	adds	r3, #1
 80008bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <Print_Matrix_USB+0xe0>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3a8      	bcc.n	800081e <Print_Matrix_USB+0x16>
    }
    CDC_Transmit_FS((uint8_t *)"\n", 1); // Linha vazia para separação
 80008cc:	2101      	movs	r1, #1
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <Print_Matrix_USB+0xd4>)
 80008d0:	f009 fd52 	bl	800a378 <CDC_Transmit_FS>
}
 80008d4:	bf00      	nop
 80008d6:	3794      	adds	r7, #148	; 0x94
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	0800b4b0 	.word	0x0800b4b0
 80008e0:	20000344 	.word	0x20000344
 80008e4:	0800b4b4 	.word	0x0800b4b4
 80008e8:	20000444 	.word	0x20000444

080008ec <Send_ADC_USB>:
    return HAL_I2C_IsDeviceReady(&hi2c1, PCF8574_BASE_ADDRESS + i, 3, HAL_MAX_DELAY);
}

// Envia dados do ADC pela serial
void Send_ADC_USB(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
    uint32_t current_timestamp = HAL_GetTick();
 80008f2:	f000 ff6f 	bl	80017d4 <HAL_GetTick>
 80008f6:	6238      	str	r0, [r7, #32]
    uint32_t delta_time = current_timestamp - last_timestamp;
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <Send_ADC_USB+0xb4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a3a      	ldr	r2, [r7, #32]
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]

    // Tamanho do buffer: ADC (8 canais * 3 bytes) + delta_time (4 bytes)
    uint8_t usb_tx_buffer[ADC_BUFFER_SIZE * 3 + 4];

    // Adiciona os dados dos canais ADC
    for (int i = 0; i < ADC_BUFFER_SIZE; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
 8000906:	e02a      	b.n	800095e <Send_ADC_USB+0x72>
    {
        usb_tx_buffer[i * 3] = i;  // ID do canal (0-7)
 8000908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800090a:	4613      	mov	r3, r2
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	4413      	add	r3, r2
 8000910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	3328      	adds	r3, #40	; 0x28
 8000916:	443b      	add	r3, r7
 8000918:	f803 2c28 	strb.w	r2, [r3, #-40]
        usb_tx_buffer[i * 3 + 1] = adc_buffer[i] & 0xFF;  // LSB do valor do ADC
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <Send_ADC_USB+0xb8>)
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000926:	4613      	mov	r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4413      	add	r3, r2
 800092c:	3301      	adds	r3, #1
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	3328      	adds	r3, #40	; 0x28
 8000932:	443b      	add	r3, r7
 8000934:	f803 2c28 	strb.w	r2, [r3, #-40]
        usb_tx_buffer[i * 3 + 2] = (adc_buffer[i] >> 8) & 0xFF;  // MSB do valor do ADC
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <Send_ADC_USB+0xb8>)
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	b299      	uxth	r1, r3
 8000944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000946:	4613      	mov	r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	4413      	add	r3, r2
 800094c:	3302      	adds	r3, #2
 800094e:	b2ca      	uxtb	r2, r1
 8000950:	3328      	adds	r3, #40	; 0x28
 8000952:	443b      	add	r3, r7
 8000954:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (int i = 0; i < ADC_BUFFER_SIZE; i++)
 8000958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095a:	3301      	adds	r3, #1
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	2b07      	cmp	r3, #7
 8000962:	ddd1      	ble.n	8000908 <Send_ADC_USB+0x1c>
    }

    // Adiciona o delta_time nos últimos 4 bytes
    usb_tx_buffer[ADC_BUFFER_SIZE * 3] = delta_time & 0xFF;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	763b      	strb	r3, [r7, #24]
    usb_tx_buffer[ADC_BUFFER_SIZE * 3 + 1] = (delta_time >> 8) & 0xFF;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	0a1b      	lsrs	r3, r3, #8
 800096e:	b2db      	uxtb	r3, r3
 8000970:	767b      	strb	r3, [r7, #25]
    usb_tx_buffer[ADC_BUFFER_SIZE * 3 + 2] = (delta_time >> 16) & 0xFF;
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	b2db      	uxtb	r3, r3
 8000978:	76bb      	strb	r3, [r7, #26]
    usb_tx_buffer[ADC_BUFFER_SIZE * 3 + 3] = (delta_time >> 24) & 0xFF;
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	0e1b      	lsrs	r3, r3, #24
 800097e:	b2db      	uxtb	r3, r3
 8000980:	76fb      	strb	r3, [r7, #27]

    // Envia o pacote via USB
    CDC_Transmit_FS(usb_tx_buffer, sizeof(usb_tx_buffer));
 8000982:	463b      	mov	r3, r7
 8000984:	211c      	movs	r1, #28
 8000986:	4618      	mov	r0, r3
 8000988:	f009 fcf6 	bl	800a378 <CDC_Transmit_FS>

    // Atualiza o timestamp do último envio
    last_timestamp = current_timestamp;
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <Send_ADC_USB+0xb4>)
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	6013      	str	r3, [r2, #0]
    HAL_Delay(10);
 8000992:	200a      	movs	r0, #10
 8000994:	f000 ff28 	bl	80017e8 <HAL_Delay>
}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000328 	.word	0x20000328
 80009a4:	20000330 	.word	0x20000330

080009a8 <Process_Byte>:

// Função para processar um byte recebido
void Process_Byte(uint8_t byte)
{
 80009a8:	b5b0      	push	{r4, r5, r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
    static uint8_t row = 0;
    static uint8_t col = 0;

    // Verificar comandos de modo primeiro
    if (byte == START_FREQ_CMD) {
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2bf0      	cmp	r3, #240	; 0xf0
 80009b6:	d123      	bne.n	8000a00 <Process_Byte+0x58>
        operating_mode = MODE_FREQUENCY;
 80009b8:	4b57      	ldr	r3, [pc, #348]	; (8000b18 <Process_Byte+0x170>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	701a      	strb	r2, [r3, #0]
        // Iniciar timer e ADC2 para medição de frequência
        HAL_TIM_Base_Start(&htim3);
 80009be:	4857      	ldr	r0, [pc, #348]	; (8000b1c <Process_Byte+0x174>)
 80009c0:	f005 f92a 	bl	8005c18 <HAL_TIM_Base_Start>
        HAL_ADC_Start_IT(&hadc2);
 80009c4:	4856      	ldr	r0, [pc, #344]	; (8000b20 <Process_Byte+0x178>)
 80009c6:	f001 f8b9 	bl	8001b3c <HAL_ADC_Start_IT>
        // Enviar confirmação
        uint8_t msg[] = "Starting frequency measurement mode\r\n";
 80009ca:	4b56      	ldr	r3, [pc, #344]	; (8000b24 <Process_Byte+0x17c>)
 80009cc:	f107 0408 	add.w	r4, r7, #8
 80009d0:	461d      	mov	r5, r3
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009de:	6020      	str	r0, [r4, #0]
 80009e0:	3404      	adds	r4, #4
 80009e2:	8021      	strh	r1, [r4, #0]
        CDC_Transmit_FS(msg, strlen((char*)msg));
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fbaf 	bl	800014c <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f009 fcbd 	bl	800a378 <CDC_Transmit_FS>
 80009fe:	e087      	b.n	8000b10 <Process_Byte+0x168>
        return;
    }
    else if (byte == STOP_FREQ_CMD) {
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2bf1      	cmp	r3, #241	; 0xf1
 8000a04:	d123      	bne.n	8000a4e <Process_Byte+0xa6>
        operating_mode = MODE_MATRIX;
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <Process_Byte+0x170>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
        // Parar timer e ADC2
        HAL_TIM_Base_Stop(&htim3);
 8000a0c:	4843      	ldr	r0, [pc, #268]	; (8000b1c <Process_Byte+0x174>)
 8000a0e:	f005 f94d 	bl	8005cac <HAL_TIM_Base_Stop>
        HAL_ADC_Stop_IT(&hadc2);
 8000a12:	4843      	ldr	r0, [pc, #268]	; (8000b20 <Process_Byte+0x178>)
 8000a14:	f001 f948 	bl	8001ca8 <HAL_ADC_Stop_IT>
        // Enviar confirmação
        uint8_t msg[] = "Stopping frequency measurement mode\r\n";
 8000a18:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <Process_Byte+0x180>)
 8000a1a:	f107 0408 	add.w	r4, r7, #8
 8000a1e:	461d      	mov	r5, r3
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a2c:	6020      	str	r0, [r4, #0]
 8000a2e:	3404      	adds	r4, #4
 8000a30:	8021      	strh	r1, [r4, #0]
        CDC_Transmit_FS(msg, strlen((char*)msg));
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fb88 	bl	800014c <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f009 fc96 	bl	800a378 <CDC_Transmit_FS>
 8000a4c:	e060      	b.n	8000b10 <Process_Byte+0x168>
        return;
    }

    // Processamento normal da matriz se estiver no modo matriz
    if (operating_mode == MODE_MATRIX) {
 8000a4e:	4b32      	ldr	r3, [pc, #200]	; (8000b18 <Process_Byte+0x170>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d15b      	bne.n	8000b10 <Process_Byte+0x168>
        if (byte == START_MARKER) {
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b3c      	cmp	r3, #60	; 0x3c
 8000a5c:	d10b      	bne.n	8000a76 <Process_Byte+0xce>
            Reset_Matrix();
 8000a5e:	f7ff fead 	bl	80007bc <Reset_Matrix>
            row = 0;
 8000a62:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <Process_Byte+0x184>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
            col = 0;
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <Process_Byte+0x188>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
            receivingData = 1;
 8000a6e:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <Process_Byte+0x18c>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
            return;
 8000a74:	e04c      	b.n	8000b10 <Process_Byte+0x168>
        }

        if (byte == END_MARKER) {
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b3e      	cmp	r3, #62	; 0x3e
 8000a7a:	d10c      	bne.n	8000a96 <Process_Byte+0xee>
            receivingData = 0;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <Process_Byte+0x18c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
            dataComplete = 1;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <Process_Byte+0x190>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
            matrixSize = row + 1;
 8000a88:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <Process_Byte+0x184>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <Process_Byte+0x194>)
 8000a92:	701a      	strb	r2, [r3, #0]
            return;
 8000a94:	e03c      	b.n	8000b10 <Process_Byte+0x168>
        }

        if (receivingData) {
 8000a96:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <Process_Byte+0x18c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d037      	beq.n	8000b10 <Process_Byte+0x168>
            if (byte == '1') {
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b31      	cmp	r3, #49	; 0x31
 8000aa4:	d10d      	bne.n	8000ac2 <Process_Byte+0x11a>
                matrix[row][col] = 1;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <Process_Byte+0x184>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <Process_Byte+0x188>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <Process_Byte+0x198>)
 8000ab4:	00c3      	lsls	r3, r0, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000abc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ac0:	e026      	b.n	8000b10 <Process_Byte+0x168>
            } else if (byte == '0') {
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b30      	cmp	r3, #48	; 0x30
 8000ac6:	d10d      	bne.n	8000ae4 <Process_Byte+0x13c>
                matrix[row][col] = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <Process_Byte+0x184>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <Process_Byte+0x188>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <Process_Byte+0x198>)
 8000ad6:	00c3      	lsls	r3, r0, #3
 8000ad8:	440b      	add	r3, r1
 8000ada:	f04f 0100 	mov.w	r1, #0
 8000ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ae2:	e015      	b.n	8000b10 <Process_Byte+0x168>
            } else if (byte == ',') {
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b2c      	cmp	r3, #44	; 0x2c
 8000ae8:	d106      	bne.n	8000af8 <Process_Byte+0x150>
                col++;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <Process_Byte+0x188>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <Process_Byte+0x188>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e00b      	b.n	8000b10 <Process_Byte+0x168>
            } else if (byte == ';') {
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b3b      	cmp	r3, #59	; 0x3b
 8000afc:	d108      	bne.n	8000b10 <Process_Byte+0x168>
                row++;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <Process_Byte+0x184>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <Process_Byte+0x184>)
 8000b08:	701a      	strb	r2, [r3, #0]
                col = 0;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <Process_Byte+0x188>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bdb0      	pop	{r4, r5, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000445 	.word	0x20000445
 8000b1c:	200002e0 	.word	0x200002e0
 8000b20:	20000218 	.word	0x20000218
 8000b24:	0800b4b8 	.word	0x0800b4b8
 8000b28:	0800b4e0 	.word	0x0800b4e0
 8000b2c:	20000479 	.word	0x20000479
 8000b30:	2000047a 	.word	0x2000047a
 8000b34:	2000032d 	.word	0x2000032d
 8000b38:	2000032c 	.word	0x2000032c
 8000b3c:	20000444 	.word	0x20000444
 8000b40:	20000344 	.word	0x20000344

08000b44 <Calculate_Average_Frequency>:

// Função para cálculo de média móvel da frequência
float Calculate_Average_Frequency(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
    float sum = 0;
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < FREQ_BUFFER_SIZE; i++) {
 8000b50:	2300      	movs	r3, #0
 8000b52:	70fb      	strb	r3, [r7, #3]
 8000b54:	e00c      	b.n	8000b70 <Calculate_Average_Frequency+0x2c>
        sum += frequency_buffer[i];
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <Calculate_Average_Frequency+0x44>)
 8000b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fb01 	bl	8000168 <__addsf3>
 8000b66:	4603      	mov	r3, r0
 8000b68:	607b      	str	r3, [r7, #4]
    for(uint8_t i = 0; i < FREQ_BUFFER_SIZE; i++) {
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	70fb      	strb	r3, [r7, #3]
 8000b70:	78fb      	ldrb	r3, [r7, #3]
 8000b72:	2b09      	cmp	r3, #9
 8000b74:	d9ef      	bls.n	8000b56 <Calculate_Average_Frequency+0x12>
    }
    return sum / FREQ_BUFFER_SIZE;
 8000b76:	4905      	ldr	r1, [pc, #20]	; (8000b8c <Calculate_Average_Frequency+0x48>)
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff fcb1 	bl	80004e0 <__aeabi_fdiv>
 8000b7e:	4603      	mov	r3, r0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000450 	.word	0x20000450
 8000b8c:	41200000 	.word	0x41200000

08000b90 <Update_I2C_Outputs>:

// Função para atualizar as saídas I2C baseada na matriz
void Update_I2C_Outputs(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af02      	add	r7, sp, #8
	Print_Matrix_USB(); // Chama a função para imprimir a matriz na serial
 8000b96:	f7ff fe37 	bl	8000808 <Print_Matrix_USB>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e035      	b.n	8000c0c <Update_I2C_Outputs+0x7c>
        uint8_t outputByte = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]

        // Converte cada linha da matriz em um byte para o PCF8574
        for (uint8_t j = 0; j < matrixSize; j++) {
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73bb      	strb	r3, [r7, #14]
 8000ba8:	e01c      	b.n	8000be4 <Update_I2C_Outputs+0x54>
            if (matrix[i][j]) {
 8000baa:	7bfa      	ldrb	r2, [r7, #15]
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	4931      	ldr	r1, [pc, #196]	; (8000c74 <Update_I2C_Outputs+0xe4>)
 8000bb0:	00d2      	lsls	r2, r2, #3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bb8:	f04f 0100 	mov.w	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd6f 	bl	80006a0 <__aeabi_fcmpeq>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d10a      	bne.n	8000bde <Update_I2C_Outputs+0x4e>
                outputByte |= (1 << j);
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	2201      	movs	r2, #1
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	71fb      	strb	r3, [r7, #7]
        for (uint8_t j = 0; j < matrixSize; j++) {
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	3301      	adds	r3, #1
 8000be2:	73bb      	strb	r3, [r7, #14]
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <Update_I2C_Outputs+0xe8>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	7bba      	ldrb	r2, [r7, #14]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3dd      	bcc.n	8000baa <Update_I2C_Outputs+0x1a>
            }
        }

        // Envia o byte para o PCF8574 correspondente
        HAL_I2C_Master_Transmit(&hi2c1, PCF8574_BASE_ADDRESS + i, &outputByte, 1, HAL_MAX_DELAY);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	3340      	adds	r3, #64	; 0x40
 8000bf4:	b299      	uxth	r1, r3
 8000bf6:	1dfa      	adds	r2, r7, #7
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	481e      	ldr	r0, [pc, #120]	; (8000c7c <Update_I2C_Outputs+0xec>)
 8000c02:	f002 fa41 	bl	8003088 <HAL_I2C_Master_Transmit>
    for (uint8_t i = 0; i < matrixSize; i++) {
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <Update_I2C_Outputs+0xe8>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3c4      	bcc.n	8000ba0 <Update_I2C_Outputs+0x10>
    }

    // Piscar LED para indicação
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4819      	ldr	r0, [pc, #100]	; (8000c80 <Update_I2C_Outputs+0xf0>)
 8000c1c:	f002 f8d6 	bl	8002dcc <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 8000c20:	2032      	movs	r0, #50	; 0x32
 8000c22:	f000 fde1 	bl	80017e8 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2a:	4815      	ldr	r0, [pc, #84]	; (8000c80 <Update_I2C_Outputs+0xf0>)
 8000c2c:	f002 f8ce 	bl	8002dcc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c30:	2064      	movs	r0, #100	; 0x64
 8000c32:	f000 fdd9 	bl	80017e8 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	4811      	ldr	r0, [pc, #68]	; (8000c80 <Update_I2C_Outputs+0xf0>)
 8000c3c:	f002 f8c6 	bl	8002dcc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f000 fdd1 	bl	80017e8 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <Update_I2C_Outputs+0xf0>)
 8000c4c:	f002 f8be 	bl	8002dcc <HAL_GPIO_TogglePin>

    // Envia confirmação pela USB
    uint8_t ack[] = "ACK\n";
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <Update_I2C_Outputs+0xf4>)
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	7019      	strb	r1, [r3, #0]
    CDC_Transmit_FS(ack, 5);
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2105      	movs	r1, #5
 8000c66:	4618      	mov	r0, r3
 8000c68:	f009 fb86 	bl	800a378 <CDC_Transmit_FS>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000344 	.word	0x20000344
 8000c78:	20000444 	.word	0x20000444
 8000c7c:	2000028c 	.word	0x2000028c
 8000c80:	40011000 	.word	0x40011000
 8000c84:	0800b508 	.word	0x0800b508

08000c88 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a49      	ldr	r2, [pc, #292]	; (8000dbc <HAL_ADC_ConvCpltCallback+0x134>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d103      	bne.n	8000ca2 <HAL_ADC_ConvCpltCallback+0x1a>
    {
        adc_conversion_complete = 1;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_ADC_ConvCpltCallback+0x138>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
        last_value = current_value;

        // Reiniciar conversão
        HAL_ADC_Start_IT(hadc);
    }
}
 8000ca0:	e088      	b.n	8000db4 <HAL_ADC_ConvCpltCallback+0x12c>
    else if (hadc->Instance == ADC2 && operating_mode == MODE_FREQUENCY)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a47      	ldr	r2, [pc, #284]	; (8000dc4 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	f040 8083 	bne.w	8000db4 <HAL_ADC_ConvCpltCallback+0x12c>
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_ADC_ConvCpltCallback+0x140>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d17d      	bne.n	8000db4 <HAL_ADC_ConvCpltCallback+0x12c>
        uint16_t current_value = HAL_ADC_GetValue(hadc);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f001 f907 	bl	8001ecc <HAL_ADC_GetValue>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
        uint32_t current_time = HAL_GetTick();
 8000cc4:	f000 fd86 	bl	80017d4 <HAL_GetTick>
 8000cc8:	6538      	str	r0, [r7, #80]	; 0x50
        if (current_value > 2048 && last_value <= 2048) {
 8000cca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cd2:	d968      	bls.n	8000da6 <HAL_ADC_ConvCpltCallback+0x11e>
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cdc:	d863      	bhi.n	8000da6 <HAL_ADC_ConvCpltCallback+0x11e>
            if (last_edge_time != 0) {
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d05c      	beq.n	8000da0 <HAL_ADC_ConvCpltCallback+0x118>
                current_period = current_time - last_edge_time;
 8000ce6:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	4a39      	ldr	r2, [pc, #228]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000cf0:	6013      	str	r3, [r2, #0]
                float freq = 1000.0f / current_period; // Converter para Hz
 8000cf2:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x14c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fae6 	bl	80002c8 <__aeabi_ui2f>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4835      	ldr	r0, [pc, #212]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x150>)
 8000d02:	f7ff fbed 	bl	80004e0 <__aeabi_fdiv>
 8000d06:	4603      	mov	r3, r0
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
                frequency_buffer[freq_buffer_index] = freq;
 8000d0a:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x154>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4a33      	ldr	r2, [pc, #204]	; (8000de0 <HAL_ADC_ConvCpltCallback+0x158>)
 8000d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d14:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
                freq_buffer_index = (freq_buffer_index + 1) % FREQ_BUFFER_SIZE;
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x154>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000d20:	fb83 1302 	smull	r1, r3, r3, r2
 8000d24:	1099      	asrs	r1, r3, #2
 8000d26:	17d3      	asrs	r3, r2, #31
 8000d28:	1ac9      	subs	r1, r1, r3
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1ad1      	subs	r1, r2, r3
 8000d34:	b2ca      	uxtb	r2, r1
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x154>)
 8000d38:	701a      	strb	r2, [r3, #0]
                if (freq_buffer_index == 0) {
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x154>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d12e      	bne.n	8000da0 <HAL_ADC_ConvCpltCallback+0x118>
                    float avg_freq = Calculate_Average_Frequency();
 8000d42:	f7ff feff 	bl	8000b44 <Calculate_Average_Frequency>
 8000d46:	64b8      	str	r0, [r7, #72]	; 0x48
                    int32_t int_part = (int32_t)avg_freq;
 8000d48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d4a:	f7ff fcdb 	bl	8000704 <__aeabi_f2iz>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
                    int32_t dec_part = (int32_t)((avg_freq - int_part) * FREQ_MULTIPLIER); // Multiplica por 100 para pegar 2 casas decimais
 8000d52:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000d54:	f7ff fabc 	bl	80002d0 <__aeabi_i2f>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000d5e:	f7ff fa01 	bl	8000164 <__aeabi_fsub>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4920      	ldr	r1, [pc, #128]	; (8000de8 <HAL_ADC_ConvCpltCallback+0x160>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fb06 	bl	8000378 <__aeabi_fmul>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcc8 	bl	8000704 <__aeabi_f2iz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	643b      	str	r3, [r7, #64]	; 0x40
                    sprintf(freq_str, "Frequency: %ld.%02ld Hz\r\n", int_part, dec_part);
 8000d78:	f107 000c 	add.w	r0, r7, #12
 8000d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d80:	491a      	ldr	r1, [pc, #104]	; (8000dec <HAL_ADC_ConvCpltCallback+0x164>)
 8000d82:	f009 fed7 	bl	800ab34 <siprintf>
                    CDC_Transmit_FS((uint8_t*)freq_str, strlen(freq_str));
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff f9de 	bl	800014c <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f009 faec 	bl	800a378 <CDC_Transmit_FS>
            last_edge_time = current_time;
 8000da0:	4a0b      	ldr	r2, [pc, #44]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x148>)
 8000da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da4:	6013      	str	r3, [r2, #0]
        last_value = current_value;
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_ADC_ConvCpltCallback+0x144>)
 8000da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000dac:	8013      	strh	r3, [r2, #0]
        HAL_ADC_Start_IT(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fec4 	bl	8001b3c <HAL_ADC_Start_IT>
}
 8000db4:	bf00      	nop
 8000db6:	3758      	adds	r7, #88	; 0x58
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40012400 	.word	0x40012400
 8000dc0:	20000340 	.word	0x20000340
 8000dc4:	40012800 	.word	0x40012800
 8000dc8:	20000445 	.word	0x20000445
 8000dcc:	2000047c 	.word	0x2000047c
 8000dd0:	20000448 	.word	0x20000448
 8000dd4:	2000044c 	.word	0x2000044c
 8000dd8:	447a0000 	.word	0x447a0000
 8000ddc:	20000478 	.word	0x20000478
 8000de0:	20000450 	.word	0x20000450
 8000de4:	66666667 	.word	0x66666667
 8000de8:	42c80000 	.word	0x42c80000
 8000dec:	0800b510 	.word	0x0800b510

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fc96 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f84c 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 fa22 	bl	8001244 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e00:	f000 fa02 	bl	8001208 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000e04:	f009 f9e8 	bl	800a1d8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000e08:	f000 f8a2 	bl	8000f50 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e0c:	f000 f980 	bl	8001110 <MX_I2C1_Init>
  MX_ADC2_Init();
 8000e10:	f000 f940 	bl	8001094 <MX_ADC2_Init>
  MX_TIM3_Init();
 8000e14:	f000 f9aa 	bl	800116c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Pequeno delay para estabilização do I2C
  HAL_Delay(100);
 8000e18:	2064      	movs	r0, #100	; 0x64
 8000e1a:	f000 fce5 	bl	80017e8 <HAL_Delay>

  HAL_ADC_Start(&hadc2);
 8000e1e:	4816      	ldr	r0, [pc, #88]	; (8000e78 <main+0x88>)
 8000e20:	f000 fdde 	bl	80019e0 <HAL_ADC_Start>
//          HAL_Delay(100);
//      }
//  }

  // Reseta todos os PCF8574 para desligar LEDs
  Reset_All_PCF8574();
 8000e24:	f7ff fc94 	bl	8000750 <Reset_All_PCF8574>

  // Inicialização do ADC
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000e28:	2208      	movs	r2, #8
 8000e2a:	4914      	ldr	r1, [pc, #80]	; (8000e7c <main+0x8c>)
 8000e2c:	4814      	ldr	r0, [pc, #80]	; (8000e80 <main+0x90>)
 8000e2e:	f000 ff6f 	bl	8001d10 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (operating_mode == MODE_MATRIX) {
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <main+0x94>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1fa      	bne.n	8000e32 <main+0x42>
          if (dataComplete) {
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <main+0x98>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <main+0x66>
              Update_I2C_Outputs();
 8000e46:	f7ff fea3 	bl	8000b90 <Update_I2C_Outputs>
              dataComplete = 0;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <main+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
              config_complete = 1;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <main+0x9c>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
          }

          if (config_complete && adc_conversion_complete) {
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <main+0x9c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0e8      	beq.n	8000e32 <main+0x42>
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <main+0xa0>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0e3      	beq.n	8000e32 <main+0x42>
              Send_ADC_USB();
 8000e6a:	f7ff fd3f 	bl	80008ec <Send_ADC_USB>
              adc_conversion_complete = 0;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <main+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
      if (operating_mode == MODE_MATRIX) {
 8000e74:	e7dd      	b.n	8000e32 <main+0x42>
 8000e76:	bf00      	nop
 8000e78:	20000218 	.word	0x20000218
 8000e7c:	20000330 	.word	0x20000330
 8000e80:	200001e8 	.word	0x200001e8
 8000e84:	20000445 	.word	0x20000445
 8000e88:	2000032c 	.word	0x2000032c
 8000e8c:	20000341 	.word	0x20000341
 8000e90:	20000340 	.word	0x20000340

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9e:	2228      	movs	r2, #40	; 0x28
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f009 fe66 	bl	800ab74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ede:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 f992 	bl	8005214 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ef6:	f000 fa0b 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2101      	movs	r1, #1
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fbfe 	bl	8005718 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f22:	f000 f9f5 	bl	8001310 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000f26:	2312      	movs	r3, #18
 8000f28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000f2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f34:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 fd67 	bl	8005a0c <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f44:	f000 f9e4 	bl	8001310 <Error_Handler>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3750      	adds	r7, #80	; 0x50
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f60:	4b4a      	ldr	r3, [pc, #296]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f62:	4a4b      	ldr	r2, [pc, #300]	; (8001090 <MX_ADC1_Init+0x140>)
 8000f64:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f66:	4b49      	ldr	r3, [pc, #292]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f6e:	4b47      	ldr	r3, [pc, #284]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f74:	4b45      	ldr	r3, [pc, #276]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b44      	ldr	r3, [pc, #272]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f7c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f8a:	2208      	movs	r2, #8
 8000f8c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8e:	483f      	ldr	r0, [pc, #252]	; (800108c <MX_ADC1_Init+0x13c>)
 8000f90:	f000 fc4e 	bl	8001830 <HAL_ADC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000f9a:	f000 f9b9 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	4619      	mov	r1, r3
 8000fae:	4837      	ldr	r0, [pc, #220]	; (800108c <MX_ADC1_Init+0x13c>)
 8000fb0:	f001 f872 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fba:	f000 f9a9 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4830      	ldr	r0, [pc, #192]	; (800108c <MX_ADC1_Init+0x13c>)
 8000fcc:	f001 f864 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000fd6:	f000 f99b 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4829      	ldr	r0, [pc, #164]	; (800108c <MX_ADC1_Init+0x13c>)
 8000fe8:	f001 f856 	bl	8002098 <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ff2:	f000 f98d 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	4619      	mov	r1, r3
 8001002:	4822      	ldr	r0, [pc, #136]	; (800108c <MX_ADC1_Init+0x13c>)
 8001004:	f001 f848 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800100e:	f000 f97f 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001012:	2305      	movs	r3, #5
 8001014:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001016:	2305      	movs	r3, #5
 8001018:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <MX_ADC1_Init+0x13c>)
 8001020:	f001 f83a 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800102a:	f000 f971 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800102e:	2306      	movs	r3, #6
 8001030:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001032:	2306      	movs	r3, #6
 8001034:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4814      	ldr	r0, [pc, #80]	; (800108c <MX_ADC1_Init+0x13c>)
 800103c:	f001 f82c 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001046:	f000 f963 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800104a:	2307      	movs	r3, #7
 800104c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800104e:	2307      	movs	r3, #7
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	480d      	ldr	r0, [pc, #52]	; (800108c <MX_ADC1_Init+0x13c>)
 8001058:	f001 f81e 	bl	8002098 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001062:	f000 f955 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001066:	2308      	movs	r3, #8
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800106a:	2308      	movs	r3, #8
 800106c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_ADC1_Init+0x13c>)
 8001074:	f001 f810 	bl	8002098 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800107e:	f000 f947 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001e8 	.word	0x200001e8
 8001090:	40012400 	.word	0x40012400

08001094 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <MX_ADC2_Init+0x74>)
 80010a6:	4a19      	ldr	r2, [pc, #100]	; (800110c <MX_ADC2_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_ADC2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_ADC2_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_ADC2_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_ADC2_Init+0x74>)
 80010be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010c2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_ADC2_Init+0x74>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_ADC2_Init+0x74>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_ADC2_Init+0x74>)
 80010d2:	f000 fbad 	bl	8001830 <HAL_ADC_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 f918 	bl	8001310 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010e0:	2309      	movs	r3, #9
 80010e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010e8:	2306      	movs	r3, #6
 80010ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_ADC2_Init+0x74>)
 80010f2:	f000 ffd1 	bl	8002098 <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80010fc:	f000 f908 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000218 	.word	0x20000218
 800110c:	40012800 	.word	0x40012800

08001110 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <MX_I2C1_Init+0x50>)
 8001116:	4a13      	ldr	r2, [pc, #76]	; (8001164 <MX_I2C1_Init+0x54>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <MX_I2C1_Init+0x50>)
 800111c:	4a12      	ldr	r2, [pc, #72]	; (8001168 <MX_I2C1_Init+0x58>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_I2C1_Init+0x50>)
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <MX_I2C1_Init+0x50>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_I2C1_Init+0x50>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <MX_I2C1_Init+0x50>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <MX_I2C1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_I2C1_Init+0x50>)
 800114e:	f001 fe57 	bl	8002e00 <HAL_I2C_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f000 f8da 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000028c 	.word	0x2000028c
 8001164:	40005400 	.word	0x40005400
 8001168:	000186a0 	.word	0x000186a0

0800116c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_TIM3_Init+0x94>)
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_TIM3_Init+0x98>)
 800118c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800-1;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_TIM3_Init+0x94>)
 8001190:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_TIM3_Init+0x94>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800119c:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_TIM3_Init+0x94>)
 800119e:	220a      	movs	r2, #10
 80011a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_TIM3_Init+0x94>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_TIM3_Init+0x94>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ae:	4814      	ldr	r0, [pc, #80]	; (8001200 <MX_TIM3_Init+0x94>)
 80011b0:	f004 fce2 	bl	8005b78 <HAL_TIM_Base_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80011ba:	f000 f8a9 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_TIM3_Init+0x94>)
 80011cc:	f004 fe9c 	bl	8005f08 <HAL_TIM_ConfigClockSource>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 f89b 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011da:	2320      	movs	r3, #32
 80011dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011e2:	463b      	mov	r3, r7
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_TIM3_Init+0x94>)
 80011e8:	f005 f87a 	bl	80062e0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011f2:	f000 f88d 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002e0 	.word	0x200002e0
 8001204:	40000400 	.word	0x40000400

08001208 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_DMA_Init+0x38>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <MX_DMA_Init+0x38>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_DMA_Init+0x38>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	200b      	movs	r0, #11
 800122c:	f001 fa0d 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001230:	200b      	movs	r0, #11
 8001232:	f001 fa26 	bl	8002682 <HAL_NVIC_EnableIRQ>

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xc0>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a29      	ldr	r2, [pc, #164]	; (8001304 <MX_GPIO_Init+0xc0>)
 800125e:	f043 0310 	orr.w	r3, r3, #16
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_GPIO_Init+0xc0>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_GPIO_Init+0xc0>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a23      	ldr	r2, [pc, #140]	; (8001304 <MX_GPIO_Init+0xc0>)
 8001276:	f043 0320 	orr.w	r3, r3, #32
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_GPIO_Init+0xc0>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_GPIO_Init+0xc0>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_GPIO_Init+0xc0>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_GPIO_Init+0xc0>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_GPIO_Init+0xc0>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <MX_GPIO_Init+0xc0>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_GPIO_Init+0xc0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_GPIO_Init+0xc4>)
 80012c0:	f001 fd6c 	bl	8002d9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	4619      	mov	r1, r3
 80012dc:	480a      	ldr	r0, [pc, #40]	; (8001308 <MX_GPIO_Init+0xc4>)
 80012de:	f001 fbd9 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e2:	2301      	movs	r3, #1
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_GPIO_Init+0xc8>)
 80012f6:	f001 fbcd 	bl	8002a94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000
 8001308:	40011000 	.word	0x40011000
 800130c:	40010800 	.word	0x40010800

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>
	...

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001322:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_MspInit+0x54>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_MspInit+0x54>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6193      	str	r3, [r2, #24]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_MspInit+0x54>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_MspInit+0x54>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <HAL_MspInit+0x54>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_MspInit+0x54>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_MspInit+0x58>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_MspInit+0x58>)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a50      	ldr	r2, [pc, #320]	; (80014d4 <HAL_ADC_MspInit+0x15c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d169      	bne.n	800146c <HAL_ADC_MspInit+0xf4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a48      	ldr	r2, [pc, #288]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
 80013c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a42      	ldr	r2, [pc, #264]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80013e0:	23fe      	movs	r3, #254	; 0xfe
 80013e2:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e4:	2303      	movs	r3, #3
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	4619      	mov	r1, r3
 80013ee:	483b      	ldr	r0, [pc, #236]	; (80014dc <HAL_ADC_MspInit+0x164>)
 80013f0:	f001 fb50 	bl	8002a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f8:	2303      	movs	r3, #3
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4619      	mov	r1, r3
 8001402:	4837      	ldr	r0, [pc, #220]	; (80014e0 <HAL_ADC_MspInit+0x168>)
 8001404:	f001 fb46 	bl	8002a94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 800140a:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <HAL_ADC_MspInit+0x170>)
 800140c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001414:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 800142a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001430:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001432:	2220      	movs	r2, #32
 8001434:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800143e:	4829      	ldr	r0, [pc, #164]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001440:	f001 f93a 	bl	80026b8 <HAL_DMA_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 800144a:	f7ff ff61 	bl	8001310 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001452:	621a      	str	r2, [r3, #32]
 8001454:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <HAL_ADC_MspInit+0x16c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2012      	movs	r0, #18
 8001460:	f001 f8f3 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001464:	2012      	movs	r0, #18
 8001466:	f001 f90c 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800146a:	e02e      	b.n	80014ca <HAL_ADC_MspInit+0x152>
  else if(hadc->Instance==ADC2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <HAL_ADC_MspInit+0x174>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d129      	bne.n	80014ca <HAL_ADC_MspInit+0x152>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001476:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a17      	ldr	r2, [pc, #92]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 800147c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001480:	6193      	str	r3, [r2, #24]
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_ADC_MspInit+0x160>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	4619      	mov	r1, r3
 80014b4:	480a      	ldr	r0, [pc, #40]	; (80014e0 <HAL_ADC_MspInit+0x168>)
 80014b6:	f001 faed 	bl	8002a94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2012      	movs	r0, #18
 80014c0:	f001 f8c3 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80014c4:	2012      	movs	r0, #18
 80014c6:	f001 f8dc 	bl	8002682 <HAL_NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3730      	adds	r7, #48	; 0x30
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40012400 	.word	0x40012400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	20000248 	.word	0x20000248
 80014e8:	40020008 	.word	0x40020008
 80014ec:	40012800 	.word	0x40012800

080014f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <HAL_I2C_MspInit+0x70>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d123      	bne.n	8001558 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_I2C_MspInit+0x74>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_I2C_MspInit+0x74>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_I2C_MspInit+0x74>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001528:	23c0      	movs	r3, #192	; 0xc0
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800152c:	2312      	movs	r3, #18
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <HAL_I2C_MspInit+0x78>)
 800153c:	f001 faaa 	bl	8002a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_I2C_MspInit+0x74>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_I2C_MspInit+0x74>)
 8001546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154a:	61d3      	str	r3, [r2, #28]
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_I2C_MspInit+0x74>)
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40005400 	.word	0x40005400
 8001564:	40021000 	.word	0x40021000
 8001568:	40010c00 	.word	0x40010c00

0800156c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_TIM_Base_MspInit+0x44>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d113      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_TIM_Base_MspInit+0x48>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <HAL_TIM_Base_MspInit+0x48>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	61d3      	str	r3, [r2, #28]
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_TIM_Base_MspInit+0x48>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201d      	movs	r0, #29
 800159c:	f001 f855 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a0:	201d      	movs	r0, #29
 80015a2:	f001 f86e 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40021000 	.word	0x40021000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr

080015e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fe:	f000 f8d7 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA1_Channel1_IRQHandler+0x10>)
 800160e:	f001 f90d 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000248 	.word	0x20000248

0800161c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <ADC1_2_IRQHandler+0x14>)
 8001622:	f000 fc5f 	bl	8001ee4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <ADC1_2_IRQHandler+0x18>)
 8001628:	f000 fc5c 	bl	8001ee4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200001e8 	.word	0x200001e8
 8001634:	20000218 	.word	0x20000218

08001638 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800163e:	f002 f9a0 	bl	8003982 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20001150 	.word	0x20001150

0800164c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM3_IRQHandler+0x10>)
 8001652:	f004 fb51 	bl	8005cf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002e0 	.word	0x200002e0

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f009 fa78 	bl	800ab84 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20005000 	.word	0x20005000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000480 	.word	0x20000480
 80016c8:	200017a8 	.word	0x200017a8

080016cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff fff8 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016de:	490c      	ldr	r1, [pc, #48]	; (8001710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f4:	4c09      	ldr	r4, [pc, #36]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f009 fa45 	bl	800ab90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7ff fb73 	bl	8000df0 <main>
  bx lr
 800170a:	4770      	bx	lr
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001714:	0800b5dc 	.word	0x0800b5dc
  ldr r2, =_sbss
 8001718:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800171c:	200017a8 	.word	0x200017a8

08001720 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <CAN1_RX1_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 ff7d 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fdec 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 ff95 	bl	800269e <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 ff5d 	bl	800264a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000484 	.word	0x20000484

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000484 	.word	0x20000484

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffe0 	bl	80017d4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0be      	b.n	80019d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fd82 	bl	8001378 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 fd61 	bl	800233c <ADC_ConversionStop_Disable>
 800187a:	4603      	mov	r3, r0
 800187c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 8099 	bne.w	80019be <HAL_ADC_Init+0x18e>
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 8095 	bne.w	80019be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800189c:	f023 0302 	bic.w	r3, r3, #2
 80018a0:	f043 0202 	orr.w	r2, r3, #2
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c8:	d003      	beq.n	80018d2 <HAL_ADC_Init+0xa2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_ADC_Init+0xa8>
 80018d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d6:	e000      	b.n	80018da <HAL_ADC_Init+0xaa>
 80018d8:	2300      	movs	r3, #0
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7d1b      	ldrb	r3, [r3, #20]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d119      	bne.n	800191c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7b1b      	ldrb	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	035a      	lsls	r2, r3, #13
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e00b      	b.n	800191c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <HAL_ADC_Init+0x1a8>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	430b      	orrs	r3, r1
 8001942:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194c:	d003      	beq.n	8001956 <HAL_ADC_Init+0x126>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d104      	bne.n	8001960 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	3b01      	subs	r3, #1
 800195c:	051b      	lsls	r3, r3, #20
 800195e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	430a      	orrs	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_ADC_Init+0x1ac>)
 800197c:	4013      	ands	r3, r2
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d10b      	bne.n	800199c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	f023 0303 	bic.w	r3, r3, #3
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800199a:	e018      	b.n	80019ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	f023 0312 	bic.w	r3, r3, #18
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019bc:	e007      	b.n	80019ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f043 0210 	orr.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	ffe1f7fd 	.word	0xffe1f7fd
 80019dc:	ff1f0efe 	.word	0xff1f0efe

080019e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Start+0x1a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e098      	b.n	8001b2c <HAL_ADC_Start+0x14c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fc40 	bl	8002288 <ADC_Enable>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 8087 	bne.w	8001b22 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <HAL_ADC_Start+0x154>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_Start+0x5e>
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_ADC_Start+0x158>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d026      	beq.n	8001aa6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a68:	e01d      	b.n	8001aa6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	; (8001b38 <HAL_ADC_Start+0x158>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_Start+0xaa>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2b      	ldr	r2, [pc, #172]	; (8001b34 <HAL_ADC_Start+0x154>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10d      	bne.n	8001aa6 <HAL_ADC_Start+0xc6>
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	; (8001b38 <HAL_ADC_Start+0x158>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	f023 0206 	bic.w	r2, r3, #6
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001abe:	e002      	b.n	8001ac6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0202 	mvn.w	r2, #2
 8001ad6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ae2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ae6:	d113      	bne.n	8001b10 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aec:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <HAL_ADC_Start+0x154>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_ADC_Start+0x158>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	e00c      	b.n	8001b2a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e003      	b.n	8001b2a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012800 	.word	0x40012800
 8001b38:	40012400 	.word	0x40012400

08001b3c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Start_IT+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e0a0      	b.n	8001c98 <HAL_ADC_Start_IT+0x15c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fb92 	bl	8002288 <ADC_Enable>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f040 808f 	bne.w	8001c8e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a45      	ldr	r2, [pc, #276]	; (8001ca0 <HAL_ADC_Start_IT+0x164>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d105      	bne.n	8001b9a <HAL_ADC_Start_IT+0x5e>
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <HAL_ADC_Start_IT+0x168>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d115      	bne.n	8001bc6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d026      	beq.n	8001c02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bc4:	e01d      	b.n	8001c02 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a33      	ldr	r2, [pc, #204]	; (8001ca4 <HAL_ADC_Start_IT+0x168>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_Start_IT+0xaa>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2f      	ldr	r2, [pc, #188]	; (8001ca0 <HAL_ADC_Start_IT+0x164>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10d      	bne.n	8001c02 <HAL_ADC_Start_IT+0xc6>
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <HAL_ADC_Start_IT+0x168>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	f023 0206 	bic.w	r2, r3, #6
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c1a:	e002      	b.n	8001c22 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0202 	mvn.w	r2, #2
 8001c32:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0220 	orr.w	r2, r2, #32
 8001c42:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c52:	d113      	bne.n	8001c7c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c58:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <HAL_ADC_Start_IT+0x164>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_ADC_Start_IT+0x168>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d108      	bne.n	8001c7c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	e00c      	b.n	8001c96 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e003      	b.n	8001c96 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40012800 	.word	0x40012800
 8001ca4:	40012400 	.word	0x40012400

08001ca8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Stop_IT+0x1a>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e022      	b.n	8001d08 <HAL_ADC_Stop_IT+0x60>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fb36 	bl	800233c <ADC_ConversionStop_Disable>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d111      	bne.n	8001cfe <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0220 	bic.w	r2, r2, #32
 8001ce8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_ADC_Start_DMA+0x24>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a63      	ldr	r2, [pc, #396]	; (8001ebc <HAL_ADC_Start_DMA+0x1ac>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d106      	bne.n	8001d42 <HAL_ADC_Start_DMA+0x32>
 8001d34:	4b60      	ldr	r3, [pc, #384]	; (8001eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 80b3 	bne.w	8001ea8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_ADC_Start_DMA+0x40>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0ae      	b.n	8001eae <HAL_ADC_Start_DMA+0x19e>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fa95 	bl	8002288 <ADC_Enable>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 809a 	bne.w	8001e9e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a4e      	ldr	r2, [pc, #312]	; (8001ebc <HAL_ADC_Start_DMA+0x1ac>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_Start_DMA+0x84>
 8001d88:	4b4b      	ldr	r3, [pc, #300]	; (8001eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d115      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d026      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dbe:	e01d      	b.n	8001dfc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a39      	ldr	r2, [pc, #228]	; (8001eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_ADC_Start_DMA+0xd0>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_ADC_Start_DMA+0x1ac>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10d      	bne.n	8001dfc <HAL_ADC_Start_DMA+0xec>
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_ADC_Start_DMA+0x1a8>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	f023 0206 	bic.w	r2, r3, #6
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e14:	e002      	b.n	8001e1c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <HAL_ADC_Start_DMA+0x1b0>)
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_ADC_Start_DMA+0x1b4>)
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <HAL_ADC_Start_DMA+0x1b8>)
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0202 	mvn.w	r2, #2
 8001e44:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e54:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a18      	ldr	r0, [r3, #32]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	334c      	adds	r3, #76	; 0x4c
 8001e60:	4619      	mov	r1, r3
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f000 fc81 	bl	800276c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e74:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e78:	d108      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e88:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e8a:	e00f      	b.n	8001eac <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e9a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e9c:	e006      	b.n	8001eac <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ea6:	e001      	b.n	8001eac <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40012400 	.word	0x40012400
 8001ebc:	40012800 	.word	0x40012800
 8001ec0:	080023bf 	.word	0x080023bf
 8001ec4:	0800243b 	.word	0x0800243b
 8001ec8:	08002457 	.word	0x08002457

08001ecc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d03e      	beq.n	8001f84 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d039      	beq.n	8001f84 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f003 0310 	and.w	r3, r3, #16
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f36:	d11d      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d119      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0220 	bic.w	r2, r2, #32
 8001f4e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d105      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fe87 	bl	8000c88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f06f 0212 	mvn.w	r2, #18
 8001f82:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d04d      	beq.n	800202a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d048      	beq.n	800202a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001fba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001fbe:	d012      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d125      	bne.n	800201a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fdc:	d11d      	bne.n	800201a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d119      	bne.n	800201a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fa35 	bl	800248a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 020c 	mvn.w	r2, #12
 8002028:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d012      	beq.n	800205a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f812 	bl	8002074 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0201 	mvn.w	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x20>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e0dc      	b.n	8002272 <HAL_ADC_ConfigChannel+0x1da>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b06      	cmp	r3, #6
 80020c6:	d81c      	bhi.n	8002102 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	3b05      	subs	r3, #5
 80020da:	221f      	movs	r2, #31
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	4019      	ands	r1, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b05      	subs	r3, #5
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002100:	e03c      	b.n	800217c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d81c      	bhi.n	8002144 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	3b23      	subs	r3, #35	; 0x23
 800211c:	221f      	movs	r2, #31
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	4019      	ands	r1, r3
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b23      	subs	r3, #35	; 0x23
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
 8002142:	e01b      	b.n	800217c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b41      	subs	r3, #65	; 0x41
 8002156:	221f      	movs	r2, #31
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	4019      	ands	r1, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b41      	subs	r3, #65	; 0x41
 8002170:	fa00 f203 	lsl.w	r2, r0, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d91c      	bls.n	80021be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68d9      	ldr	r1, [r3, #12]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6919      	ldr	r1, [r3, #16]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d003      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d132      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_ADC_ConfigChannel+0x1e4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d125      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d126      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002228:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b10      	cmp	r3, #16
 8002230:	d11a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_ADC_ConfigChannel+0x1e8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_ADC_ConfigChannel+0x1ec>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0c9a      	lsrs	r2, r3, #18
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002248:	e002      	b.n	8002250 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	3b01      	subs	r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f9      	bne.n	800224a <HAL_ADC_ConfigChannel+0x1b2>
 8002256:	e007      	b.n	8002268 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40012400 	.word	0x40012400
 8002280:	20000000 	.word	0x20000000
 8002284:	431bde83 	.word	0x431bde83

08002288 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d040      	beq.n	8002328 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <ADC_Enable+0xac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <ADC_Enable+0xb0>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9b      	lsrs	r3, r3, #18
 80022c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022c4:	e002      	b.n	80022cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f9      	bne.n	80022c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022d2:	f7ff fa7f 	bl	80017d4 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d8:	e01f      	b.n	800231a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022da:	f7ff fa7b 	bl	80017d4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d918      	bls.n	800231a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d011      	beq.n	800231a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e007      	b.n	800232a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d1d8      	bne.n	80022da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
 8002338:	431bde83 	.word	0x431bde83

0800233c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d12e      	bne.n	80023b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0201 	bic.w	r2, r2, #1
 8002364:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002366:	f7ff fa35 	bl	80017d4 <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800236c:	e01b      	b.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800236e:	f7ff fa31 	bl	80017d4 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d914      	bls.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10d      	bne.n	80023a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f043 0210 	orr.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	f043 0201 	orr.w	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e007      	b.n	80023b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d0dc      	beq.n	800236e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023f2:	d115      	bne.n	8002420 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d111      	bne.n	8002420 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002400:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7fe fc31 	bl	8000c88 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002426:	e004      	b.n	8002432 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	4798      	blx	r3
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff fe0a 	bl	8002062 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f7ff fe02 	bl	8002086 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4906      	ldr	r1, [pc, #24]	; (8002534 <__NVIC_EnableIRQ+0x34>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	; (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
         );
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff90 	bl	8002538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff2d 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff42 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff90 	bl	800258c <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5f 	bl	8002538 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff35 	bl	8002500 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa2 	bl	80025f0 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e043      	b.n	8002756 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b22      	ldr	r3, [pc, #136]	; (8002760 <HAL_DMA_Init+0xa8>)
 80026d6:	4413      	add	r3, r2
 80026d8:	4a22      	ldr	r2, [pc, #136]	; (8002764 <HAL_DMA_Init+0xac>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	009a      	lsls	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_DMA_Init+0xb0>)
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002702:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002706:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	bffdfff8 	.word	0xbffdfff8
 8002764:	cccccccd 	.word	0xcccccccd
 8002768:	40020000 	.word	0x40020000

0800276c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_DMA_Start_IT+0x20>
 8002788:	2302      	movs	r3, #2
 800278a:	e04b      	b.n	8002824 <HAL_DMA_Start_IT+0xb8>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d13a      	bne.n	8002816 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f937 	bl	8002a38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d008      	beq.n	80027e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 020e 	orr.w	r2, r2, #14
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e00f      	b.n	8002804 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 020a 	orr.w	r2, r2, #10
 8002802:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e005      	b.n	8002822 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800281e:	2302      	movs	r3, #2
 8002820:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2204      	movs	r2, #4
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d04f      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xc8>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d04a      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0204 	bic.w	r2, r2, #4
 800287a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a66      	ldr	r2, [pc, #408]	; (8002a1c <HAL_DMA_IRQHandler+0x1f0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d029      	beq.n	80028da <HAL_DMA_IRQHandler+0xae>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a65      	ldr	r2, [pc, #404]	; (8002a20 <HAL_DMA_IRQHandler+0x1f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xaa>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <HAL_DMA_IRQHandler+0x1f8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xa4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a62      	ldr	r2, [pc, #392]	; (8002a28 <HAL_DMA_IRQHandler+0x1fc>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d012      	beq.n	80028ca <HAL_DMA_IRQHandler+0x9e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a60      	ldr	r2, [pc, #384]	; (8002a2c <HAL_DMA_IRQHandler+0x200>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x98>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5f      	ldr	r2, [pc, #380]	; (8002a30 <HAL_DMA_IRQHandler+0x204>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d102      	bne.n	80028be <HAL_DMA_IRQHandler+0x92>
 80028b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028bc:	e00e      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028c2:	e00b      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028c8:	e008      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028ce:	e005      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d4:	e002      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028d6:	2340      	movs	r3, #64	; 0x40
 80028d8:	e000      	b.n	80028dc <HAL_DMA_IRQHandler+0xb0>
 80028da:	2304      	movs	r3, #4
 80028dc:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <HAL_DMA_IRQHandler+0x208>)
 80028de:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8094 	beq.w	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028f2:	e08e      	b.n	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2202      	movs	r2, #2
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d056      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x186>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d051      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020a 	bic.w	r2, r2, #10
 800292a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_DMA_IRQHandler+0x1f0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d029      	beq.n	8002992 <HAL_DMA_IRQHandler+0x166>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a37      	ldr	r2, [pc, #220]	; (8002a20 <HAL_DMA_IRQHandler+0x1f4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_DMA_IRQHandler+0x162>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	; (8002a24 <HAL_DMA_IRQHandler+0x1f8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01a      	beq.n	8002988 <HAL_DMA_IRQHandler+0x15c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <HAL_DMA_IRQHandler+0x1fc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d012      	beq.n	8002982 <HAL_DMA_IRQHandler+0x156>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <HAL_DMA_IRQHandler+0x200>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00a      	beq.n	800297c <HAL_DMA_IRQHandler+0x150>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <HAL_DMA_IRQHandler+0x204>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d102      	bne.n	8002976 <HAL_DMA_IRQHandler+0x14a>
 8002970:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002974:	e00e      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297a:	e00b      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 800297c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002980:	e008      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002986:	e005      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298c:	e002      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 800298e:	2320      	movs	r3, #32
 8002990:	e000      	b.n	8002994 <HAL_DMA_IRQHandler+0x168>
 8002992:	2302      	movs	r3, #2
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <HAL_DMA_IRQHandler+0x208>)
 8002996:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d034      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029b0:	e02f      	b.n	8002a12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	2208      	movs	r2, #8
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4013      	ands	r3, r2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d028      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x1e8>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d023      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020e 	bic.w	r2, r2, #14
 80029da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	2101      	movs	r1, #1
 80029e6:	fa01 f202 	lsl.w	r2, r1, r2
 80029ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
    }
  }
  return;
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
}
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40020008 	.word	0x40020008
 8002a20:	4002001c 	.word	0x4002001c
 8002a24:	40020030 	.word	0x40020030
 8002a28:	40020044 	.word	0x40020044
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	4002006c 	.word	0x4002006c
 8002a34:	40020000 	.word	0x40020000

08002a38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2101      	movs	r1, #1
 8002a50:	fa01 f202 	lsl.w	r2, r1, r2
 8002a54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d108      	bne.n	8002a78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a76:	e007      	b.n	8002a88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr
	...

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	; 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e169      	b.n	8002d7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f040 8158 	bne.w	8002d76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a9a      	ldr	r2, [pc, #616]	; (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d05e      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ad0:	4a98      	ldr	r2, [pc, #608]	; (8002d34 <HAL_GPIO_Init+0x2a0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d875      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ad6:	4a98      	ldr	r2, [pc, #608]	; (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d058      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002adc:	4a96      	ldr	r2, [pc, #600]	; (8002d38 <HAL_GPIO_Init+0x2a4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d86f      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002ae2:	4a96      	ldr	r2, [pc, #600]	; (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d052      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002ae8:	4a94      	ldr	r2, [pc, #592]	; (8002d3c <HAL_GPIO_Init+0x2a8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d869      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002aee:	4a94      	ldr	r2, [pc, #592]	; (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d04c      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002af4:	4a92      	ldr	r2, [pc, #584]	; (8002d40 <HAL_GPIO_Init+0x2ac>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d863      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002afa:	4a92      	ldr	r2, [pc, #584]	; (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d046      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
 8002b00:	4a90      	ldr	r2, [pc, #576]	; (8002d44 <HAL_GPIO_Init+0x2b0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d85d      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b06:	2b12      	cmp	r3, #18
 8002b08:	d82a      	bhi.n	8002b60 <HAL_GPIO_Init+0xcc>
 8002b0a:	2b12      	cmp	r3, #18
 8002b0c:	d859      	bhi.n	8002bc2 <HAL_GPIO_Init+0x12e>
 8002b0e:	a201      	add	r2, pc, #4	; (adr r2, 8002b14 <HAL_GPIO_Init+0x80>)
 8002b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b14:	08002b8f 	.word	0x08002b8f
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b7b 	.word	0x08002b7b
 8002b20:	08002bbd 	.word	0x08002bbd
 8002b24:	08002bc3 	.word	0x08002bc3
 8002b28:	08002bc3 	.word	0x08002bc3
 8002b2c:	08002bc3 	.word	0x08002bc3
 8002b30:	08002bc3 	.word	0x08002bc3
 8002b34:	08002bc3 	.word	0x08002bc3
 8002b38:	08002bc3 	.word	0x08002bc3
 8002b3c:	08002bc3 	.word	0x08002bc3
 8002b40:	08002bc3 	.word	0x08002bc3
 8002b44:	08002bc3 	.word	0x08002bc3
 8002b48:	08002bc3 	.word	0x08002bc3
 8002b4c:	08002bc3 	.word	0x08002bc3
 8002b50:	08002bc3 	.word	0x08002bc3
 8002b54:	08002bc3 	.word	0x08002bc3
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b85 	.word	0x08002b85
 8002b60:	4a79      	ldr	r2, [pc, #484]	; (8002d48 <HAL_GPIO_Init+0x2b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b66:	e02c      	b.n	8002bc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	623b      	str	r3, [r7, #32]
          break;
 8002b6e:	e029      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	3304      	adds	r3, #4
 8002b76:	623b      	str	r3, [r7, #32]
          break;
 8002b78:	e024      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	3308      	adds	r3, #8
 8002b80:	623b      	str	r3, [r7, #32]
          break;
 8002b82:	e01f      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	e01a      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b96:	2304      	movs	r3, #4
 8002b98:	623b      	str	r3, [r7, #32]
          break;
 8002b9a:	e013      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ba4:	2308      	movs	r3, #8
 8002ba6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	611a      	str	r2, [r3, #16]
          break;
 8002bae:	e009      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	615a      	str	r2, [r3, #20]
          break;
 8002bba:	e003      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	623b      	str	r3, [r7, #32]
          break;
 8002bc0:	e000      	b.n	8002bc4 <HAL_GPIO_Init+0x130>
          break;
 8002bc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2bff      	cmp	r3, #255	; 0xff
 8002bc8:	d801      	bhi.n	8002bce <HAL_GPIO_Init+0x13a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_Init+0x13e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2bff      	cmp	r3, #255	; 0xff
 8002bd8:	d802      	bhi.n	8002be0 <HAL_GPIO_Init+0x14c>
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	e002      	b.n	8002be6 <HAL_GPIO_Init+0x152>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	3b08      	subs	r3, #8
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	210f      	movs	r1, #15
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	6a39      	ldr	r1, [r7, #32]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80b1 	beq.w	8002d76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c14:	4b4d      	ldr	r3, [pc, #308]	; (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	4a4c      	ldr	r2, [pc, #304]	; (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6193      	str	r3, [r2, #24]
 8002c20:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <HAL_GPIO_Init+0x2b8>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c2c:	4a48      	ldr	r2, [pc, #288]	; (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a40      	ldr	r2, [pc, #256]	; (8002d54 <HAL_GPIO_Init+0x2c0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d013      	beq.n	8002c80 <HAL_GPIO_Init+0x1ec>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_GPIO_Init+0x2c4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00d      	beq.n	8002c7c <HAL_GPIO_Init+0x1e8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3e      	ldr	r2, [pc, #248]	; (8002d5c <HAL_GPIO_Init+0x2c8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <HAL_GPIO_Init+0x1e4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	; (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_GPIO_Init+0x1e0>
 8002c70:	2303      	movs	r3, #3
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c74:	2304      	movs	r3, #4
 8002c76:	e004      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e002      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_GPIO_Init+0x1ee>
 8002c80:	2300      	movs	r3, #0
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	f002 0203 	and.w	r2, r2, #3
 8002c88:	0092      	lsls	r2, r2, #2
 8002c8a:	4093      	lsls	r3, r2
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c92:	492f      	ldr	r1, [pc, #188]	; (8002d50 <HAL_GPIO_Init+0x2bc>)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d006      	beq.n	8002cba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cac:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	492c      	ldr	r1, [pc, #176]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	608b      	str	r3, [r1, #8]
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cba:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	4928      	ldr	r1, [pc, #160]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	4922      	ldr	r1, [pc, #136]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
 8002ce0:	e006      	b.n	8002cf0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	491e      	ldr	r1, [pc, #120]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cfc:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4918      	ldr	r1, [pc, #96]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
 8002d08:	e006      	b.n	8002d18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	4914      	ldr	r1, [pc, #80]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	490e      	ldr	r1, [pc, #56]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e021      	b.n	8002d76 <HAL_GPIO_Init+0x2e2>
 8002d32:	bf00      	nop
 8002d34:	10320000 	.word	0x10320000
 8002d38:	10310000 	.word	0x10310000
 8002d3c:	10220000 	.word	0x10220000
 8002d40:	10210000 	.word	0x10210000
 8002d44:	10120000 	.word	0x10120000
 8002d48:	10110000 	.word	0x10110000
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40010c00 	.word	0x40010c00
 8002d5c:	40011000 	.word	0x40011000
 8002d60:	40011400 	.word	0x40011400
 8002d64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_GPIO_Init+0x304>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	4909      	ldr	r1, [pc, #36]	; (8002d98 <HAL_GPIO_Init+0x304>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	3301      	adds	r3, #1
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	fa22 f303 	lsr.w	r3, r2, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f47f ae8e 	bne.w	8002aa8 <HAL_GPIO_Init+0x14>
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	bf00      	nop
 8002d90:	372c      	adds	r7, #44	; 0x2c
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40010400 	.word	0x40010400

08002d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	807b      	strh	r3, [r7, #2]
 8002da8:	4613      	mov	r3, r2
 8002daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dac:	787b      	ldrb	r3, [r7, #1]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db8:	e003      	b.n	8002dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dba:	887b      	ldrh	r3, [r7, #2]
 8002dbc:	041a      	lsls	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	041a      	lsls	r2, r3, #16
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	43d9      	mvns	r1, r3
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	400b      	ands	r3, r1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	611a      	str	r2, [r3, #16]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e12b      	b.n	800306a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fe fb62 	bl	80014f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2224      	movs	r2, #36	; 0x24
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e64:	f002 fda0 	bl	80059a8 <HAL_RCC_GetPCLK1Freq>
 8002e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a81      	ldr	r2, [pc, #516]	; (8003074 <HAL_I2C_Init+0x274>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d807      	bhi.n	8002e84 <HAL_I2C_Init+0x84>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a80      	ldr	r2, [pc, #512]	; (8003078 <HAL_I2C_Init+0x278>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	bf94      	ite	ls
 8002e7c:	2301      	movls	r3, #1
 8002e7e:	2300      	movhi	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	e006      	b.n	8002e92 <HAL_I2C_Init+0x92>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a7d      	ldr	r2, [pc, #500]	; (800307c <HAL_I2C_Init+0x27c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e0e7      	b.n	800306a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4a78      	ldr	r2, [pc, #480]	; (8003080 <HAL_I2C_Init+0x280>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0c9b      	lsrs	r3, r3, #18
 8002ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_I2C_Init+0x274>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d802      	bhi.n	8002ed4 <HAL_I2C_Init+0xd4>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	e009      	b.n	8002ee8 <HAL_I2C_Init+0xe8>
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	4a69      	ldr	r2, [pc, #420]	; (8003084 <HAL_I2C_Init+0x284>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	099b      	lsrs	r3, r3, #6
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	495c      	ldr	r1, [pc, #368]	; (8003074 <HAL_I2C_Init+0x274>)
 8002f04:	428b      	cmp	r3, r1
 8002f06:	d819      	bhi.n	8002f3c <HAL_I2C_Init+0x13c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e59      	subs	r1, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f16:	1c59      	adds	r1, r3, #1
 8002f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f1c:	400b      	ands	r3, r1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_I2C_Init+0x138>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e59      	subs	r1, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f36:	e051      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	e04f      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d111      	bne.n	8002f68 <HAL_I2C_Init+0x168>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e012      	b.n	8002f8e <HAL_I2C_Init+0x18e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	0099      	lsls	r1, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Init+0x196>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e022      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10e      	bne.n	8002fbc <HAL_I2C_Init+0x1bc>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e58      	subs	r0, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6859      	ldr	r1, [r3, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	440b      	add	r3, r1
 8002fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fba:	e00f      	b.n	8002fdc <HAL_I2C_Init+0x1dc>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	0099      	lsls	r1, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	6809      	ldr	r1, [r1, #0]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800300a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6911      	ldr	r1, [r2, #16]
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68d2      	ldr	r2, [r2, #12]
 8003016:	4311      	orrs	r1, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6812      	ldr	r2, [r2, #0]
 800301c:	430b      	orrs	r3, r1
 800301e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695a      	ldr	r2, [r3, #20]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	000186a0 	.word	0x000186a0
 8003078:	001e847f 	.word	0x001e847f
 800307c:	003d08ff 	.word	0x003d08ff
 8003080:	431bde83 	.word	0x431bde83
 8003084:	10624dd3 	.word	0x10624dd3

08003088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	461a      	mov	r2, r3
 8003094:	460b      	mov	r3, r1
 8003096:	817b      	strh	r3, [r7, #10]
 8003098:	4613      	mov	r3, r2
 800309a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800309c:	f7fe fb9a 	bl	80017d4 <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f040 80e0 	bne.w	8003270 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	2319      	movs	r3, #25
 80030b6:	2201      	movs	r2, #1
 80030b8:	4970      	ldr	r1, [pc, #448]	; (800327c <HAL_I2C_Master_Transmit+0x1f4>)
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f964 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
 80030c8:	e0d3      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_I2C_Master_Transmit+0x50>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e0cc      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d007      	beq.n	80030fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2221      	movs	r2, #33	; 0x21
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2210      	movs	r2, #16
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	893a      	ldrh	r2, [r7, #8]
 800312e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a50      	ldr	r2, [pc, #320]	; (8003280 <HAL_I2C_Master_Transmit+0x1f8>)
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003140:	8979      	ldrh	r1, [r7, #10]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	6a3a      	ldr	r2, [r7, #32]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f89c 	bl	8003284 <I2C_MasterRequestWrite>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e08d      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800316c:	e066      	b.n	800323c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	6a39      	ldr	r1, [r7, #32]
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa22 	bl	80035bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b04      	cmp	r3, #4
 8003184:	d107      	bne.n	8003196 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06b      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	781a      	ldrb	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d11b      	bne.n	8003210 <HAL_I2C_Master_Transmit+0x188>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	781a      	ldrb	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	6a39      	ldr	r1, [r7, #32]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fa19 	bl	800364c <I2C_WaitOnBTFFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b04      	cmp	r3, #4
 8003226:	d107      	bne.n	8003238 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e01a      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	d194      	bne.n	800316e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	00100002 	.word	0x00100002
 8003280:	ffff0000 	.word	0xffff0000

08003284 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b08      	cmp	r3, #8
 800329e:	d006      	beq.n	80032ae <I2C_MasterRequestWrite+0x2a>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d003      	beq.n	80032ae <I2C_MasterRequestWrite+0x2a>
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032ac:	d108      	bne.n	80032c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e00b      	b.n	80032d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b12      	cmp	r3, #18
 80032c6:	d107      	bne.n	80032d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f84f 	bl	8003388 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00d      	beq.n	800330c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032fe:	d103      	bne.n	8003308 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e035      	b.n	8003378 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003314:	d108      	bne.n	8003328 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003316:	897b      	ldrh	r3, [r7, #10]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	e01b      	b.n	8003360 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003328:	897b      	ldrh	r3, [r7, #10]
 800332a:	11db      	asrs	r3, r3, #7
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 0306 	and.w	r3, r3, #6
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f063 030f 	orn	r3, r3, #15
 8003338:	b2da      	uxtb	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	490e      	ldr	r1, [pc, #56]	; (8003380 <I2C_MasterRequestWrite+0xfc>)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f898 	bl	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e010      	b.n	8003378 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003356:	897b      	ldrh	r3, [r7, #10]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	4907      	ldr	r1, [pc, #28]	; (8003384 <I2C_MasterRequestWrite+0x100>)
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f888 	bl	800347c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	00010008 	.word	0x00010008
 8003384:	00010002 	.word	0x00010002

08003388 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	e048      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a0:	d044      	beq.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a2:	f7fe fa17 	bl	80017d4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d302      	bcc.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d139      	bne.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	0c1b      	lsrs	r3, r3, #16
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10d      	bne.n	80033de <I2C_WaitOnFlagUntilTimeout+0x56>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	43da      	mvns	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4013      	ands	r3, r2
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	e00c      	b.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d116      	bne.n	800342c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e023      	b.n	8003474 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	0c1b      	lsrs	r3, r3, #16
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10d      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	43da      	mvns	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	e00c      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	429a      	cmp	r2, r3
 8003470:	d093      	beq.n	800339a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348a:	e071      	b.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d123      	bne.n	80034e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f043 0204 	orr.w	r2, r3, #4
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e067      	b.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ea:	d041      	beq.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ec:	f7fe f972 	bl	80017d4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d302      	bcc.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d136      	bne.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	0c1b      	lsrs	r3, r3, #16
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10c      	bne.n	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	43da      	mvns	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e00b      	b.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	43da      	mvns	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d016      	beq.n	8003570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e021      	b.n	80035b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d10c      	bne.n	8003594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e00b      	b.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	43da      	mvns	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bf14      	ite	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	2300      	moveq	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f47f af6d 	bne.w	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c8:	e034      	b.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f886 	bl	80036dc <I2C_IsAcknowledgeFailed>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e034      	b.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d028      	beq.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe f8f7 	bl	80017d4 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11d      	bne.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d016      	beq.n	8003634 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b80      	cmp	r3, #128	; 0x80
 8003640:	d1c3      	bne.n	80035ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003658:	e034      	b.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f83e 	bl	80036dc <I2C_IsAcknowledgeFailed>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e034      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d028      	beq.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7fe f8af 	bl	80017d4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11d      	bne.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d016      	beq.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e007      	b.n	80036d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d1c3      	bne.n	800365a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d11b      	bne.n	800372c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b08b      	sub	sp, #44	; 0x2c
 800373c:	af06      	add	r7, sp, #24
 800373e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0f1      	b.n	800392e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f006 ff3e 	bl	800a5e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f002 fe4b 	bl	800640c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	687e      	ldr	r6, [r7, #4]
 800377e:	466d      	mov	r5, sp
 8003780:	f106 0410 	add.w	r4, r6, #16
 8003784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	1d33      	adds	r3, r6, #4
 800378e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f002 fe15 	bl	80063c0 <USB_CoreInit>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0c2      	b.n	800392e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 fe46 	bl	8006440 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e040      	b.n	800383c <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	4613      	mov	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4413      	add	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	440b      	add	r3, r1
 80037ca:	3301      	adds	r3, #1
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	440b      	add	r3, r1
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	3303      	adds	r3, #3
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037fa:	7bfa      	ldrb	r2, [r7, #15]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	3338      	adds	r3, #56	; 0x38
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800380e:	7bfa      	ldrb	r2, [r7, #15]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	333c      	adds	r3, #60	; 0x3c
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003822:	7bfa      	ldrb	r2, [r7, #15]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	3340      	adds	r3, #64	; 0x40
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	3301      	adds	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d3b9      	bcc.n	80037ba <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003846:	2300      	movs	r3, #0
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	e044      	b.n	80038d6 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800384c:	7bfa      	ldrb	r2, [r7, #15]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	440b      	add	r3, r1
 800385a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003862:	7bfa      	ldrb	r2, [r7, #15]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	440b      	add	r3, r1
 8003870:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003878:	7bfa      	ldrb	r2, [r7, #15]
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800388e:	7bfa      	ldrb	r2, [r7, #15]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	440b      	add	r3, r1
 800389c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ba:	7bfa      	ldrb	r2, [r7, #15]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	3301      	adds	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d3b5      	bcc.n	800384c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	687e      	ldr	r6, [r7, #4]
 80038e8:	466d      	mov	r5, sp
 80038ea:	f106 0410 	add.w	r4, r6, #16
 80038ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f2:	6823      	ldr	r3, [r4, #0]
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	1d33      	adds	r3, r6, #4
 80038f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038fa:	6838      	ldr	r0, [r7, #0]
 80038fc:	f002 fdac 	bl	8006458 <USB_DevInit>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2202      	movs	r2, #2
 800390a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e00d      	b.n	800392e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f005 f82d 	bl	8008986 <USB_DevDisconnect>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003936 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_PCD_Start+0x16>
 8003948:	2302      	movs	r3, #2
 800394a:	e016      	b.n	800397a <HAL_PCD_Start+0x44>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f002 fd41 	bl	80063e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800395e:	2101      	movs	r1, #1
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f007 f8b0 	bl	800aac6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f005 f801 	bl	8008972 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b088      	sub	sp, #32
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f005 f803 	bl	800899a <USB_ReadInterrupts>
 8003994:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fb1b 	bl	8003fdc <PCD_EP_ISR_Handler>

    return;
 80039a6:	e119      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d013      	beq.n	80039da <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	b292      	uxth	r2, r2
 80039c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f006 fe83 	bl	800a6d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80039d0:	2100      	movs	r1, #0
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f905 	bl	8003be2 <HAL_PCD_SetAddress>

    return;
 80039d8:	e100      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00c      	beq.n	80039fe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039f6:	b292      	uxth	r2, r2
 80039f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80039fc:	e0ee      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1a:	b292      	uxth	r2, r2
 8003a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a20:	e0dc      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d027      	beq.n	8003a7c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	b292      	uxth	r2, r2
 8003a40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0208 	bic.w	r2, r2, #8
 8003a56:	b292      	uxth	r2, r2
 8003a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f006 fe73 	bl	800a748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a74:	b292      	uxth	r2, r2
 8003a76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a7a:	e0af      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8083 	beq.w	8003b8e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e010      	b.n	8003ab0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	7ffb      	ldrb	r3, [r7, #31]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	7ffb      	ldrb	r3, [r7, #31]
 8003a9c:	8812      	ldrh	r2, [r2, #0]
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	3320      	adds	r3, #32
 8003aa4:	443b      	add	r3, r7
 8003aa6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003aaa:	7ffb      	ldrb	r3, [r7, #31]
 8003aac:	3301      	adds	r3, #1
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b07      	cmp	r3, #7
 8003ab4:	d9eb      	bls.n	8003a8e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003ae6:	bf00      	nop
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f6      	beq.n	8003ae8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e00f      	b.n	8003b38 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003b18:	7ffb      	ldrb	r3, [r7, #31]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	4611      	mov	r1, r2
 8003b20:	7ffa      	ldrb	r2, [r7, #31]
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	440a      	add	r2, r1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	3320      	adds	r3, #32
 8003b2a:	443b      	add	r3, r7
 8003b2c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b30:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003b32:	7ffb      	ldrb	r3, [r7, #31]
 8003b34:	3301      	adds	r3, #1
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	7ffb      	ldrb	r3, [r7, #31]
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d9ec      	bls.n	8003b18 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0208 	orr.w	r2, r2, #8
 8003b50:	b292      	uxth	r2, r2
 8003b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0204 	orr.w	r2, r2, #4
 8003b80:	b292      	uxth	r2, r2
 8003b82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f006 fdc4 	bl	800a714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b8c:	e026      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003baa:	b292      	uxth	r2, r2
 8003bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f006 fd82 	bl	800a6ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003bb6:	e011      	b.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00c      	beq.n	8003bdc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bda:	bf00      	nop
  }
}
 8003bdc:	3720      	adds	r7, #32
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	460b      	mov	r3, r1
 8003bec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_PCD_SetAddress+0x1a>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e013      	b.n	8003c24 <HAL_PCD_SetAddress+0x42>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fe99 	bl	800894c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4608      	mov	r0, r1
 8003c36:	4611      	mov	r1, r2
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	70fb      	strb	r3, [r7, #3]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	803b      	strh	r3, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	da0e      	bge.n	8003c70 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	705a      	strb	r2, [r3, #1]
 8003c6e:	e00e      	b.n	8003c8e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c8e:	78fb      	ldrb	r3, [r7, #3]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c9a:	883a      	ldrh	r2, [r7, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	78ba      	ldrb	r2, [r7, #2]
 8003ca4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ca6:	78bb      	ldrb	r3, [r7, #2]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d102      	bne.n	8003cb2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_PCD_EP_Open+0x94>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e00e      	b.n	8003cde <HAL_PCD_EP_Open+0xb2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f002 fbe2 	bl	8006498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	da0e      	bge.n	8003d18 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	705a      	strb	r2, [r3, #1]
 8003d16:	e00e      	b.n	8003d36 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	f003 0207 	and.w	r2, r3, #7
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_PCD_EP_Close+0x6a>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e00e      	b.n	8003d6e <HAL_PCD_EP_Close+0x88>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f002 ff5a 	bl	8006c18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	460b      	mov	r3, r1
 8003d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	f003 0207 	and.w	r2, r3, #7
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2200      	movs	r2, #0
 8003dae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6979      	ldr	r1, [r7, #20]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 f911 	bl	8006ff0 <USB_EPStartXfer>

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 0207 	and.w	r2, r3, #7
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	440b      	add	r3, r1
 8003df6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	460b      	mov	r3, r1
 8003e14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e16:	7afb      	ldrb	r3, [r7, #11]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4413      	add	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e52:	7afb      	ldrb	r3, [r7, #11]
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6979      	ldr	r1, [r7, #20]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f003 f8c3 	bl	8006ff0 <USB_EPStartXfer>

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d901      	bls.n	8003e92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e04c      	b.n	8003f2c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	da0e      	bge.n	8003eb8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	705a      	strb	r2, [r3, #1]
 8003eb6:	e00c      	b.n	8003ed2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_PCD_EP_SetStall+0x7e>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e01c      	b.n	8003f2c <HAL_PCD_EP_SetStall+0xb8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f004 fc26 	bl	8008752 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d108      	bne.n	8003f22 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f004 fd4b 	bl	80089b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d901      	bls.n	8003f52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e040      	b.n	8003fd4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da0e      	bge.n	8003f78 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	705a      	strb	r2, [r3, #1]
 8003f76:	e00e      	b.n	8003f96 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_PCD_EP_ClrStall+0x82>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e00e      	b.n	8003fd4 <HAL_PCD_EP_ClrStall+0xa0>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68f9      	ldr	r1, [r7, #12]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f004 fc14 	bl	80087f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b096      	sub	sp, #88	; 0x58
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003fe4:	e3bf      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ff2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004000:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8179 	bne.w	80042fc <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800400a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d152      	bne.n	80040bc <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	81fb      	strh	r3, [r7, #14]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004036:	b29b      	uxth	r3, r3
 8004038:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3328      	adds	r3, #40	; 0x28
 800403e:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004048:	b29b      	uxth	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	3302      	adds	r3, #2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	4413      	add	r3, r2
 800405e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800406c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	441a      	add	r2, r3
 8004076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004078:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800407a:	2100      	movs	r1, #0
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f006 fb02 	bl	800a686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 836b 	beq.w	8004766 <PCD_EP_ISR_Handler+0x78a>
 8004090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 8366 	bne.w	8004766 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b292      	uxth	r2, r2
 80040ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040ba:	e354      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040c2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80040ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d034      	beq.n	8004144 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	461a      	mov	r2, r3
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4413      	add	r3, r2
 80040ee:	3306      	adds	r3, #6
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004104:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004112:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004116:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004118:	b29b      	uxth	r3, r3
 800411a:	f004 fc9d 	bl	8008a58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29a      	uxth	r2, r3
 8004126:	f640 738f 	movw	r3, #3983	; 0xf8f
 800412a:	4013      	ands	r3, r2
 800412c:	823b      	strh	r3, [r7, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	8a3a      	ldrh	r2, [r7, #16]
 8004134:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004138:	b292      	uxth	r2, r2
 800413a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f006 fa75 	bl	800a62c <HAL_PCD_SetupStageCallback>
 8004142:	e310      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004144:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004148:	2b00      	cmp	r3, #0
 800414a:	f280 830c 	bge.w	8004766 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29a      	uxth	r2, r3
 8004156:	f640 738f 	movw	r3, #3983	; 0xf8f
 800415a:	4013      	ands	r3, r2
 800415c:	83fb      	strh	r3, [r7, #30]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	8bfa      	ldrh	r2, [r7, #30]
 8004164:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004168:	b292      	uxth	r2, r2
 800416a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004174:	b29b      	uxth	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	3306      	adds	r3, #6
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004196:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d019      	beq.n	80041d4 <PCD_EP_ISR_Handler+0x1f8>
 80041a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d015      	beq.n	80041d4 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	6959      	ldr	r1, [r3, #20]
 80041b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80041b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f004 fc4d 	bl	8008a58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80041be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	441a      	add	r2, r3
 80041c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80041cc:	2100      	movs	r1, #0
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f006 fa3e 	bl	800a650 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80041de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 82bd 	bne.w	8004766 <PCD_EP_ISR_Handler+0x78a>
 80041ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041f0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80041f8:	f000 82b5 	beq.w	8004766 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800420a:	b29b      	uxth	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	4413      	add	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	881b      	ldrh	r3, [r3, #0]
 8004220:	b29b      	uxth	r3, r3
 8004222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004226:	b29a      	uxth	r2, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	801a      	strh	r2, [r3, #0]
 800422c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b3e      	cmp	r3, #62	; 0x3e
 8004232:	d91d      	bls.n	8004270 <PCD_EP_ISR_Handler+0x294>
 8004234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	095b      	lsrs	r3, r3, #5
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <PCD_EP_ISR_Handler+0x272>
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	3b01      	subs	r3, #1
 800424c:	647b      	str	r3, [r7, #68]	; 0x44
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29a      	uxth	r2, r3
 8004254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004256:	b29b      	uxth	r3, r3
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	b29b      	uxth	r3, r3
 800425c:	4313      	orrs	r3, r2
 800425e:	b29b      	uxth	r3, r3
 8004260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004268:	b29a      	uxth	r2, r3
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	e026      	b.n	80042be <PCD_EP_ISR_Handler+0x2e2>
 8004270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <PCD_EP_ISR_Handler+0x2b2>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29a      	uxth	r2, r3
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	e017      	b.n	80042be <PCD_EP_ISR_Handler+0x2e2>
 800428e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
 8004296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <PCD_EP_ISR_Handler+0x2cc>
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	3301      	adds	r3, #1
 80042a6:	647b      	str	r3, [r7, #68]	; 0x44
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	827b      	strh	r3, [r7, #18]
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042d6:	827b      	strh	r3, [r7, #18]
 80042d8:	8a7b      	ldrh	r3, [r7, #18]
 80042da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042de:	827b      	strh	r3, [r7, #18]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	8a7b      	ldrh	r3, [r7, #18]
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
 80042fa:	e234      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004310:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004314:	2b00      	cmp	r3, #0
 8004316:	f280 80fc 	bge.w	8004512 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29a      	uxth	r2, r3
 800432c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004330:	4013      	ands	r3, r2
 8004332:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004348:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800434c:	b292      	uxth	r2, r2
 800434e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004350:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	4413      	add	r3, r2
 8004364:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004368:	7b1b      	ldrb	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d125      	bne.n	80043ba <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	3306      	adds	r3, #6
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	4413      	add	r3, r2
 800438c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004396:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800439a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8092 	beq.w	80044c8 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043aa:	6959      	ldr	r1, [r3, #20]
 80043ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ae:	88da      	ldrh	r2, [r3, #6]
 80043b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043b4:	f004 fb50 	bl	8008a58 <USB_ReadPMA>
 80043b8:	e086      	b.n	80044c8 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80043ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d10a      	bne.n	80043d8 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80043c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043c6:	461a      	mov	r2, r3
 80043c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f9d9 	bl	8004782 <HAL_PCD_EP_DB_Receive>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80043d6:	e077      	b.n	80044c8 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004414:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004418:	b29b      	uxth	r3, r3
 800441a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d024      	beq.n	8004480 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	3302      	adds	r3, #2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004462:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02e      	beq.n	80044c8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004470:	6959      	ldr	r1, [r3, #20]
 8004472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004474:	891a      	ldrh	r2, [r3, #8]
 8004476:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800447a:	f004 faed 	bl	8008a58 <USB_ReadPMA>
 800447e:	e023      	b.n	80044c8 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004488:	b29b      	uxth	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	4413      	add	r3, r2
 8004494:	3306      	adds	r3, #6
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80044ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ba:	6959      	ldr	r1, [r3, #20]
 80044bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044be:	895a      	ldrh	r2, [r3, #10]
 80044c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80044c4:	f004 fac8 	bl	8008a58 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80044c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80044d0:	441a      	add	r2, r3
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80044d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80044de:	441a      	add	r2, r3
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80044e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <PCD_EP_ISR_Handler+0x51c>
 80044ec:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80044f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d206      	bcs.n	8004506 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80044f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f006 f8a6 	bl	800a650 <HAL_PCD_DataOutStageCallback>
 8004504:	e005      	b.n	8004512 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800450c:	4618      	mov	r0, r3
 800450e:	f002 fd6f 	bl	8006ff0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004512:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8123 	beq.w	8004766 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004520:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4413      	add	r3, r2
 8004532:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	b29b      	uxth	r3, r3
 8004546:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	441a      	add	r2, r3
 8004560:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456c:	b29b      	uxth	r3, r3
 800456e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004572:	78db      	ldrb	r3, [r3, #3]
 8004574:	2b01      	cmp	r3, #1
 8004576:	f040 80a2 	bne.w	80046be <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	2200      	movs	r2, #0
 800457e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004582:	7b1b      	ldrb	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8093 	beq.w	80046b0 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800458a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d046      	beq.n	8004624 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d126      	bne.n	80045ec <PCD_EP_ISR_Handler+0x610>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	627b      	str	r3, [r7, #36]	; 0x24
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	4413      	add	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	011a      	lsls	r2, r3, #4
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	4413      	add	r3, r2
 80045c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045c4:	623b      	str	r3, [r7, #32]
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	e061      	b.n	80046b0 <PCD_EP_ISR_Handler+0x6d4>
 80045ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ee:	785b      	ldrb	r3, [r3, #1]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d15d      	bne.n	80046b0 <PCD_EP_ISR_Handler+0x6d4>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004608:	4413      	add	r3, r2
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800460c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	011a      	lsls	r2, r3, #4
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	4413      	add	r3, r2
 8004616:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800461a:	62bb      	str	r3, [r7, #40]	; 0x28
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	2200      	movs	r2, #0
 8004620:	801a      	strh	r2, [r3, #0]
 8004622:	e045      	b.n	80046b0 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d126      	bne.n	8004680 <PCD_EP_ISR_Handler+0x6a4>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004640:	b29b      	uxth	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004646:	4413      	add	r3, r2
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	011a      	lsls	r2, r3, #4
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	4413      	add	r3, r2
 8004654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004664:	b29a      	uxth	r2, r3
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004678:	b29a      	uxth	r2, r3
 800467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e017      	b.n	80046b0 <PCD_EP_ISR_Handler+0x6d4>
 8004680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d113      	bne.n	80046b0 <PCD_EP_ISR_Handler+0x6d4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004690:	b29b      	uxth	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004696:	4413      	add	r3, r2
 8004698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	011a      	lsls	r2, r3, #4
 80046a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a2:	4413      	add	r3, r2
 80046a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2200      	movs	r2, #0
 80046ae:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f005 ffe5 	bl	800a686 <HAL_PCD_DataInStageCallback>
 80046bc:	e053      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80046be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d146      	bne.n	8004758 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	3302      	adds	r3, #2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80046f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80046fe:	429a      	cmp	r2, r3
 8004700:	d907      	bls.n	8004712 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800470a:	1ad2      	subs	r2, r2, r3
 800470c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470e:	619a      	str	r2, [r3, #24]
 8004710:	e002      	b.n	8004718 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004714:	2200      	movs	r2, #0
 8004716:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4619      	mov	r1, r3
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f005 ffad 	bl	800a686 <HAL_PCD_DataInStageCallback>
 800472c:	e01b      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800472e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004736:	441a      	add	r2, r3
 8004738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800473c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473e:	69da      	ldr	r2, [r3, #28]
 8004740:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004744:	441a      	add	r2, r3
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004750:	4618      	mov	r0, r3
 8004752:	f002 fc4d 	bl	8006ff0 <USB_EPStartXfer>
 8004756:	e006      	b.n	8004766 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004758:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800475c:	461a      	mov	r2, r3
 800475e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f91b 	bl	800499c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800476e:	b29b      	uxth	r3, r3
 8004770:	b21b      	sxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	f6ff ac37 	blt.w	8003fe6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3758      	adds	r7, #88	; 0x58
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	4613      	mov	r3, r2
 800478e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d07e      	beq.n	8004898 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	3302      	adds	r3, #2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	8b7b      	ldrh	r3, [r7, #26]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d306      	bcc.n	80047dc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	8b7b      	ldrh	r3, [r7, #26]
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	619a      	str	r2, [r3, #24]
 80047da:	e002      	b.n	80047e2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2200      	movs	r2, #0
 80047e0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d123      	bne.n	8004832 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	833b      	strh	r3, [r7, #24]
 8004806:	8b3b      	ldrh	r3, [r7, #24]
 8004808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800480c:	833b      	strh	r3, [r7, #24]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	8b3b      	ldrh	r3, [r7, #24]
 800481e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482e:	b29b      	uxth	r3, r3
 8004830:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01f      	beq.n	800487c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	82fb      	strh	r3, [r7, #22]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	8afb      	ldrh	r3, [r7, #22]
 8004868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004878:	b29b      	uxth	r3, r3
 800487a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800487c:	8b7b      	ldrh	r3, [r7, #26]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8087 	beq.w	8004992 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6959      	ldr	r1, [r3, #20]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	891a      	ldrh	r2, [r3, #8]
 8004890:	8b7b      	ldrh	r3, [r7, #26]
 8004892:	f004 f8e1 	bl	8008a58 <USB_ReadPMA>
 8004896:	e07c      	b.n	8004992 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4413      	add	r3, r2
 80048ac:	3306      	adds	r3, #6
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	8b7b      	ldrh	r3, [r7, #26]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d306      	bcc.n	80048da <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	699a      	ldr	r2, [r3, #24]
 80048d0:	8b7b      	ldrh	r3, [r7, #26]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	619a      	str	r2, [r3, #24]
 80048d8:	e002      	b.n	80048e0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d123      	bne.n	8004930 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	83fb      	strh	r3, [r7, #30]
 8004904:	8bfb      	ldrh	r3, [r7, #30]
 8004906:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800490a:	83fb      	strh	r3, [r7, #30]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	441a      	add	r2, r3
 800491a:	8bfb      	ldrh	r3, [r7, #30]
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11f      	bne.n	800497a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	83bb      	strh	r3, [r7, #28]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	441a      	add	r2, r3
 8004964:	8bbb      	ldrh	r3, [r7, #28]
 8004966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800496e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004972:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004976:	b29b      	uxth	r3, r3
 8004978:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800497a:	8b7b      	ldrh	r3, [r7, #26]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6959      	ldr	r1, [r3, #20]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	895a      	ldrh	r2, [r3, #10]
 800498c:	8b7b      	ldrh	r3, [r7, #26]
 800498e:	f004 f863 	bl	8008a58 <USB_ReadPMA>
    }
  }

  return count;
 8004992:	8b7b      	ldrh	r3, [r7, #26]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3720      	adds	r7, #32
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b0a4      	sub	sp, #144	; 0x90
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 81dd 	beq.w	8004d70 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4413      	add	r3, r2
 80049ca:	3302      	adds	r3, #2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d907      	bls.n	80049fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80049f6:	1ad2      	subs	r2, r2, r3
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	619a      	str	r2, [r3, #24]
 80049fc:	e002      	b.n	8004a04 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2200      	movs	r2, #0
 8004a02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f040 80b9 	bne.w	8004b80 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	785b      	ldrb	r3, [r3, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d126      	bne.n	8004a64 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	4413      	add	r3, r2
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	011a      	lsls	r2, r3, #4
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	4413      	add	r3, r2
 8004a38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	e01a      	b.n	8004a9a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d116      	bne.n	8004a9a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	4413      	add	r3, r2
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	011a      	lsls	r2, r3, #4
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	2200      	movs	r2, #0
 8004a98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d126      	bne.n	8004af6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	61fb      	str	r3, [r7, #28]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	801a      	strh	r2, [r3, #0]
 8004af4:	e017      	b.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	785b      	ldrb	r3, [r3, #1]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d113      	bne.n	8004b26 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	4413      	add	r3, r2
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	011a      	lsls	r2, r3, #4
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	4413      	add	r3, r2
 8004b1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b1e:	623b      	str	r3, [r7, #32]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	2200      	movs	r2, #0
 8004b24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f005 fdaa 	bl	800a686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 82fc 	beq.w	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	82fb      	strh	r3, [r7, #22]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8afb      	ldrh	r3, [r7, #22]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
 8004b7e:	e2da      	b.n	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d021      	beq.n	8004bce <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 82ae 	bne.w	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004be2:	441a      	add	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d30b      	bcc.n	8004c1a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c12:	1ad2      	subs	r2, r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	621a      	str	r2, [r3, #32]
 8004c18:	e017      	b.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004c22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004c26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004c32:	e00a      	b.n	8004c4a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2200      	movs	r2, #0
 8004c48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	785b      	ldrb	r3, [r3, #1]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d165      	bne.n	8004d1e <HAL_PCD_EP_DB_Transmit+0x382>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c66:	4413      	add	r3, r2
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	011a      	lsls	r2, r3, #4
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	801a      	strh	r2, [r3, #0]
 8004c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c8e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c90:	d91d      	bls.n	8004cce <HAL_PCD_EP_DB_Transmit+0x332>
 8004c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <HAL_PCD_EP_DB_Transmit+0x310>
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	029b      	lsls	r3, r3, #10
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e044      	b.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <HAL_PCD_EP_DB_Transmit+0x350>
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ce0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	e035      	b.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d02:	3301      	adds	r3, #1
 8004d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	029b      	lsls	r3, r3, #10
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	4313      	orrs	r3, r2
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	801a      	strh	r2, [r3, #0]
 8004d1c:	e01c      	b.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	785b      	ldrb	r3, [r3, #1]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d118      	bne.n	8004d58 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	461a      	mov	r2, r3
 8004d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3a:	4413      	add	r3, r2
 8004d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	011a      	lsls	r2, r3, #4
 8004d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d46:	4413      	add	r3, r2
 8004d48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d56:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6959      	ldr	r1, [r3, #20]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	891a      	ldrh	r2, [r3, #8]
 8004d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f003 fe30 	bl	80089ce <USB_WritePMA>
 8004d6e:	e1e2      	b.n	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	3306      	adds	r3, #6
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	6812      	ldr	r2, [r2, #0]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d98:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	699a      	ldr	r2, [r3, #24]
 8004da0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d307      	bcc.n	8004db8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	699a      	ldr	r2, [r3, #24]
 8004dac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004db0:	1ad2      	subs	r2, r2, r3
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	619a      	str	r2, [r3, #24]
 8004db6:	e002      	b.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 80c0 	bne.w	8004f48 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d126      	bne.n	8004e1e <HAL_PCD_EP_DB_Transmit+0x482>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de4:	4413      	add	r3, r2
 8004de6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	011a      	lsls	r2, r3, #4
 8004dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004df0:	4413      	add	r3, r2
 8004df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004df6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e06:	801a      	strh	r2, [r3, #0]
 8004e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	801a      	strh	r2, [r3, #0]
 8004e1c:	e01a      	b.n	8004e54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d116      	bne.n	8004e54 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e3a:	4413      	add	r3, r2
 8004e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	011a      	lsls	r2, r3, #4
 8004e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e46:	4413      	add	r3, r2
 8004e48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e50:	2200      	movs	r2, #0
 8004e52:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	677b      	str	r3, [r7, #116]	; 0x74
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	785b      	ldrb	r3, [r3, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d12b      	bne.n	8004eba <HAL_PCD_EP_DB_Transmit+0x51e>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	4413      	add	r3, r2
 8004e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	011a      	lsls	r2, r3, #4
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	4413      	add	r3, r2
 8004e84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	e017      	b.n	8004eea <HAL_PCD_EP_DB_Transmit+0x54e>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d113      	bne.n	8004eea <HAL_PCD_EP_DB_Transmit+0x54e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed0:	4413      	add	r3, r2
 8004ed2:	677b      	str	r3, [r7, #116]	; 0x74
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011a      	lsls	r2, r3, #4
 8004eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004edc:	4413      	add	r3, r2
 8004ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ee4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f005 fbc8 	bl	800a686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 811a 	bne.w	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e0f6      	b.n	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d121      	bne.n	8004f96 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	441a      	add	r2, r3
 8004f7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	f040 80ca 	bne.w	8005136 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	695a      	ldr	r2, [r3, #20]
 8004fa6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004faa:	441a      	add	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fb8:	441a      	add	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d30b      	bcc.n	8004fe2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fda:	1ad2      	subs	r2, r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	621a      	str	r2, [r3, #32]
 8004fe0:	e017      	b.n	8005012 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d108      	bne.n	8004ffc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004fea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ffa:	e00a      	b.n	8005012 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	657b      	str	r3, [r7, #84]	; 0x54
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d165      	bne.n	80050ec <HAL_PCD_EP_DB_Transmit+0x750>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800502e:	b29b      	uxth	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005034:	4413      	add	r3, r2
 8005036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	011a      	lsls	r2, r3, #4
 800503e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005040:	4413      	add	r3, r2
 8005042:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005046:	65bb      	str	r3, [r7, #88]	; 0x58
 8005048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b29b      	uxth	r3, r3
 800504e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005052:	b29a      	uxth	r2, r3
 8005054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005056:	801a      	strh	r2, [r3, #0]
 8005058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800505c:	2b3e      	cmp	r3, #62	; 0x3e
 800505e:	d91d      	bls.n	800509c <HAL_PCD_EP_DB_Transmit+0x700>
 8005060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	66bb      	str	r3, [r7, #104]	; 0x68
 8005068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506c:	f003 031f 	and.w	r3, r3, #31
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_PCD_EP_DB_Transmit+0x6de>
 8005074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005076:	3b01      	subs	r3, #1
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
 800507a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29a      	uxth	r2, r3
 8005080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005082:	b29b      	uxth	r3, r3
 8005084:	029b      	lsls	r3, r3, #10
 8005086:	b29b      	uxth	r3, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e041      	b.n	8005120 <HAL_PCD_EP_DB_Transmit+0x784>
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <HAL_PCD_EP_DB_Transmit+0x71e>
 80050a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	e032      	b.n	8005120 <HAL_PCD_EP_DB_Transmit+0x784>
 80050ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_PCD_EP_DB_Transmit+0x738>
 80050ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050d0:	3301      	adds	r3, #1
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050dc:	b29b      	uxth	r3, r3
 80050de:	029b      	lsls	r3, r3, #10
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e8:	801a      	strh	r2, [r3, #0]
 80050ea:	e019      	b.n	8005120 <HAL_PCD_EP_DB_Transmit+0x784>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	785b      	ldrb	r3, [r3, #1]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d115      	bne.n	8005120 <HAL_PCD_EP_DB_Transmit+0x784>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005102:	4413      	add	r3, r2
 8005104:	657b      	str	r3, [r7, #84]	; 0x54
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510e:	4413      	add	r3, r2
 8005110:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005114:	653b      	str	r3, [r7, #80]	; 0x50
 8005116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800511a:	b29a      	uxth	r2, r3
 800511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	6959      	ldr	r1, [r3, #20]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	895a      	ldrh	r2, [r3, #10]
 800512c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005130:	b29b      	uxth	r3, r3
 8005132:	f003 fc4c 	bl	80089ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005150:	82bb      	strh	r3, [r7, #20]
 8005152:	8abb      	ldrh	r3, [r7, #20]
 8005154:	f083 0310 	eor.w	r3, r3, #16
 8005158:	82bb      	strh	r3, [r7, #20]
 800515a:	8abb      	ldrh	r3, [r7, #20]
 800515c:	f083 0320 	eor.w	r3, r3, #32
 8005160:	82bb      	strh	r3, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	441a      	add	r2, r3
 8005170:	8abb      	ldrh	r3, [r7, #20]
 8005172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800517a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005182:	b29b      	uxth	r3, r3
 8005184:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3790      	adds	r7, #144	; 0x90
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	607b      	str	r3, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	817b      	strh	r3, [r7, #10]
 800519e:	4613      	mov	r3, r2
 80051a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80051a2:	897b      	ldrh	r3, [r7, #10]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e009      	b.n	80051da <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80051c6:	897a      	ldrh	r2, [r7, #10]
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80051da:	893b      	ldrh	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d107      	bne.n	80051f0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2200      	movs	r2, #0
 80051e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	80da      	strh	r2, [r3, #6]
 80051ee:	e00b      	b.n	8005208 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	2201      	movs	r2, #1
 80051f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0c1b      	lsrs	r3, r3, #16
 8005202:	b29a      	uxth	r2, r3
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e272      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8087 	beq.w	8005342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005234:	4b92      	ldr	r3, [pc, #584]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b04      	cmp	r3, #4
 800523e:	d00c      	beq.n	800525a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005240:	4b8f      	ldr	r3, [pc, #572]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 030c 	and.w	r3, r3, #12
 8005248:	2b08      	cmp	r3, #8
 800524a:	d112      	bne.n	8005272 <HAL_RCC_OscConfig+0x5e>
 800524c:	4b8c      	ldr	r3, [pc, #560]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d10b      	bne.n	8005272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525a:	4b89      	ldr	r3, [pc, #548]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d06c      	beq.n	8005340 <HAL_RCC_OscConfig+0x12c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d168      	bne.n	8005340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e24c      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527a:	d106      	bne.n	800528a <HAL_RCC_OscConfig+0x76>
 800527c:	4b80      	ldr	r3, [pc, #512]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a7f      	ldr	r2, [pc, #508]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e02e      	b.n	80052e8 <HAL_RCC_OscConfig+0xd4>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <HAL_RCC_OscConfig+0x98>
 8005292:	4b7b      	ldr	r3, [pc, #492]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a7a      	ldr	r2, [pc, #488]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4b78      	ldr	r3, [pc, #480]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a77      	ldr	r2, [pc, #476]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e01d      	b.n	80052e8 <HAL_RCC_OscConfig+0xd4>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0xbc>
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a71      	ldr	r2, [pc, #452]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b6f      	ldr	r3, [pc, #444]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6e      	ldr	r2, [pc, #440]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0xd4>
 80052d0:	4b6b      	ldr	r3, [pc, #428]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a6a      	ldr	r2, [pc, #424]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4b68      	ldr	r3, [pc, #416]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a67      	ldr	r2, [pc, #412]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80052e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d013      	beq.n	8005318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fc fa70 	bl	80017d4 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f8:	f7fc fa6c 	bl	80017d4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	; 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e200      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	4b5d      	ldr	r3, [pc, #372]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0xe4>
 8005316:	e014      	b.n	8005342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fc fa5c 	bl	80017d4 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fc fa58 	bl	80017d4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	; 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e1ec      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005332:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x10c>
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d063      	beq.n	8005416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800534e:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800535a:	4b49      	ldr	r3, [pc, #292]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b08      	cmp	r3, #8
 8005364:	d11c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x18c>
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d116      	bne.n	80053a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005372:	4b43      	ldr	r3, [pc, #268]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_RCC_OscConfig+0x176>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d001      	beq.n	800538a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e1c0      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4b3d      	ldr	r3, [pc, #244]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4939      	ldr	r1, [pc, #228]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539e:	e03a      	b.n	8005416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a8:	4b36      	ldr	r3, [pc, #216]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ae:	f7fc fa11 	bl	80017d4 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b6:	f7fc fa0d 	bl	80017d4 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1a1      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c8:	4b2d      	ldr	r3, [pc, #180]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d4:	4b2a      	ldr	r3, [pc, #168]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4927      	ldr	r1, [pc, #156]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]
 80053e8:	e015      	b.n	8005416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ea:	4b26      	ldr	r3, [pc, #152]	; (8005484 <HAL_RCC_OscConfig+0x270>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fc f9f0 	bl	80017d4 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f8:	f7fc f9ec 	bl	80017d4 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e180      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540a:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d03a      	beq.n	8005498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d019      	beq.n	800545e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542a:	4b17      	ldr	r3, [pc, #92]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005430:	f7fc f9d0 	bl	80017d4 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005438:	f7fc f9cc 	bl	80017d4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e160      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <HAL_RCC_OscConfig+0x26c>)
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005456:	2001      	movs	r0, #1
 8005458:	f000 faba 	bl	80059d0 <RCC_Delay>
 800545c:	e01c      	b.n	8005498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <HAL_RCC_OscConfig+0x274>)
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005464:	f7fc f9b6 	bl	80017d4 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800546a:	e00f      	b.n	800548c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546c:	f7fc f9b2 	bl	80017d4 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d908      	bls.n	800548c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e146      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
 800547e:	bf00      	nop
 8005480:	40021000 	.word	0x40021000
 8005484:	42420000 	.word	0x42420000
 8005488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548c:	4b92      	ldr	r3, [pc, #584]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e9      	bne.n	800546c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 80a6 	beq.w	80055f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054aa:	4b8b      	ldr	r3, [pc, #556]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10d      	bne.n	80054d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b6:	4b88      	ldr	r3, [pc, #544]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	4a87      	ldr	r2, [pc, #540]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	61d3      	str	r3, [r2, #28]
 80054c2:	4b85      	ldr	r3, [pc, #532]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d2:	4b82      	ldr	r3, [pc, #520]	; (80056dc <HAL_RCC_OscConfig+0x4c8>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d118      	bne.n	8005510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054de:	4b7f      	ldr	r3, [pc, #508]	; (80056dc <HAL_RCC_OscConfig+0x4c8>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7e      	ldr	r2, [pc, #504]	; (80056dc <HAL_RCC_OscConfig+0x4c8>)
 80054e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ea:	f7fc f973 	bl	80017d4 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f2:	f7fc f96f 	bl	80017d4 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b64      	cmp	r3, #100	; 0x64
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e103      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005504:	4b75      	ldr	r3, [pc, #468]	; (80056dc <HAL_RCC_OscConfig+0x4c8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d106      	bne.n	8005526 <HAL_RCC_OscConfig+0x312>
 8005518:	4b6f      	ldr	r3, [pc, #444]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	4a6e      	ldr	r2, [pc, #440]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	6213      	str	r3, [r2, #32]
 8005524:	e02d      	b.n	8005582 <HAL_RCC_OscConfig+0x36e>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x334>
 800552e:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	4a69      	ldr	r2, [pc, #420]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005534:	f023 0301 	bic.w	r3, r3, #1
 8005538:	6213      	str	r3, [r2, #32]
 800553a:	4b67      	ldr	r3, [pc, #412]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	4a66      	ldr	r2, [pc, #408]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005540:	f023 0304 	bic.w	r3, r3, #4
 8005544:	6213      	str	r3, [r2, #32]
 8005546:	e01c      	b.n	8005582 <HAL_RCC_OscConfig+0x36e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b05      	cmp	r3, #5
 800554e:	d10c      	bne.n	800556a <HAL_RCC_OscConfig+0x356>
 8005550:	4b61      	ldr	r3, [pc, #388]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	4a60      	ldr	r2, [pc, #384]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005556:	f043 0304 	orr.w	r3, r3, #4
 800555a:	6213      	str	r3, [r2, #32]
 800555c:	4b5e      	ldr	r3, [pc, #376]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4a5d      	ldr	r2, [pc, #372]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	6213      	str	r3, [r2, #32]
 8005568:	e00b      	b.n	8005582 <HAL_RCC_OscConfig+0x36e>
 800556a:	4b5b      	ldr	r3, [pc, #364]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4a5a      	ldr	r2, [pc, #360]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	6213      	str	r3, [r2, #32]
 8005576:	4b58      	ldr	r3, [pc, #352]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	4a57      	ldr	r2, [pc, #348]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d015      	beq.n	80055b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558a:	f7fc f923 	bl	80017d4 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005590:	e00a      	b.n	80055a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005592:	f7fc f91f 	bl	80017d4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e0b1      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a8:	4b4b      	ldr	r3, [pc, #300]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ee      	beq.n	8005592 <HAL_RCC_OscConfig+0x37e>
 80055b4:	e014      	b.n	80055e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b6:	f7fc f90d 	bl	80017d4 <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fc f909 	bl	80017d4 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e09b      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d4:	4b40      	ldr	r3, [pc, #256]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1ee      	bne.n	80055be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d105      	bne.n	80055f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e6:	4b3c      	ldr	r3, [pc, #240]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8087 	beq.w	800570a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055fc:	4b36      	ldr	r3, [pc, #216]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	2b08      	cmp	r3, #8
 8005606:	d061      	beq.n	80056cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	2b02      	cmp	r3, #2
 800560e:	d146      	bne.n	800569e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005610:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <HAL_RCC_OscConfig+0x4cc>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005616:	f7fc f8dd 	bl	80017d4 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800561e:	f7fc f8d9 	bl	80017d4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e06d      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005630:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f0      	bne.n	800561e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005644:	d108      	bne.n	8005658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005646:	4b24      	ldr	r3, [pc, #144]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4921      	ldr	r1, [pc, #132]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005654:	4313      	orrs	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005658:	4b1f      	ldr	r3, [pc, #124]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a19      	ldr	r1, [r3, #32]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	430b      	orrs	r3, r1
 800566a:	491b      	ldr	r1, [pc, #108]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_RCC_OscConfig+0x4cc>)
 8005672:	2201      	movs	r2, #1
 8005674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005676:	f7fc f8ad 	bl	80017d4 <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567e:	f7fc f8a9 	bl	80017d4 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e03d      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005690:	4b11      	ldr	r3, [pc, #68]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x46a>
 800569c:	e035      	b.n	800570a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <HAL_RCC_OscConfig+0x4cc>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fc f896 	bl	80017d4 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fc f892 	bl	80017d4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e026      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056be:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <HAL_RCC_OscConfig+0x4c4>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f0      	bne.n	80056ac <HAL_RCC_OscConfig+0x498>
 80056ca:	e01e      	b.n	800570a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d107      	bne.n	80056e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e019      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
 80056d8:	40021000 	.word	0x40021000
 80056dc:	40007000 	.word	0x40007000
 80056e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_OscConfig+0x500>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d106      	bne.n	8005706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005702:	429a      	cmp	r2, r3
 8005704:	d001      	beq.n	800570a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000

08005718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0d0      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800572c:	4b6a      	ldr	r3, [pc, #424]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d910      	bls.n	800575c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b67      	ldr	r3, [pc, #412]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 0207 	bic.w	r2, r3, #7
 8005742:	4965      	ldr	r1, [pc, #404]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574a:	4b63      	ldr	r3, [pc, #396]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d001      	beq.n	800575c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e0b8      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d020      	beq.n	80057aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0304 	and.w	r3, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005774:	4b59      	ldr	r3, [pc, #356]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	4a58      	ldr	r2, [pc, #352]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 800577a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800577e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800578c:	4b53      	ldr	r3, [pc, #332]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	4a52      	ldr	r2, [pc, #328]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005798:	4b50      	ldr	r3, [pc, #320]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	494d      	ldr	r1, [pc, #308]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d040      	beq.n	8005838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d115      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07f      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d107      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d6:	4b41      	ldr	r3, [pc, #260]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e073      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057e6:	4b3d      	ldr	r3, [pc, #244]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e06b      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057f6:	4b39      	ldr	r3, [pc, #228]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f023 0203 	bic.w	r2, r3, #3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4936      	ldr	r1, [pc, #216]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005808:	f7fb ffe4 	bl	80017d4 <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580e:	e00a      	b.n	8005826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005810:	f7fb ffe0 	bl	80017d4 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e053      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005826:	4b2d      	ldr	r3, [pc, #180]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f003 020c 	and.w	r2, r3, #12
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	429a      	cmp	r2, r3
 8005836:	d1eb      	bne.n	8005810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005838:	4b27      	ldr	r3, [pc, #156]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d210      	bcs.n	8005868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 0207 	bic.w	r2, r3, #7
 800584e:	4922      	ldr	r1, [pc, #136]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	4313      	orrs	r3, r2
 8005854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e032      	b.n	80058ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4916      	ldr	r1, [pc, #88]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0308 	and.w	r3, r3, #8
 800588e:	2b00      	cmp	r3, #0
 8005890:	d009      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	490e      	ldr	r1, [pc, #56]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058a6:	f000 f821 	bl	80058ec <HAL_RCC_GetSysClockFreq>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	490a      	ldr	r1, [pc, #40]	; (80058e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058b8:	5ccb      	ldrb	r3, [r1, r3]
 80058ba:	fa22 f303 	lsr.w	r3, r2, r3
 80058be:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <HAL_RCC_ClockConfig+0x1cc>)
 80058c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058c2:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <HAL_RCC_ClockConfig+0x1d0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fb ff42 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40022000 	.word	0x40022000
 80058dc:	40021000 	.word	0x40021000
 80058e0:	0800b574 	.word	0x0800b574
 80058e4:	20000000 	.word	0x20000000
 80058e8:	20000004 	.word	0x20000004

080058ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	2300      	movs	r3, #0
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005902:	2300      	movs	r3, #0
 8005904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005906:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <HAL_RCC_GetSysClockFreq+0x94>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b04      	cmp	r3, #4
 8005914:	d002      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x30>
 8005916:	2b08      	cmp	r3, #8
 8005918:	d003      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x36>
 800591a:	e027      	b.n	800596c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <HAL_RCC_GetSysClockFreq+0x98>)
 800591e:	613b      	str	r3, [r7, #16]
      break;
 8005920:	e027      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	0c9b      	lsrs	r3, r3, #18
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800592c:	5cd3      	ldrb	r3, [r2, r3]
 800592e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800593a:	4b11      	ldr	r3, [pc, #68]	; (8005980 <HAL_RCC_GetSysClockFreq+0x94>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	0c5b      	lsrs	r3, r3, #17
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	4a11      	ldr	r2, [pc, #68]	; (800598c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a0d      	ldr	r2, [pc, #52]	; (8005984 <HAL_RCC_GetSysClockFreq+0x98>)
 800594e:	fb03 f202 	mul.w	r2, r3, r2
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	e004      	b.n	8005966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a0c      	ldr	r2, [pc, #48]	; (8005990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005960:	fb02 f303 	mul.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	613b      	str	r3, [r7, #16]
      break;
 800596a:	e002      	b.n	8005972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800596c:	4b05      	ldr	r3, [pc, #20]	; (8005984 <HAL_RCC_GetSysClockFreq+0x98>)
 800596e:	613b      	str	r3, [r7, #16]
      break;
 8005970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005972:	693b      	ldr	r3, [r7, #16]
}
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
 8005984:	007a1200 	.word	0x007a1200
 8005988:	0800b58c 	.word	0x0800b58c
 800598c:	0800b59c 	.word	0x0800b59c
 8005990:	003d0900 	.word	0x003d0900

08005994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005998:	4b02      	ldr	r3, [pc, #8]	; (80059a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800599a:	681b      	ldr	r3, [r3, #0]
}
 800599c:	4618      	mov	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	20000000 	.word	0x20000000

080059a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059ac:	f7ff fff2 	bl	8005994 <HAL_RCC_GetHCLKFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b05      	ldr	r3, [pc, #20]	; (80059c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	0a1b      	lsrs	r3, r3, #8
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	4903      	ldr	r1, [pc, #12]	; (80059cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	0800b584 	.word	0x0800b584

080059d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059d8:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <RCC_Delay+0x34>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a0a      	ldr	r2, [pc, #40]	; (8005a08 <RCC_Delay+0x38>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	0a5b      	lsrs	r3, r3, #9
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059ec:	bf00      	nop
  }
  while (Delay --);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	60fa      	str	r2, [r7, #12]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f9      	bne.n	80059ec <RCC_Delay+0x1c>
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	20000000 	.word	0x20000000
 8005a08:	10624dd3 	.word	0x10624dd3

08005a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d07d      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2c:	4b4f      	ldr	r3, [pc, #316]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10d      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a38:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	4a4b      	ldr	r2, [pc, #300]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a42:	61d3      	str	r3, [r2, #28]
 8005a44:	4b49      	ldr	r3, [pc, #292]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a50:	2301      	movs	r3, #1
 8005a52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	4b46      	ldr	r3, [pc, #280]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d118      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a60:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a42      	ldr	r2, [pc, #264]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a6c:	f7fb feb2 	bl	80017d4 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	e008      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a74:	f7fb feae 	bl	80017d4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b64      	cmp	r3, #100	; 0x64
 8005a80:	d901      	bls.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e06d      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a86:	4b3a      	ldr	r3, [pc, #232]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0f0      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a92:	4b36      	ldr	r3, [pc, #216]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02e      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d027      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ab0:	4b2e      	ldr	r3, [pc, #184]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ac0:	4b2c      	ldr	r3, [pc, #176]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ac6:	4a29      	ldr	r2, [pc, #164]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d014      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad6:	f7fb fe7d 	bl	80017d4 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005adc:	e00a      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ade:	f7fb fe79 	bl	80017d4 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e036      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af4:	4b1d      	ldr	r3, [pc, #116]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ee      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4917      	ldr	r1, [pc, #92]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d105      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b18:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1a:	69db      	ldr	r3, [r3, #28]
 8005b1c:	4a13      	ldr	r2, [pc, #76]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	490b      	ldr	r1, [pc, #44]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4904      	ldr	r1, [pc, #16]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40007000 	.word	0x40007000
 8005b74:	42420440 	.word	0x42420440

08005b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e041      	b.n	8005c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb fce4 	bl	800156c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f000 fa9a 	bl	80060f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d001      	beq.n	8005c30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e032      	b.n	8005c96 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <HAL_TIM_Base_Start+0x88>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00e      	beq.n	8005c60 <HAL_TIM_Base_Start+0x48>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d009      	beq.n	8005c60 <HAL_TIM_Base_Start+0x48>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a14      	ldr	r2, [pc, #80]	; (8005ca4 <HAL_TIM_Base_Start+0x8c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_TIM_Base_Start+0x48>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a13      	ldr	r2, [pc, #76]	; (8005ca8 <HAL_TIM_Base_Start+0x90>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d111      	bne.n	8005c84 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b06      	cmp	r3, #6
 8005c70:	d010      	beq.n	8005c94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0201 	orr.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c82:	e007      	b.n	8005c94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800

08005cac <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6a1a      	ldr	r2, [r3, #32]
 8005cba:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <HAL_TIM_Base_Stop+0x38>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a1a      	ldr	r2, [r3, #32]
 8005cca:	f240 4344 	movw	r3, #1092	; 0x444
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_TIM_Base_Stop+0x38>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bc80      	pop	{r7}
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d122      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d11b      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f06f 0202 	mvn.w	r2, #2
 8005d24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f003 0303 	and.w	r3, r3, #3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9bd 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005d40:	e005      	b.n	8005d4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9b0 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9bf 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d122      	bne.n	8005da8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d11b      	bne.n	8005da8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0204 	mvn.w	r2, #4
 8005d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d003      	beq.n	8005d96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f993 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005d94:	e005      	b.n	8005da2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f986 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f995 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d122      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0208 	mvn.w	r2, #8
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f969 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f95c 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f96b 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0310 	and.w	r3, r3, #16
 8005e06:	2b10      	cmp	r3, #16
 8005e08:	d122      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d11b      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0210 	mvn.w	r2, #16
 8005e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2208      	movs	r2, #8
 8005e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f93f 	bl	80060ba <HAL_TIM_IC_CaptureCallback>
 8005e3c:	e005      	b.n	8005e4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f932 	bl	80060a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 f941 	bl	80060cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d10e      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0201 	mvn.w	r2, #1
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f90d 	bl	8006096 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e94:	2b80      	cmp	r3, #128	; 0x80
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa83 	bl	80063ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb2:	2b40      	cmp	r3, #64	; 0x40
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f905 	bl	80060de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	d10e      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d107      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0220 	mvn.w	r2, #32
 8005ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa4e 	bl	800639c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_TIM_ConfigClockSource+0x1c>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e0b4      	b.n	800608e <HAL_TIM_ConfigClockSource+0x186>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2202      	movs	r2, #2
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5c:	d03e      	beq.n	8005fdc <HAL_TIM_ConfigClockSource+0xd4>
 8005f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f62:	f200 8087 	bhi.w	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f6a:	f000 8086 	beq.w	800607a <HAL_TIM_ConfigClockSource+0x172>
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	d87f      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b70      	cmp	r3, #112	; 0x70
 8005f76:	d01a      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0xa6>
 8005f78:	2b70      	cmp	r3, #112	; 0x70
 8005f7a:	d87b      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b60      	cmp	r3, #96	; 0x60
 8005f7e:	d050      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0x11a>
 8005f80:	2b60      	cmp	r3, #96	; 0x60
 8005f82:	d877      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f84:	2b50      	cmp	r3, #80	; 0x50
 8005f86:	d03c      	beq.n	8006002 <HAL_TIM_ConfigClockSource+0xfa>
 8005f88:	2b50      	cmp	r3, #80	; 0x50
 8005f8a:	d873      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d058      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x13a>
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d86f      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d064      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x15a>
 8005f98:	2b30      	cmp	r3, #48	; 0x30
 8005f9a:	d86b      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b20      	cmp	r3, #32
 8005f9e:	d060      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x15a>
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	d867      	bhi.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d05c      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x15a>
 8005fa8:	2b10      	cmp	r3, #16
 8005faa:	d05a      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x15a>
 8005fac:	e062      	b.n	8006074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fbe:	f000 f970 	bl	80062a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	609a      	str	r2, [r3, #8]
      break;
 8005fda:	e04f      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fec:	f000 f959 	bl	80062a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ffe:	609a      	str	r2, [r3, #8]
      break;
 8006000:	e03c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	461a      	mov	r2, r3
 8006010:	f000 f8d0 	bl	80061b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2150      	movs	r1, #80	; 0x50
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f927 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006020:	e02c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800602e:	461a      	mov	r2, r3
 8006030:	f000 f8ee 	bl	8006210 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2160      	movs	r1, #96	; 0x60
 800603a:	4618      	mov	r0, r3
 800603c:	f000 f917 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006040:	e01c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	461a      	mov	r2, r3
 8006050:	f000 f8b0 	bl	80061b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2140      	movs	r1, #64	; 0x40
 800605a:	4618      	mov	r0, r3
 800605c:	f000 f907 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006060:	e00c      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f000 f8fe 	bl	800626e <TIM_ITRx_SetConfig>
      break;
 8006072:	e003      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	73fb      	strb	r3, [r7, #15]
      break;
 8006078:	e000      	b.n	800607c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800607a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bc80      	pop	{r7}
 80060ee:	4770      	bx	lr

080060f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a29      	ldr	r2, [pc, #164]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00b      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610e:	d007      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a26      	ldr	r2, [pc, #152]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d003      	beq.n	8006120 <TIM_Base_SetConfig+0x30>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a25      	ldr	r2, [pc, #148]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1c      	ldr	r2, [pc, #112]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a19      	ldr	r2, [pc, #100]	; (80061ac <TIM_Base_SetConfig+0xbc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0x62>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a18      	ldr	r2, [pc, #96]	; (80061b0 <TIM_Base_SetConfig+0xc0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <TIM_Base_SetConfig+0xb8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d103      	bne.n	8006198 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	615a      	str	r2, [r3, #20]
}
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bc80      	pop	{r7}
 80061a6:	4770      	bx	lr
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800

080061b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 030a 	bic.w	r3, r3, #10
 80061f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0210 	bic.w	r2, r3, #16
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800623a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	031b      	lsls	r3, r3, #12
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	bc80      	pop	{r7}
 800626c:	4770      	bx	lr

0800626e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006284:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	f043 0307 	orr.w	r3, r3, #7
 8006290:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	609a      	str	r2, [r3, #8]
}
 8006298:	bf00      	nop
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	bc80      	pop	{r7}
 80062a0:	4770      	bx	lr

080062a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a2:	b480      	push	{r7}
 80062a4:	b087      	sub	sp, #28
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	021a      	lsls	r2, r3, #8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	609a      	str	r2, [r3, #8]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e046      	b.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	4313      	orrs	r3, r2
 8006328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d009      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a12      	ldr	r2, [pc, #72]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a10      	ldr	r2, [pc, #64]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d10c      	bne.n	8006374 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4313      	orrs	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40000400 	.word	0x40000400
 8006398:	40000800 	.word	0x40000800

0800639c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063c0:	b084      	sub	sp, #16
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	f107 0014 	add.w	r0, r7, #20
 80063ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	b004      	add	sp, #16
 80063de:	4770      	bx	lr

080063e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr

0800640c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006414:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006418:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	b29b      	uxth	r3, r3
 8006426:	43db      	mvns	r3, r3
 8006428:	b29b      	uxth	r3, r3
 800642a:	4013      	ands	r3, r2
 800642c:	b29a      	uxth	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006458:	b084      	sub	sp, #16
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	f107 0014 	add.w	r0, r7, #20
 8006466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	b004      	add	sp, #16
 8006496:	4770      	bx	lr

08006498 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006498:	b480      	push	{r7}
 800649a:	b09d      	sub	sp, #116	; 0x74
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	78db      	ldrb	r3, [r3, #3]
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d81f      	bhi.n	800650a <USB_ActivateEndpoint+0x72>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <USB_ActivateEndpoint+0x38>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064e1 	.word	0x080064e1
 80064d4:	080064fd 	.word	0x080064fd
 80064d8:	08006513 	.word	0x08006513
 80064dc:	080064ef 	.word	0x080064ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064ec:	e012      	b.n	8006514 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80064f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80064f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80064fa:	e00b      	b.n	8006514 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80064fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006504:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006508:	e004      	b.n	8006514 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006510:	e000      	b.n	8006514 <USB_ActivateEndpoint+0x7c>
      break;
 8006512:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006532:	b29b      	uxth	r3, r3
 8006534:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b29b      	uxth	r3, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	7b1b      	ldrb	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 8178 	bne.w	8006876 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8084 	beq.w	8006698 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659a:	b29b      	uxth	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	4413      	add	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	011a      	lsls	r2, r3, #4
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	085b      	lsrs	r3, r3, #1
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	827b      	strh	r3, [r7, #18]
 80065d2:	8a7b      	ldrh	r3, [r7, #18]
 80065d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01b      	beq.n	8006614 <USB_ActivateEndpoint+0x17c>
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	823b      	strh	r3, [r7, #16]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	441a      	add	r2, r3
 80065fe:	8a3b      	ldrh	r3, [r7, #16]
 8006600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006610:	b29b      	uxth	r3, r3
 8006612:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	78db      	ldrb	r3, [r3, #3]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d020      	beq.n	800665e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006632:	81bb      	strh	r3, [r7, #12]
 8006634:	89bb      	ldrh	r3, [r7, #12]
 8006636:	f083 0320 	eor.w	r3, r3, #32
 800663a:	81bb      	strh	r3, [r7, #12]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	89bb      	ldrh	r3, [r7, #12]
 8006648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	b29b      	uxth	r3, r3
 800665a:	8013      	strh	r3, [r2, #0]
 800665c:	e2d5      	b.n	8006c0a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006674:	81fb      	strh	r3, [r7, #14]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	441a      	add	r2, r3
 8006680:	89fb      	ldrh	r3, [r7, #14]
 8006682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006692:	b29b      	uxth	r3, r3
 8006694:	8013      	strh	r3, [r2, #0]
 8006696:	e2b8      	b.n	8006c0a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	4413      	add	r3, r2
 80066aa:	633b      	str	r3, [r7, #48]	; 0x30
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	011a      	lsls	r2, r3, #4
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	085b      	lsrs	r3, r3, #1
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	4413      	add	r3, r2
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	011a      	lsls	r2, r3, #4
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	4413      	add	r3, r2
 80066ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b3e      	cmp	r3, #62	; 0x3e
 8006706:	d91d      	bls.n	8006744 <USB_ActivateEndpoint+0x2ac>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <USB_ActivateEndpoint+0x28a>
 800671c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800671e:	3b01      	subs	r3, #1
 8006720:	66bb      	str	r3, [r7, #104]	; 0x68
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29a      	uxth	r2, r3
 8006728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800672a:	b29b      	uxth	r3, r3
 800672c:	029b      	lsls	r3, r3, #10
 800672e:	b29b      	uxth	r3, r3
 8006730:	4313      	orrs	r3, r2
 8006732:	b29b      	uxth	r3, r3
 8006734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673c:	b29a      	uxth	r2, r3
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	e026      	b.n	8006792 <USB_ActivateEndpoint+0x2fa>
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <USB_ActivateEndpoint+0x2ca>
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675a:	b29a      	uxth	r2, r3
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	e017      	b.n	8006792 <USB_ActivateEndpoint+0x2fa>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	085b      	lsrs	r3, r3, #1
 8006768:	66bb      	str	r3, [r7, #104]	; 0x68
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <USB_ActivateEndpoint+0x2e4>
 8006776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006778:	3301      	adds	r3, #1
 800677a:	66bb      	str	r3, [r7, #104]	; 0x68
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29a      	uxth	r2, r3
 8006782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006784:	b29b      	uxth	r3, r3
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	b29b      	uxth	r3, r3
 800678a:	4313      	orrs	r3, r2
 800678c:	b29a      	uxth	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	847b      	strh	r3, [r7, #34]	; 0x22
 80067a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80067a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <USB_ActivateEndpoint+0x34a>
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c0:	843b      	strh	r3, [r7, #32]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	441a      	add	r2, r3
 80067cc:	8c3b      	ldrh	r3, [r7, #32]
 80067ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d124      	bne.n	8006834 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006800:	83bb      	strh	r3, [r7, #28]
 8006802:	8bbb      	ldrh	r3, [r7, #28]
 8006804:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006808:	83bb      	strh	r3, [r7, #28]
 800680a:	8bbb      	ldrh	r3, [r7, #28]
 800680c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006810:	83bb      	strh	r3, [r7, #28]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	441a      	add	r2, r3
 800681c:	8bbb      	ldrh	r3, [r7, #28]
 800681e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800682a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682e:	b29b      	uxth	r3, r3
 8006830:	8013      	strh	r3, [r2, #0]
 8006832:	e1ea      	b.n	8006c0a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4413      	add	r3, r2
 800683e:	881b      	ldrh	r3, [r3, #0]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684a:	83fb      	strh	r3, [r7, #30]
 800684c:	8bfb      	ldrh	r3, [r7, #30]
 800684e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006852:	83fb      	strh	r3, [r7, #30]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	441a      	add	r2, r3
 800685e:	8bfb      	ldrh	r3, [r7, #30]
 8006860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
 8006874:	e1c9      	b.n	8006c0a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	78db      	ldrb	r3, [r3, #3]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d11e      	bne.n	80068bc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006894:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80068a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80068b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	8013      	strh	r3, [r2, #0]
 80068ba:	e01d      	b.n	80068f8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80068ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80068e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006902:	b29b      	uxth	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006908:	4413      	add	r3, r2
 800690a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	011a      	lsls	r2, r3, #4
 8006912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006914:	4413      	add	r3, r2
 8006916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691a:	65bb      	str	r3, [r7, #88]	; 0x58
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	891b      	ldrh	r3, [r3, #8]
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	b29b      	uxth	r3, r3
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	b29a      	uxth	r2, r3
 8006928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800692a:	801a      	strh	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	657b      	str	r3, [r7, #84]	; 0x54
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800693c:	4413      	add	r3, r2
 800693e:	657b      	str	r3, [r7, #84]	; 0x54
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	011a      	lsls	r2, r3, #4
 8006946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006948:	4413      	add	r3, r2
 800694a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800694e:	653b      	str	r3, [r7, #80]	; 0x50
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	895b      	ldrh	r3, [r3, #10]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	b29b      	uxth	r3, r3
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800695e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	785b      	ldrb	r3, [r3, #1]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 8093 	bne.w	8006a90 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	881b      	ldrh	r3, [r3, #0]
 8006976:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800697a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800697e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01b      	beq.n	80069be <USB_ActivateEndpoint+0x526>
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80069cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80069ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01b      	beq.n	8006a0e <USB_ActivateEndpoint+0x576>
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	441a      	add	r2, r3
 80069f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80069fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a34:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	441a      	add	r2, r3
 8006a40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e0bc      	b.n	8006c0a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006aa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01d      	beq.n	8006ae8 <USB_ActivateEndpoint+0x650>
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	441a      	add	r2, r3
 8006ad0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006af8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d01d      	beq.n	8006b40 <USB_ActivateEndpoint+0x6a8>
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	441a      	add	r2, r3
 8006b28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	78db      	ldrb	r3, [r3, #3]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d024      	beq.n	8006b92 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b66:	f083 0320 	eor.w	r3, r3, #32
 8006b6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	441a      	add	r2, r3
 8006b78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
 8006b90:	e01d      	b.n	8006bce <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	441a      	add	r2, r3
 8006bb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	441a      	add	r2, r3
 8006bf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006c0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3774      	adds	r7, #116	; 0x74
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr

08006c18 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b08d      	sub	sp, #52	; 0x34
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	7b1b      	ldrb	r3, [r3, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f040 808e 	bne.w	8006d48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	785b      	ldrb	r3, [r3, #1]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d044      	beq.n	8006cbe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	81bb      	strh	r3, [r7, #12]
 8006c42:	89bb      	ldrh	r3, [r7, #12]
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01b      	beq.n	8006c84 <USB_DeactivateEndpoint+0x6c>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	817b      	strh	r3, [r7, #10]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	441a      	add	r2, r3
 8006c6e:	897b      	ldrh	r3, [r7, #10]
 8006c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9a:	813b      	strh	r3, [r7, #8]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	893b      	ldrh	r3, [r7, #8]
 8006ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	8013      	strh	r3, [r2, #0]
 8006cbc:	e192      	b.n	8006fe4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	827b      	strh	r3, [r7, #18]
 8006ccc:	8a7b      	ldrh	r3, [r7, #18]
 8006cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01b      	beq.n	8006d0e <USB_DeactivateEndpoint+0xf6>
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cec:	823b      	strh	r3, [r7, #16]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	8a3b      	ldrh	r3, [r7, #16]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d24:	81fb      	strh	r3, [r7, #14]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e14d      	b.n	8006fe4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f040 80a5 	bne.w	8006e9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	843b      	strh	r3, [r7, #32]
 8006d60:	8c3b      	ldrh	r3, [r7, #32]
 8006d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01b      	beq.n	8006da2 <USB_DeactivateEndpoint+0x18a>
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d80:	83fb      	strh	r3, [r7, #30]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	441a      	add	r2, r3
 8006d8c:	8bfb      	ldrh	r3, [r7, #30]
 8006d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	83bb      	strh	r3, [r7, #28]
 8006db0:	8bbb      	ldrh	r3, [r7, #28]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01b      	beq.n	8006df2 <USB_DeactivateEndpoint+0x1da>
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	881b      	ldrh	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd0:	837b      	strh	r3, [r7, #26]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	441a      	add	r2, r3
 8006ddc:	8b7b      	ldrh	r3, [r7, #26]
 8006dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	833b      	strh	r3, [r7, #24]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	8b3b      	ldrh	r3, [r7, #24]
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e40:	82fb      	strh	r3, [r7, #22]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	441a      	add	r2, r3
 8006e4c:	8afb      	ldrh	r3, [r7, #22]
 8006e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e78:	82bb      	strh	r3, [r7, #20]
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	441a      	add	r2, r3
 8006e84:	8abb      	ldrh	r3, [r7, #20]
 8006e86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	8013      	strh	r3, [r2, #0]
 8006e9a:	e0a3      	b.n	8006fe4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006eaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01b      	beq.n	8006eec <USB_DeactivateEndpoint+0x2d4>
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	441a      	add	r2, r3
 8006ed6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006efa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01b      	beq.n	8006f3c <USB_DeactivateEndpoint+0x324>
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	441a      	add	r2, r3
 8006f26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f52:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	441a      	add	r2, r3
 8006f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	441a      	add	r2, r3
 8006fce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3734      	adds	r7, #52	; 0x34
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr

08006ff0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b0c2      	sub	sp, #264	; 0x108
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffe:	6018      	str	r0, [r3, #0]
 8007000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007008:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800700a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	2b01      	cmp	r3, #1
 8007018:	f040 86b7 	bne.w	8007d8a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800701c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	429a      	cmp	r2, r3
 8007036:	d908      	bls.n	800704a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007048:	e007      	b.n	800705a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800704a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	7b1b      	ldrb	r3, [r3, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d13a      	bne.n	80070e0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800706a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800706e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6959      	ldr	r1, [r3, #20]
 8007076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	88da      	ldrh	r2, [r3, #6]
 8007082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007086:	b29b      	uxth	r3, r3
 8007088:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800708c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007090:	6800      	ldr	r0, [r0, #0]
 8007092:	f001 fc9c 	bl	80089ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800709a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4413      	add	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	011a      	lsls	r2, r3, #4
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	f000 be1f 	b.w	8007d1e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80070e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	78db      	ldrb	r3, [r3, #3]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	f040 8462 	bne.w	80079b6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80070f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6a1a      	ldr	r2, [r3, #32]
 80070fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	f240 83df 	bls.w	80078ce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800711e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007136:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	441a      	add	r2, r3
 8007154:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800715c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007160:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007168:	b29b      	uxth	r3, r3
 800716a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	1ad2      	subs	r2, r2, r3
 800717e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800718a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 81c7 	beq.w	8007540 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	633b      	str	r3, [r7, #48]	; 0x30
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d177      	bne.n	80072be <USB_EPStartXfer+0x2ce>
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	461a      	mov	r2, r3
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	4413      	add	r3, r2
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	011a      	lsls	r2, r3, #4
 8007200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007202:	4413      	add	r3, r2
 8007204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	b29b      	uxth	r3, r3
 8007210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007214:	b29a      	uxth	r2, r3
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800721e:	2b3e      	cmp	r3, #62	; 0x3e
 8007220:	d921      	bls.n	8007266 <USB_EPStartXfer+0x276>
 8007222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007230:	f003 031f 	and.w	r3, r3, #31
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <USB_EPStartXfer+0x252>
 8007238:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800723c:	3b01      	subs	r3, #1
 800723e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800724c:	b29b      	uxth	r3, r3
 800724e:	029b      	lsls	r3, r3, #10
 8007250:	b29b      	uxth	r3, r3
 8007252:	4313      	orrs	r3, r2
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800725e:	b29a      	uxth	r2, r3
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	801a      	strh	r2, [r3, #0]
 8007264:	e050      	b.n	8007308 <USB_EPStartXfer+0x318>
 8007266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <USB_EPStartXfer+0x294>
 800726e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29b      	uxth	r3, r3
 8007274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800727c:	b29a      	uxth	r2, r3
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e041      	b.n	8007308 <USB_EPStartXfer+0x318>
 8007284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800728e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <USB_EPStartXfer+0x2b4>
 800729a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	029b      	lsls	r3, r3, #10
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	e024      	b.n	8007308 <USB_EPStartXfer+0x318>
 80072be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d11c      	bne.n	8007308 <USB_EPStartXfer+0x318>
 80072ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072dc:	b29b      	uxth	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	4413      	add	r3, r2
 80072e4:	633b      	str	r3, [r7, #48]	; 0x30
 80072e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	011a      	lsls	r2, r3, #4
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	4413      	add	r3, r2
 80072f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007302:	b29a      	uxth	r2, r3
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800730c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	895b      	ldrh	r3, [r3, #10]
 8007314:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800731c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6959      	ldr	r1, [r3, #20]
 8007324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007328:	b29b      	uxth	r3, r3
 800732a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800732e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007332:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007336:	6800      	ldr	r0, [r0, #0]
 8007338:	f001 fb49 	bl	80089ce <USB_WritePMA>
            ep->xfer_buff += len;
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800734c:	441a      	add	r2, r3
 800734e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800735a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6a1a      	ldr	r2, [r3, #32]
 8007366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	429a      	cmp	r2, r3
 8007374:	d90f      	bls.n	8007396 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	621a      	str	r2, [r3, #32]
 8007394:	e00e      	b.n	80073b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800739a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80073a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2200      	movs	r2, #0
 80073b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d177      	bne.n	80074b4 <USB_EPStartXfer+0x4c4>
 80073c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073de:	b29b      	uxth	r3, r3
 80073e0:	461a      	mov	r2, r3
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	4413      	add	r3, r2
 80073e6:	61bb      	str	r3, [r7, #24]
 80073e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	011a      	lsls	r2, r3, #4
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	4413      	add	r3, r2
 80073fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	881b      	ldrh	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800740a:	b29a      	uxth	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007414:	2b3e      	cmp	r3, #62	; 0x3e
 8007416:	d921      	bls.n	800745c <USB_EPStartXfer+0x46c>
 8007418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <USB_EPStartXfer+0x448>
 800742e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007432:	3b01      	subs	r3, #1
 8007434:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	b29a      	uxth	r2, r3
 800743e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007442:	b29b      	uxth	r3, r3
 8007444:	029b      	lsls	r3, r3, #10
 8007446:	b29b      	uxth	r3, r3
 8007448:	4313      	orrs	r3, r2
 800744a:	b29b      	uxth	r3, r3
 800744c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007454:	b29a      	uxth	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	801a      	strh	r2, [r3, #0]
 800745a:	e056      	b.n	800750a <USB_EPStartXfer+0x51a>
 800745c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10a      	bne.n	800747a <USB_EPStartXfer+0x48a>
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007472:	b29a      	uxth	r2, r3
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	801a      	strh	r2, [r3, #0]
 8007478:	e047      	b.n	800750a <USB_EPStartXfer+0x51a>
 800747a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <USB_EPStartXfer+0x4aa>
 8007490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007494:	3301      	adds	r3, #1
 8007496:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29a      	uxth	r2, r3
 80074a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	029b      	lsls	r3, r3, #10
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	801a      	strh	r2, [r3, #0]
 80074b2:	e02a      	b.n	800750a <USB_EPStartXfer+0x51a>
 80074b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d122      	bne.n	800750a <USB_EPStartXfer+0x51a>
 80074c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	623b      	str	r3, [r7, #32]
 80074d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	4413      	add	r3, r2
 80074e6:	623b      	str	r3, [r7, #32]
 80074e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	011a      	lsls	r2, r3, #4
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007504:	b29a      	uxth	r2, r3
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800750a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800750e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	891b      	ldrh	r3, [r3, #8]
 8007516:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800751a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800751e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6959      	ldr	r1, [r3, #20]
 8007526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800752a:	b29b      	uxth	r3, r3
 800752c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007530:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007534:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007538:	6800      	ldr	r0, [r0, #0]
 800753a:	f001 fa48 	bl	80089ce <USB_WritePMA>
 800753e:	e3ee      	b.n	8007d1e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	785b      	ldrb	r3, [r3, #1]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d177      	bne.n	8007640 <USB_EPStartXfer+0x650>
 8007550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	64bb      	str	r3, [r7, #72]	; 0x48
 800755c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007560:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800756a:	b29b      	uxth	r3, r3
 800756c:	461a      	mov	r2, r3
 800756e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007570:	4413      	add	r3, r2
 8007572:	64bb      	str	r3, [r7, #72]	; 0x48
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	011a      	lsls	r2, r3, #4
 8007582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007584:	4413      	add	r3, r2
 8007586:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800758a:	647b      	str	r3, [r7, #68]	; 0x44
 800758c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007596:	b29a      	uxth	r2, r3
 8007598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a0:	2b3e      	cmp	r3, #62	; 0x3e
 80075a2:	d921      	bls.n	80075e8 <USB_EPStartXfer+0x5f8>
 80075a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d104      	bne.n	80075c4 <USB_EPStartXfer+0x5d4>
 80075ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075be:	3b01      	subs	r3, #1
 80075c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80075c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	029b      	lsls	r3, r3, #10
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4313      	orrs	r3, r2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	e056      	b.n	8007696 <USB_EPStartXfer+0x6a6>
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10a      	bne.n	8007606 <USB_EPStartXfer+0x616>
 80075f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fe:	b29a      	uxth	r2, r3
 8007600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007602:	801a      	strh	r2, [r3, #0]
 8007604:	e047      	b.n	8007696 <USB_EPStartXfer+0x6a6>
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760a:	085b      	lsrs	r3, r3, #1
 800760c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b00      	cmp	r3, #0
 800761a:	d004      	beq.n	8007626 <USB_EPStartXfer+0x636>
 800761c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007620:	3301      	adds	r3, #1
 8007622:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007630:	b29b      	uxth	r3, r3
 8007632:	029b      	lsls	r3, r3, #10
 8007634:	b29b      	uxth	r3, r3
 8007636:	4313      	orrs	r3, r2
 8007638:	b29a      	uxth	r2, r3
 800763a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800763c:	801a      	strh	r2, [r3, #0]
 800763e:	e02a      	b.n	8007696 <USB_EPStartXfer+0x6a6>
 8007640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d122      	bne.n	8007696 <USB_EPStartXfer+0x6a6>
 8007650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	653b      	str	r3, [r7, #80]	; 0x50
 800765c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800766a:	b29b      	uxth	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007670:	4413      	add	r3, r2
 8007672:	653b      	str	r3, [r7, #80]	; 0x50
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	011a      	lsls	r2, r3, #4
 8007682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007684:	4413      	add	r3, r2
 8007686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800768a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007690:	b29a      	uxth	r2, r3
 8007692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007694:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800769a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	891b      	ldrh	r3, [r3, #8]
 80076a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6959      	ldr	r1, [r3, #20]
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80076bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80076c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076c4:	6800      	ldr	r0, [r0, #0]
 80076c6:	f001 f982 	bl	80089ce <USB_WritePMA>
            ep->xfer_buff += len;
 80076ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695a      	ldr	r2, [r3, #20]
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076da:	441a      	add	r2, r3
 80076dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a1a      	ldr	r2, [r3, #32]
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	429a      	cmp	r2, r3
 8007702:	d90f      	bls.n	8007724 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6a1a      	ldr	r2, [r3, #32]
 8007710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007714:	1ad2      	subs	r2, r2, r3
 8007716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800771a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	621a      	str	r2, [r3, #32]
 8007722:	e00e      	b.n	8007742 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2200      	movs	r2, #0
 8007740:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	643b      	str	r3, [r7, #64]	; 0x40
 800774e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	785b      	ldrb	r3, [r3, #1]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d177      	bne.n	800784e <USB_EPStartXfer+0x85e>
 800775e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	63bb      	str	r3, [r7, #56]	; 0x38
 800776a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007778:	b29b      	uxth	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777e:	4413      	add	r3, r2
 8007780:	63bb      	str	r3, [r7, #56]	; 0x38
 8007782:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	011a      	lsls	r2, r3, #4
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	4413      	add	r3, r2
 8007794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a8:	801a      	strh	r2, [r3, #0]
 80077aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ae:	2b3e      	cmp	r3, #62	; 0x3e
 80077b0:	d921      	bls.n	80077f6 <USB_EPStartXfer+0x806>
 80077b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b6:	095b      	lsrs	r3, r3, #5
 80077b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <USB_EPStartXfer+0x7e2>
 80077c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077cc:	3b01      	subs	r3, #1
 80077ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80077d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077dc:	b29b      	uxth	r3, r3
 80077de:	029b      	lsls	r3, r3, #10
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	4313      	orrs	r3, r2
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f2:	801a      	strh	r2, [r3, #0]
 80077f4:	e050      	b.n	8007898 <USB_EPStartXfer+0x8a8>
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10a      	bne.n	8007814 <USB_EPStartXfer+0x824>
 80077fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800780c:	b29a      	uxth	r2, r3
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	801a      	strh	r2, [r3, #0]
 8007812:	e041      	b.n	8007898 <USB_EPStartXfer+0x8a8>
 8007814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007818:	085b      	lsrs	r3, r3, #1
 800781a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800781e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <USB_EPStartXfer+0x844>
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800782e:	3301      	adds	r3, #1
 8007830:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	b29a      	uxth	r2, r3
 800783a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800783e:	b29b      	uxth	r3, r3
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	b29b      	uxth	r3, r3
 8007844:	4313      	orrs	r3, r2
 8007846:	b29a      	uxth	r2, r3
 8007848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e024      	b.n	8007898 <USB_EPStartXfer+0x8a8>
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d11c      	bne.n	8007898 <USB_EPStartXfer+0x8a8>
 800785e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007872:	4413      	add	r3, r2
 8007874:	643b      	str	r3, [r7, #64]	; 0x40
 8007876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	011a      	lsls	r2, r3, #4
 8007884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007886:	4413      	add	r3, r2
 8007888:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007892:	b29a      	uxth	r2, r3
 8007894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007896:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800789c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	895b      	ldrh	r3, [r3, #10]
 80078a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6959      	ldr	r1, [r3, #20]
 80078b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80078be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078c6:	6800      	ldr	r0, [r0, #0]
 80078c8:	f001 f881 	bl	80089ce <USB_WritePMA>
 80078cc:	e227      	b.n	8007d1e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80078ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80078de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007904:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800790c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800792a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800792e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007936:	b29b      	uxth	r3, r3
 8007938:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800793a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800793e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800794a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007954:	b29b      	uxth	r3, r3
 8007956:	461a      	mov	r2, r3
 8007958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800795a:	4413      	add	r3, r2
 800795c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	011a      	lsls	r2, r3, #4
 800796c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796e:	4413      	add	r3, r2
 8007970:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007974:	65bb      	str	r3, [r7, #88]	; 0x58
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800797a:	b29a      	uxth	r2, r3
 800797c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800797e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	891b      	ldrh	r3, [r3, #8]
 800798c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6959      	ldr	r1, [r3, #20]
 800799c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80079a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80079aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80079ae:	6800      	ldr	r0, [r0, #0]
 80079b0:	f001 f80d 	bl	80089ce <USB_WritePMA>
 80079b4:	e1b3      	b.n	8007d1e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6a1a      	ldr	r2, [r3, #32]
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 80c6 	beq.w	8007b88 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	673b      	str	r3, [r7, #112]	; 0x70
 8007a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d177      	bne.n	8007b08 <USB_EPStartXfer+0xb18>
 8007a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a38:	4413      	add	r3, r2
 8007a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	011a      	lsls	r2, r3, #4
 8007a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a52:	667b      	str	r3, [r7, #100]	; 0x64
 8007a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a62:	801a      	strh	r2, [r3, #0]
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a68:	2b3e      	cmp	r3, #62	; 0x3e
 8007a6a:	d921      	bls.n	8007ab0 <USB_EPStartXfer+0xac0>
 8007a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a70:	095b      	lsrs	r3, r3, #5
 8007a72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a7a:	f003 031f 	and.w	r3, r3, #31
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d104      	bne.n	8007a8c <USB_EPStartXfer+0xa9c>
 8007a82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a86:	3b01      	subs	r3, #1
 8007a88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e050      	b.n	8007b52 <USB_EPStartXfer+0xb62>
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10a      	bne.n	8007ace <USB_EPStartXfer+0xade>
 8007ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aba:	881b      	ldrh	r3, [r3, #0]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aca:	801a      	strh	r2, [r3, #0]
 8007acc:	e041      	b.n	8007b52 <USB_EPStartXfer+0xb62>
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <USB_EPStartXfer+0xafe>
 8007ae4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ae8:	3301      	adds	r3, #1
 8007aea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	029b      	lsls	r3, r3, #10
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b04:	801a      	strh	r2, [r3, #0]
 8007b06:	e024      	b.n	8007b52 <USB_EPStartXfer+0xb62>
 8007b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d11c      	bne.n	8007b52 <USB_EPStartXfer+0xb62>
 8007b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b2c:	4413      	add	r3, r2
 8007b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	011a      	lsls	r2, r3, #4
 8007b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b40:	4413      	add	r3, r2
 8007b42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	895b      	ldrh	r3, [r3, #10]
 8007b5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6959      	ldr	r1, [r3, #20]
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007b78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007b7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007b80:	6800      	ldr	r0, [r0, #0]
 8007b82:	f000 ff24 	bl	80089ce <USB_WritePMA>
 8007b86:	e0ca      	b.n	8007d1e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	785b      	ldrb	r3, [r3, #1]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d177      	bne.n	8007c88 <USB_EPStartXfer+0xc98>
 8007b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bb8:	4413      	add	r3, r2
 8007bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	011a      	lsls	r2, r3, #4
 8007bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bcc:	4413      	add	r3, r2
 8007bce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be2:	801a      	strh	r2, [r3, #0]
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bea:	d921      	bls.n	8007c30 <USB_EPStartXfer+0xc40>
 8007bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf0:	095b      	lsrs	r3, r3, #5
 8007bf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfa:	f003 031f 	and.w	r3, r3, #31
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <USB_EPStartXfer+0xc1c>
 8007c02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c06:	3b01      	subs	r3, #1
 8007c08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	029b      	lsls	r3, r3, #10
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2c:	801a      	strh	r2, [r3, #0]
 8007c2e:	e05c      	b.n	8007cea <USB_EPStartXfer+0xcfa>
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <USB_EPStartXfer+0xc5e>
 8007c38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c4a:	801a      	strh	r2, [r3, #0]
 8007c4c:	e04d      	b.n	8007cea <USB_EPStartXfer+0xcfa>
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c52:	085b      	lsrs	r3, r3, #1
 8007c54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <USB_EPStartXfer+0xc7e>
 8007c64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c68:	3301      	adds	r3, #1
 8007c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	029b      	lsls	r3, r3, #10
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c84:	801a      	strh	r2, [r3, #0]
 8007c86:	e030      	b.n	8007cea <USB_EPStartXfer+0xcfa>
 8007c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d128      	bne.n	8007cea <USB_EPStartXfer+0xcfa>
 8007c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	011a      	lsls	r2, r3, #4
 8007cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ce8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	891b      	ldrh	r3, [r3, #8]
 8007cf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6959      	ldr	r1, [r3, #20]
 8007d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d18:	6800      	ldr	r0, [r0, #0]
 8007d1a:	f000 fe58 	bl	80089ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d44:	817b      	strh	r3, [r7, #10]
 8007d46:	897b      	ldrh	r3, [r7, #10]
 8007d48:	f083 0310 	eor.w	r3, r3, #16
 8007d4c:	817b      	strh	r3, [r7, #10]
 8007d4e:	897b      	ldrh	r3, [r7, #10]
 8007d50:	f083 0320 	eor.w	r3, r3, #32
 8007d54:	817b      	strh	r3, [r7, #10]
 8007d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	441a      	add	r2, r3
 8007d70:	897b      	ldrh	r3, [r7, #10]
 8007d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	8013      	strh	r3, [r2, #0]
 8007d86:	f000 bcde 	b.w	8008746 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007d8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	7b1b      	ldrb	r3, [r3, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f040 80bb 	bne.w	8007f12 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d917      	bls.n	8007de8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8007dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	699a      	ldr	r2, [r3, #24]
 8007dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	619a      	str	r2, [r3, #24]
 8007de6:	e00e      	b.n	8007e06 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8007df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2200      	movs	r2, #0
 8007e04:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	461a      	mov	r2, r3
 8007e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	011a      	lsls	r2, r3, #4
 8007e3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007e42:	4413      	add	r3, r2
 8007e44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e64:	2b3e      	cmp	r3, #62	; 0x3e
 8007e66:	d924      	bls.n	8007eb2 <USB_EPStartXfer+0xec2>
 8007e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <USB_EPStartXfer+0xe98>
 8007e7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e82:	3b01      	subs	r3, #1
 8007e84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	029b      	lsls	r3, r3, #10
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eac:	801a      	strh	r2, [r3, #0]
 8007eae:	f000 bc10 	b.w	80086d2 <USB_EPStartXfer+0x16e2>
 8007eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10c      	bne.n	8007ed4 <USB_EPStartXfer+0xee4>
 8007eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ed0:	801a      	strh	r2, [r3, #0]
 8007ed2:	e3fe      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
 8007ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <USB_EPStartXfer+0xf04>
 8007eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	029b      	lsls	r3, r3, #10
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4313      	orrs	r3, r2
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e3df      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	78db      	ldrb	r3, [r3, #3]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	f040 8218 	bne.w	8008354 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	785b      	ldrb	r3, [r3, #1]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f040 809d 	bne.w	8008070 <USB_EPStartXfer+0x1080>
 8007f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	011a      	lsls	r2, r3, #4
 8007f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f72:	4413      	add	r3, r2
 8007f74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f8e:	801a      	strh	r2, [r3, #0]
 8007f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007f9e:	d92b      	bls.n	8007ff8 <USB_EPStartXfer+0x1008>
 8007fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	095b      	lsrs	r3, r3, #5
 8007fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 031f 	and.w	r3, r3, #31
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d104      	bne.n	8007fd0 <USB_EPStartXfer+0xfe0>
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fd4:	881b      	ldrh	r3, [r3, #0]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	029b      	lsls	r3, r3, #10
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ff4:	801a      	strh	r2, [r3, #0]
 8007ff6:	e070      	b.n	80080da <USB_EPStartXfer+0x10ea>
 8007ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10c      	bne.n	8008022 <USB_EPStartXfer+0x1032>
 8008008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b29b      	uxth	r3, r3
 8008010:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008014:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008018:	b29a      	uxth	r2, r3
 800801a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800801e:	801a      	strh	r2, [r3, #0]
 8008020:	e05b      	b.n	80080da <USB_EPStartXfer+0x10ea>
 8008022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d004      	beq.n	8008052 <USB_EPStartXfer+0x1062>
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804c:	3301      	adds	r3, #1
 800804e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008056:	881b      	ldrh	r3, [r3, #0]
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	b29b      	uxth	r3, r3
 8008060:	029b      	lsls	r3, r3, #10
 8008062:	b29b      	uxth	r3, r3
 8008064:	4313      	orrs	r3, r2
 8008066:	b29a      	uxth	r2, r3
 8008068:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800806c:	801a      	strh	r2, [r3, #0]
 800806e:	e034      	b.n	80080da <USB_EPStartXfer+0x10ea>
 8008070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d12c      	bne.n	80080da <USB_EPStartXfer+0x10ea>
 8008080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800808e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809c:	b29b      	uxth	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080a4:	4413      	add	r3, r2
 80080a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	011a      	lsls	r2, r3, #4
 80080b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80080bc:	4413      	add	r3, r2
 80080be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080d8:	801a      	strh	r2, [r3, #0]
 80080da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	785b      	ldrb	r3, [r3, #1]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 809d 	bne.w	8008234 <USB_EPStartXfer+0x1244>
 80080fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008116:	b29b      	uxth	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800811e:	4413      	add	r3, r2
 8008120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	011a      	lsls	r2, r3, #4
 8008132:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008136:	4413      	add	r3, r2
 8008138:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800813c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b3e      	cmp	r3, #62	; 0x3e
 8008162:	d92b      	bls.n	80081bc <USB_EPStartXfer+0x11cc>
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691b      	ldr	r3, [r3, #16]
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800817a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <USB_EPStartXfer+0x11a4>
 800818a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818e:	3b01      	subs	r3, #1
 8008190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29a      	uxth	r2, r3
 800819c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	029b      	lsls	r3, r3, #10
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	4313      	orrs	r3, r2
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e069      	b.n	8008290 <USB_EPStartXfer+0x12a0>
 80081bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10c      	bne.n	80081e6 <USB_EPStartXfer+0x11f6>
 80081cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081dc:	b29a      	uxth	r2, r3
 80081de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	e054      	b.n	8008290 <USB_EPStartXfer+0x12a0>
 80081e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	085b      	lsrs	r3, r3, #1
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <USB_EPStartXfer+0x1226>
 800820c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008210:	3301      	adds	r3, #1
 8008212:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008216:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b29a      	uxth	r2, r3
 800821e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008222:	b29b      	uxth	r3, r3
 8008224:	029b      	lsls	r3, r3, #10
 8008226:	b29b      	uxth	r3, r3
 8008228:	4313      	orrs	r3, r2
 800822a:	b29a      	uxth	r2, r3
 800822c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008230:	801a      	strh	r2, [r3, #0]
 8008232:	e02d      	b.n	8008290 <USB_EPStartXfer+0x12a0>
 8008234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d125      	bne.n	8008290 <USB_EPStartXfer+0x12a0>
 8008244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008248:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008252:	b29b      	uxth	r3, r3
 8008254:	461a      	mov	r2, r3
 8008256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800825a:	4413      	add	r3, r2
 800825c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	011a      	lsls	r2, r3, #4
 800826e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008272:	4413      	add	r3, r2
 8008274:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800827c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	b29a      	uxth	r2, r3
 800828a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800828e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 8218 	beq.w	80086d2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80082c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <USB_EPStartXfer+0x12ea>
 80082ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80082d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10d      	bne.n	80082f6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80082de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f040 81f5 	bne.w	80086d2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80082e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80082ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 81ee 	bne.w	80086d2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008324:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	441a      	add	r2, r3
 800833a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800833e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800834e:	b29b      	uxth	r3, r3
 8008350:	8013      	strh	r3, [r2, #0]
 8008352:	e1be      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	78db      	ldrb	r3, [r3, #3]
 8008360:	2b01      	cmp	r3, #1
 8008362:	f040 81b4 	bne.w	80086ce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800836a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	429a      	cmp	r2, r3
 8008380:	d917      	bls.n	80083b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8008392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	619a      	str	r2, [r3, #24]
 80083b0:	e00e      	b.n	80083d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80083b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80083c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2200      	movs	r2, #0
 80083ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80083d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 8085 	bne.w	80084ec <USB_EPStartXfer+0x14fc>
 80083e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083fe:	b29b      	uxth	r3, r3
 8008400:	461a      	mov	r2, r3
 8008402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008406:	4413      	add	r3, r2
 8008408:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800840c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	011a      	lsls	r2, r3, #4
 800841a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800841e:	4413      	add	r3, r2
 8008420:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008424:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008428:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800842c:	881b      	ldrh	r3, [r3, #0]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008434:	b29a      	uxth	r2, r3
 8008436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008440:	2b3e      	cmp	r3, #62	; 0x3e
 8008442:	d923      	bls.n	800848c <USB_EPStartXfer+0x149c>
 8008444:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800844e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008452:	f003 031f 	and.w	r3, r3, #31
 8008456:	2b00      	cmp	r3, #0
 8008458:	d104      	bne.n	8008464 <USB_EPStartXfer+0x1474>
 800845a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800845e:	3b01      	subs	r3, #1
 8008460:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008464:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29a      	uxth	r2, r3
 800846c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008470:	b29b      	uxth	r3, r3
 8008472:	029b      	lsls	r3, r3, #10
 8008474:	b29b      	uxth	r3, r3
 8008476:	4313      	orrs	r3, r2
 8008478:	b29b      	uxth	r3, r3
 800847a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008482:	b29a      	uxth	r2, r3
 8008484:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008488:	801a      	strh	r2, [r3, #0]
 800848a:	e060      	b.n	800854e <USB_EPStartXfer+0x155e>
 800848c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008490:	2b00      	cmp	r3, #0
 8008492:	d10c      	bne.n	80084ae <USB_EPStartXfer+0x14be>
 8008494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084aa:	801a      	strh	r2, [r3, #0]
 80084ac:	e04f      	b.n	800854e <USB_EPStartXfer+0x155e>
 80084ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b2:	085b      	lsrs	r3, r3, #1
 80084b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d004      	beq.n	80084ce <USB_EPStartXfer+0x14de>
 80084c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084c8:	3301      	adds	r3, #1
 80084ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80084ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084d2:	881b      	ldrh	r3, [r3, #0]
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084da:	b29b      	uxth	r3, r3
 80084dc:	029b      	lsls	r3, r3, #10
 80084de:	b29b      	uxth	r3, r3
 80084e0:	4313      	orrs	r3, r2
 80084e2:	b29a      	uxth	r2, r3
 80084e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	e030      	b.n	800854e <USB_EPStartXfer+0x155e>
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	785b      	ldrb	r3, [r3, #1]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d128      	bne.n	800854e <USB_EPStartXfer+0x155e>
 80084fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800850a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800850e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008518:	b29b      	uxth	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008520:	4413      	add	r3, r2
 8008522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	011a      	lsls	r2, r3, #4
 8008534:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008538:	4413      	add	r3, r2
 800853a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800853e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008546:	b29a      	uxth	r2, r3
 8008548:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800854c:	801a      	strh	r2, [r3, #0]
 800854e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008552:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800855c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8085 	bne.w	8008678 <USB_EPStartXfer+0x1688>
 800856e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800858a:	b29b      	uxth	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008592:	4413      	add	r3, r2
 8008594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	011a      	lsls	r2, r3, #4
 80085a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085aa:	4413      	add	r3, r2
 80085ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085b8:	881b      	ldrh	r3, [r3, #0]
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085cc:	2b3e      	cmp	r3, #62	; 0x3e
 80085ce:	d923      	bls.n	8008618 <USB_EPStartXfer+0x1628>
 80085d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085de:	f003 031f 	and.w	r3, r3, #31
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d104      	bne.n	80085f0 <USB_EPStartXfer+0x1600>
 80085e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085ea:	3b01      	subs	r3, #1
 80085ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	029b      	lsls	r3, r3, #10
 8008600:	b29b      	uxth	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b29b      	uxth	r3, r3
 8008606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860e:	b29a      	uxth	r2, r3
 8008610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	e05c      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10c      	bne.n	800863a <USB_EPStartXfer+0x164a>
 8008620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	b29b      	uxth	r3, r3
 8008628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008630:	b29a      	uxth	r2, r3
 8008632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008636:	801a      	strh	r2, [r3, #0]
 8008638:	e04b      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
 800863a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <USB_EPStartXfer+0x166a>
 8008650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008654:	3301      	adds	r3, #1
 8008656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800865a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29a      	uxth	r2, r3
 8008662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008666:	b29b      	uxth	r3, r3
 8008668:	029b      	lsls	r3, r3, #10
 800866a:	b29b      	uxth	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b29a      	uxth	r2, r3
 8008670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008674:	801a      	strh	r2, [r3, #0]
 8008676:	e02c      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
 8008678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	785b      	ldrb	r3, [r3, #1]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d124      	bne.n	80086d2 <USB_EPStartXfer+0x16e2>
 8008688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008696:	b29b      	uxth	r3, r3
 8008698:	461a      	mov	r2, r3
 800869a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800869e:	4413      	add	r3, r2
 80086a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	011a      	lsls	r2, r3, #4
 80086b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086b6:	4413      	add	r3, r2
 80086b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086ca:	801a      	strh	r2, [r3, #0]
 80086cc:	e001      	b.n	80086d2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e03a      	b.n	8008748 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	881b      	ldrh	r3, [r3, #0]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80086fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008700:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008704:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008708:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800870c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008710:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800871c:	681a      	ldr	r2, [r3, #0]
 800871e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	441a      	add	r2, r3
 800872e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008742:	b29b      	uxth	r3, r3
 8008744:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008752:	b480      	push	{r7}
 8008754:	b085      	sub	sp, #20
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	785b      	ldrb	r3, [r3, #1]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d020      	beq.n	80087a6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	b29b      	uxth	r3, r3
 8008772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800877a:	81bb      	strh	r3, [r7, #12]
 800877c:	89bb      	ldrh	r3, [r7, #12]
 800877e:	f083 0310 	eor.w	r3, r3, #16
 8008782:	81bb      	strh	r3, [r7, #12]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	441a      	add	r2, r3
 800878e:	89bb      	ldrh	r3, [r7, #12]
 8008790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800879c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	8013      	strh	r3, [r2, #0]
 80087a4:	e01f      	b.n	80087e6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087bc:	81fb      	strh	r3, [r7, #14]
 80087be:	89fb      	ldrh	r3, [r7, #14]
 80087c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087c4:	81fb      	strh	r3, [r7, #14]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	441a      	add	r2, r3
 80087d0:	89fb      	ldrh	r3, [r7, #14]
 80087d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bc80      	pop	{r7}
 80087f0:	4770      	bx	lr

080087f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b087      	sub	sp, #28
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	7b1b      	ldrb	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f040 809d 	bne.w	8008940 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	785b      	ldrb	r3, [r3, #1]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d04c      	beq.n	80088a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	823b      	strh	r3, [r7, #16]
 800881c:	8a3b      	ldrh	r3, [r7, #16]
 800881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d01b      	beq.n	800885e <USB_EPClearStall+0x6c>
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	881b      	ldrh	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883c:	81fb      	strh	r3, [r7, #14]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	441a      	add	r2, r3
 8008848:	89fb      	ldrh	r3, [r7, #14]
 800884a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800884e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008856:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800885a:	b29b      	uxth	r3, r3
 800885c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	78db      	ldrb	r3, [r3, #3]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d06c      	beq.n	8008940 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800887c:	81bb      	strh	r3, [r7, #12]
 800887e:	89bb      	ldrh	r3, [r7, #12]
 8008880:	f083 0320 	eor.w	r3, r3, #32
 8008884:	81bb      	strh	r3, [r7, #12]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	441a      	add	r2, r3
 8008890:	89bb      	ldrh	r3, [r7, #12]
 8008892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800889a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800889e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	8013      	strh	r3, [r2, #0]
 80088a6:	e04b      	b.n	8008940 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	82fb      	strh	r3, [r7, #22]
 80088b6:	8afb      	ldrh	r3, [r7, #22]
 80088b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d01b      	beq.n	80088f8 <USB_EPClearStall+0x106>
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	4413      	add	r3, r2
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d6:	82bb      	strh	r3, [r7, #20]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	441a      	add	r2, r3
 80088e2:	8abb      	ldrh	r3, [r7, #20]
 80088e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	b29b      	uxth	r3, r3
 8008906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890e:	827b      	strh	r3, [r7, #18]
 8008910:	8a7b      	ldrh	r3, [r7, #18]
 8008912:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008916:	827b      	strh	r3, [r7, #18]
 8008918:	8a7b      	ldrh	r3, [r7, #18]
 800891a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800891e:	827b      	strh	r3, [r7, #18]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	441a      	add	r2, r3
 800892a:	8a7b      	ldrh	r3, [r7, #18]
 800892c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800893c:	b29b      	uxth	r3, r3
 800893e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	371c      	adds	r7, #28
 8008946:	46bd      	mov	sp, r7
 8008948:	bc80      	pop	{r7}
 800894a:	4770      	bx	lr

0800894c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2280      	movs	r2, #128	; 0x80
 8008962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr

08008972 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr

08008986 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	bc80      	pop	{r7}
 8008998:	4770      	bx	lr

0800899a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80089ac:	68fb      	ldr	r3, [r7, #12]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b08b      	sub	sp, #44	; 0x2c
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	60f8      	str	r0, [r7, #12]
 80089d6:	60b9      	str	r1, [r7, #8]
 80089d8:	4611      	mov	r1, r2
 80089da:	461a      	mov	r2, r3
 80089dc:	460b      	mov	r3, r1
 80089de:	80fb      	strh	r3, [r7, #6]
 80089e0:	4613      	mov	r3, r2
 80089e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80089e4:	88bb      	ldrh	r3, [r7, #4]
 80089e6:	3301      	adds	r3, #1
 80089e8:	085b      	lsrs	r3, r3, #1
 80089ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80089f4:	88fb      	ldrh	r3, [r7, #6]
 80089f6:	005a      	lsls	r2, r3, #1
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
 8008a06:	e01e      	b.n	8008a46 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	3301      	adds	r3, #1
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	b21a      	sxth	r2, r3
 8008a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	b21b      	sxth	r3, r3
 8008a20:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	8a7a      	ldrh	r2, [r7, #18]
 8008a26:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	3302      	adds	r3, #2
 8008a2c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	3302      	adds	r3, #2
 8008a32:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	3301      	adds	r3, #1
 8008a38:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	3b01      	subs	r3, #1
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1dd      	bne.n	8008a08 <USB_WritePMA+0x3a>
  }
}
 8008a4c:	bf00      	nop
 8008a4e:	bf00      	nop
 8008a50:	372c      	adds	r7, #44	; 0x2c
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bc80      	pop	{r7}
 8008a56:	4770      	bx	lr

08008a58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b08b      	sub	sp, #44	; 0x2c
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	4611      	mov	r1, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	460b      	mov	r3, r1
 8008a68:	80fb      	strh	r3, [r7, #6]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008a6e:	88bb      	ldrh	r3, [r7, #4]
 8008a70:	085b      	lsrs	r3, r3, #1
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	005a      	lsls	r2, r3, #1
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a90:	e01b      	b.n	8008aca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008a9a:	6a3b      	ldr	r3, [r7, #32]
 8008a9c:	3302      	adds	r3, #2
 8008a9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	0a1b      	lsrs	r3, r3, #8
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	3301      	adds	r3, #1
 8008abc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e0      	bne.n	8008a92 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008ad0:	88bb      	ldrh	r3, [r7, #4]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	701a      	strb	r2, [r3, #0]
  }
}
 8008aec:	bf00      	nop
 8008aee:	372c      	adds	r7, #44	; 0x2c
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bc80      	pop	{r7}
 8008af4:	4770      	bx	lr

08008af6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	7c1b      	ldrb	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d115      	bne.n	8008b3a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b12:	2202      	movs	r2, #2
 8008b14:	2181      	movs	r1, #129	; 0x81
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fe99 	bl	800a84e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b26:	2202      	movs	r2, #2
 8008b28:	2101      	movs	r1, #1
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 fe8f 	bl	800a84e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008b38:	e012      	b.n	8008b60 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008b3a:	2340      	movs	r3, #64	; 0x40
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	2181      	movs	r1, #129	; 0x81
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 fe84 	bl	800a84e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008b4c:	2340      	movs	r3, #64	; 0x40
 8008b4e:	2202      	movs	r2, #2
 8008b50:	2101      	movs	r1, #1
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 fe7b 	bl	800a84e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b60:	2308      	movs	r3, #8
 8008b62:	2203      	movs	r2, #3
 8008b64:	2182      	movs	r1, #130	; 0x82
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 fe71 	bl	800a84e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008b72:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008b76:	f001 ff91 	bl	800aa9c <USBD_static_malloc>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d102      	bne.n	8008b92 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
 8008b90:	e026      	b.n	8008be0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b98:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	7c1b      	ldrb	r3, [r3, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d109      	bne.n	8008bd0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 ff31 	bl	800aa30 <USBD_LL_PrepareReceive>
 8008bce:	e007      	b.n	8008be0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bd6:	2340      	movs	r3, #64	; 0x40
 8008bd8:	2101      	movs	r1, #1
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 ff28 	bl	800aa30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008bfa:	2181      	movs	r1, #129	; 0x81
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f001 fe4c 	bl	800a89a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008c08:	2101      	movs	r1, #1
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 fe45 	bl	800a89a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008c18:	2182      	movs	r1, #130	; 0x82
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f001 fe3d 	bl	800a89a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00e      	beq.n	8008c4e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c40:	4618      	mov	r0, r3
 8008c42:	f001 ff37 	bl	800aab4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c68:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d039      	beq.n	8008cf6 <USBD_CDC_Setup+0x9e>
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	d17f      	bne.n	8008d86 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d029      	beq.n	8008ce2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da11      	bge.n	8008cbc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008ca4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	88d2      	ldrh	r2, [r2, #6]
 8008caa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008cac:	6939      	ldr	r1, [r7, #16]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	88db      	ldrh	r3, [r3, #6]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fa0a 	bl	800a0ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008cba:	e06b      	b.n	8008d94 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	785a      	ldrb	r2, [r3, #1]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	88db      	ldrh	r3, [r3, #6]
 8008cca:	b2da      	uxtb	r2, r3
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008cd2:	6939      	ldr	r1, [r7, #16]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	88db      	ldrh	r3, [r3, #6]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 fa25 	bl	800a12a <USBD_CtlPrepareRx>
      break;
 8008ce0:	e058      	b.n	8008d94 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	7850      	ldrb	r0, [r2, #1]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	4798      	blx	r3
      break;
 8008cf4:	e04e      	b.n	8008d94 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2b0b      	cmp	r3, #11
 8008cfc:	d02e      	beq.n	8008d5c <USBD_CDC_Setup+0x104>
 8008cfe:	2b0b      	cmp	r3, #11
 8008d00:	dc38      	bgt.n	8008d74 <USBD_CDC_Setup+0x11c>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <USBD_CDC_Setup+0xb4>
 8008d06:	2b0a      	cmp	r3, #10
 8008d08:	d014      	beq.n	8008d34 <USBD_CDC_Setup+0xdc>
 8008d0a:	e033      	b.n	8008d74 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d107      	bne.n	8008d26 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008d16:	f107 030c 	add.w	r3, r7, #12
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 f9d5 	bl	800a0ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d24:	e02e      	b.n	8008d84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 f966 	bl	8009ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	75fb      	strb	r3, [r7, #23]
          break;
 8008d32:	e027      	b.n	8008d84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d107      	bne.n	8008d4e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d3e:	f107 030f 	add.w	r3, r7, #15
 8008d42:	2201      	movs	r2, #1
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 f9c1 	bl	800a0ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d4c:	e01a      	b.n	8008d84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 f952 	bl	8009ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8008d56:	2302      	movs	r3, #2
 8008d58:	75fb      	strb	r3, [r7, #23]
          break;
 8008d5a:	e013      	b.n	8008d84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d00d      	beq.n	8008d82 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f946 	bl	8009ffa <USBD_CtlError>
            ret = USBD_FAIL;
 8008d6e:	2302      	movs	r3, #2
 8008d70:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d72:	e006      	b.n	8008d82 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f001 f93f 	bl	8009ffa <USBD_CtlError>
          ret = USBD_FAIL;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	75fb      	strb	r3, [r7, #23]
          break;
 8008d80:	e000      	b.n	8008d84 <USBD_CDC_Setup+0x12c>
          break;
 8008d82:	bf00      	nop
      }
      break;
 8008d84:	e006      	b.n	8008d94 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 f936 	bl	8009ffa <USBD_CtlError>
      ret = USBD_FAIL;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	75fb      	strb	r3, [r7, #23]
      break;
 8008d92:	bf00      	nop
  }

  return ret;
 8008d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008db0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008db8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d03a      	beq.n	8008e3a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008dc4:	78fa      	ldrb	r2, [r7, #3]
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	331c      	adds	r3, #28
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d029      	beq.n	8008e2e <USBD_CDC_DataIn+0x90>
 8008dda:	78fa      	ldrb	r2, [r7, #3]
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	331c      	adds	r3, #28
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	78f9      	ldrb	r1, [r7, #3]
 8008dee:	68b8      	ldr	r0, [r7, #8]
 8008df0:	460b      	mov	r3, r1
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	4403      	add	r3, r0
 8008dfa:	3338      	adds	r3, #56	; 0x38
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e02:	fb01 f303 	mul.w	r3, r1, r3
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d110      	bne.n	8008e2e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008e0c:	78fa      	ldrb	r2, [r7, #3]
 8008e0e:	6879      	ldr	r1, [r7, #4]
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	331c      	adds	r3, #28
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e20:	78f9      	ldrb	r1, [r7, #3]
 8008e22:	2300      	movs	r3, #0
 8008e24:	2200      	movs	r2, #0
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f001 fddf 	bl	800a9ea <USBD_LL_Transmit>
 8008e2c:	e003      	b.n	8008e36 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e000      	b.n	8008e3c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008e3a:	2302      	movs	r3, #2
  }
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 fe0a 	bl	800aa76 <USBD_LL_GetRxDataSize>
 8008e62:	4602      	mov	r2, r0
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4798      	blx	r3

    return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	e000      	b.n	8008e92 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008e90:	2302      	movs	r3, #2
  }
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b084      	sub	sp, #16
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d015      	beq.n	8008ee0 <USBD_CDC_EP0_RxReady+0x46>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008eba:	2bff      	cmp	r3, #255	; 0xff
 8008ebc:	d010      	beq.n	8008ee0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008ecc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008ed4:	b292      	uxth	r2, r2
 8008ed6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	22ff      	movs	r2, #255	; 0xff
 8008edc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2243      	movs	r2, #67	; 0x43
 8008ef8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008efa:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20000094 	.word	0x20000094

08008f0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2243      	movs	r2, #67	; 0x43
 8008f18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008f1a:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bc80      	pop	{r7}
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	20000050 	.word	0x20000050

08008f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2243      	movs	r2, #67	; 0x43
 8008f38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008f3a:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bc80      	pop	{r7}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200000d8 	.word	0x200000d8

08008f4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	220a      	movs	r2, #10
 8008f58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008f5a:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bc80      	pop	{r7}
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	2000000c 	.word	0x2000000c

08008f6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b085      	sub	sp, #20
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008f76:	2302      	movs	r3, #2
 8008f78:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d005      	beq.n	8008f8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bc80      	pop	{r7}
 8008f96:	4770      	bx	lr

08008f98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008fb6:	88fa      	ldrh	r2, [r7, #6]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bc80      	pop	{r7}
 8008fc8:	4770      	bx	lr

08008fca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b085      	sub	sp, #20
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bc80      	pop	{r7}
 8008fee:	4770      	bx	lr

08008ff0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009006:	2b00      	cmp	r3, #0
 8009008:	d01c      	beq.n	8009044 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009010:	2b00      	cmp	r3, #0
 8009012:	d115      	bne.n	8009040 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009032:	b29b      	uxth	r3, r3
 8009034:	2181      	movs	r1, #129	; 0x81
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fcd7 	bl	800a9ea <USBD_LL_Transmit>

      return USBD_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	e002      	b.n	8009046 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009044:	2302      	movs	r3, #2
  }
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800905c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d017      	beq.n	8009098 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7c1b      	ldrb	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d109      	bne.n	8009084 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009076:	f44f 7300 	mov.w	r3, #512	; 0x200
 800907a:	2101      	movs	r1, #1
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 fcd7 	bl	800aa30 <USBD_LL_PrepareReceive>
 8009082:	e007      	b.n	8009094 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800908a:	2340      	movs	r3, #64	; 0x40
 800908c:	2101      	movs	r1, #1
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f001 fcce 	bl	800aa30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	e000      	b.n	800909a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009098:	2302      	movs	r3, #2
  }
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b084      	sub	sp, #16
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	4613      	mov	r3, r2
 80090ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	e01a      	b.n	80090f0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	79fa      	ldrb	r2, [r7, #7]
 80090e6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f001 fb3b 	bl	800a764 <USBD_LL_Init>

  return USBD_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d006      	beq.n	800911a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
 8009118:	e001      	b.n	800911e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800911a:	2302      	movs	r3, #2
 800911c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr

0800912a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fb70 	bl	800a818 <USBD_LL_Start>

  return USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	bc80      	pop	{r7}
 8009154:	4770      	bx	lr

08009156 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009162:	2302      	movs	r3, #2
 8009164:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00c      	beq.n	800918a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	4611      	mov	r1, r2
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800918a:	7bfb      	ldrb	r3, [r7, #15]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	4611      	mov	r1, r2
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	4798      	blx	r3

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fed8 	bl	8009f82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80091e0:	461a      	mov	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80091ee:	f003 031f 	and.w	r3, r3, #31
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d016      	beq.n	8009224 <USBD_LL_SetupStage+0x6a>
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d81c      	bhi.n	8009234 <USBD_LL_SetupStage+0x7a>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <USBD_LL_SetupStage+0x4a>
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d008      	beq.n	8009214 <USBD_LL_SetupStage+0x5a>
 8009202:	e017      	b.n	8009234 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f9cb 	bl	80095a8 <USBD_StdDevReq>
      break;
 8009212:	e01a      	b.n	800924a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fa2d 	bl	800967c <USBD_StdItfReq>
      break;
 8009222:	e012      	b.n	800924a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 fa6d 	bl	800970c <USBD_StdEPReq>
      break;
 8009232:	e00a      	b.n	800924a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800923a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800923e:	b2db      	uxtb	r3, r3
 8009240:	4619      	mov	r1, r3
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fb48 	bl	800a8d8 <USBD_LL_StallEP>
      break;
 8009248:	bf00      	nop
  }

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b086      	sub	sp, #24
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	460b      	mov	r3, r1
 800925e:	607a      	str	r2, [r7, #4]
 8009260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d14b      	bne.n	8009300 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800926e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009276:	2b03      	cmp	r3, #3
 8009278:	d134      	bne.n	80092e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	429a      	cmp	r2, r3
 8009284:	d919      	bls.n	80092ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	1ad2      	subs	r2, r2, r3
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	68da      	ldr	r2, [r3, #12]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800929c:	429a      	cmp	r2, r3
 800929e:	d203      	bcs.n	80092a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	e002      	b.n	80092ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 ff57 	bl	800a166 <USBD_CtlContinueRx>
 80092b8:	e038      	b.n	800932c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d105      	bne.n	80092dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 ff54 	bl	800a18a <USBD_CtlSendStatus>
 80092e2:	e023      	b.n	800932c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d11e      	bne.n	800932c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80092f6:	2100      	movs	r1, #0
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f001 faed 	bl	800a8d8 <USBD_LL_StallEP>
 80092fe:	e015      	b.n	800932c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00d      	beq.n	8009328 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009312:	2b03      	cmp	r3, #3
 8009314:	d108      	bne.n	8009328 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	7afa      	ldrb	r2, [r7, #11]
 8009320:	4611      	mov	r1, r2
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	4798      	blx	r3
 8009326:	e001      	b.n	800932c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009328:	2302      	movs	r3, #2
 800932a:	e000      	b.n	800932e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b086      	sub	sp, #24
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	460b      	mov	r3, r1
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d17f      	bne.n	800944a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3314      	adds	r3, #20
 800934e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009356:	2b02      	cmp	r3, #2
 8009358:	d15c      	bne.n	8009414 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	429a      	cmp	r2, r3
 8009364:	d915      	bls.n	8009392 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	b29b      	uxth	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	6879      	ldr	r1, [r7, #4]
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 fec1 	bl	800a106 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009384:	2300      	movs	r3, #0
 8009386:	2200      	movs	r2, #0
 8009388:	2100      	movs	r1, #0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f001 fb50 	bl	800aa30 <USBD_LL_PrepareReceive>
 8009390:	e04e      	b.n	8009430 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	6912      	ldr	r2, [r2, #16]
 800939a:	fbb3 f1f2 	udiv	r1, r3, r2
 800939e:	fb01 f202 	mul.w	r2, r1, r2
 80093a2:	1a9b      	subs	r3, r3, r2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d11c      	bne.n	80093e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	689a      	ldr	r2, [r3, #8]
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d316      	bcc.n	80093e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80093be:	429a      	cmp	r2, r3
 80093c0:	d20f      	bcs.n	80093e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80093c2:	2200      	movs	r2, #0
 80093c4:	2100      	movs	r1, #0
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fe9d 	bl	800a106 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093d4:	2300      	movs	r3, #0
 80093d6:	2200      	movs	r2, #0
 80093d8:	2100      	movs	r1, #0
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f001 fb28 	bl	800aa30 <USBD_LL_PrepareReceive>
 80093e0:	e026      	b.n	8009430 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d105      	bne.n	8009404 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	68f8      	ldr	r0, [r7, #12]
 8009402:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009404:	2180      	movs	r1, #128	; 0x80
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f001 fa66 	bl	800a8d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 fecf 	bl	800a1b0 <USBD_CtlReceiveStatus>
 8009412:	e00d      	b.n	8009430 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800941a:	2b04      	cmp	r3, #4
 800941c:	d004      	beq.n	8009428 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009424:	2b00      	cmp	r3, #0
 8009426:	d103      	bne.n	8009430 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009428:	2180      	movs	r1, #128	; 0x80
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f001 fa54 	bl	800a8d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d11d      	bne.n	8009476 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fe81 	bl	8009142 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009448:	e015      	b.n	8009476 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00d      	beq.n	8009472 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800945c:	2b03      	cmp	r3, #3
 800945e:	d108      	bne.n	8009472 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	7afa      	ldrb	r2, [r7, #11]
 800946a:	4611      	mov	r1, r2
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	4798      	blx	r3
 8009470:	e001      	b.n	8009476 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009472:	2302      	movs	r3, #2
 8009474:	e000      	b.n	8009478 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009488:	2340      	movs	r3, #64	; 0x40
 800948a:	2200      	movs	r2, #0
 800948c:	2100      	movs	r1, #0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 f9dd 	bl	800a84e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2240      	movs	r2, #64	; 0x40
 80094a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	2200      	movs	r2, #0
 80094a8:	2180      	movs	r1, #128	; 0x80
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f001 f9cf 	bl	800a84e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2240      	movs	r2, #64	; 0x40
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d009      	beq.n	80094f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6852      	ldr	r2, [r2, #4]
 80094f0:	b2d2      	uxtb	r2, r2
 80094f2:	4611      	mov	r1, r2
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
  }

  return USBD_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	bc80      	pop	{r7}
 800951e:	4770      	bx	lr

08009520 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2204      	movs	r2, #4
 8009538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009556:	2b04      	cmp	r3, #4
 8009558:	d105      	bne.n	8009566 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009580:	2b03      	cmp	r3, #3
 8009582:	d10b      	bne.n	800959c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d005      	beq.n	800959c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095be:	2b40      	cmp	r3, #64	; 0x40
 80095c0:	d005      	beq.n	80095ce <USBD_StdDevReq+0x26>
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d84f      	bhi.n	8009666 <USBD_StdDevReq+0xbe>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d009      	beq.n	80095de <USBD_StdDevReq+0x36>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d14b      	bne.n	8009666 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
      break;
 80095dc:	e048      	b.n	8009670 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	785b      	ldrb	r3, [r3, #1]
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d839      	bhi.n	800965a <USBD_StdDevReq+0xb2>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBD_StdDevReq+0x44>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	0800963d 	.word	0x0800963d
 80095f0:	08009651 	.word	0x08009651
 80095f4:	0800965b 	.word	0x0800965b
 80095f8:	08009647 	.word	0x08009647
 80095fc:	0800965b 	.word	0x0800965b
 8009600:	0800961f 	.word	0x0800961f
 8009604:	08009615 	.word	0x08009615
 8009608:	0800965b 	.word	0x0800965b
 800960c:	08009633 	.word	0x08009633
 8009610:	08009629 	.word	0x08009629
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f9dc 	bl	80099d4 <USBD_GetDescriptor>
          break;
 800961c:	e022      	b.n	8009664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fb3f 	bl	8009ca4 <USBD_SetAddress>
          break;
 8009626:	e01d      	b.n	8009664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fb7e 	bl	8009d2c <USBD_SetConfig>
          break;
 8009630:	e018      	b.n	8009664 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fc07 	bl	8009e48 <USBD_GetConfig>
          break;
 800963a:	e013      	b.n	8009664 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fc37 	bl	8009eb2 <USBD_GetStatus>
          break;
 8009644:	e00e      	b.n	8009664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc65 	bl	8009f18 <USBD_SetFeature>
          break;
 800964e:	e009      	b.n	8009664 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009650:	6839      	ldr	r1, [r7, #0]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fc74 	bl	8009f40 <USBD_ClrFeature>
          break;
 8009658:	e004      	b.n	8009664 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fccc 	bl	8009ffa <USBD_CtlError>
          break;
 8009662:	bf00      	nop
      }
      break;
 8009664:	e004      	b.n	8009670 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fcc6 	bl	8009ffa <USBD_CtlError>
      break;
 800966e:	bf00      	nop
  }

  return ret;
 8009670:	7bfb      	ldrb	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop

0800967c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d005      	beq.n	80096a2 <USBD_StdItfReq+0x26>
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d82e      	bhi.n	80096f8 <USBD_StdItfReq+0x7c>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <USBD_StdItfReq+0x26>
 800969e:	2b20      	cmp	r3, #32
 80096a0:	d12a      	bne.n	80096f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a8:	3b01      	subs	r3, #1
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d81d      	bhi.n	80096ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	889b      	ldrh	r3, [r3, #4]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d813      	bhi.n	80096e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	6839      	ldr	r1, [r7, #0]
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	88db      	ldrh	r3, [r3, #6]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d110      	bne.n	80096f4 <USBD_StdItfReq+0x78>
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10d      	bne.n	80096f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 fd56 	bl	800a18a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80096de:	e009      	b.n	80096f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc89 	bl	8009ffa <USBD_CtlError>
          break;
 80096e8:	e004      	b.n	80096f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fc84 	bl	8009ffa <USBD_CtlError>
          break;
 80096f2:	e000      	b.n	80096f6 <USBD_StdItfReq+0x7a>
          break;
 80096f4:	bf00      	nop
      }
      break;
 80096f6:	e004      	b.n	8009702 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fc7d 	bl	8009ffa <USBD_CtlError>
      break;
 8009700:	bf00      	nop
  }

  return USBD_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	889b      	ldrh	r3, [r3, #4]
 800971e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009728:	2b40      	cmp	r3, #64	; 0x40
 800972a:	d007      	beq.n	800973c <USBD_StdEPReq+0x30>
 800972c:	2b40      	cmp	r3, #64	; 0x40
 800972e:	f200 8146 	bhi.w	80099be <USBD_StdEPReq+0x2b2>
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <USBD_StdEPReq+0x40>
 8009736:	2b20      	cmp	r3, #32
 8009738:	f040 8141 	bne.w	80099be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
      break;
 800974a:	e13d      	b.n	80099c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009754:	2b20      	cmp	r3, #32
 8009756:	d10a      	bne.n	800976e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
 8009766:	4603      	mov	r3, r0
 8009768:	73fb      	strb	r3, [r7, #15]

        return ret;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	e12d      	b.n	80099ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b03      	cmp	r3, #3
 8009774:	d007      	beq.n	8009786 <USBD_StdEPReq+0x7a>
 8009776:	2b03      	cmp	r3, #3
 8009778:	f300 811b 	bgt.w	80099b2 <USBD_StdEPReq+0x2a6>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d072      	beq.n	8009866 <USBD_StdEPReq+0x15a>
 8009780:	2b01      	cmp	r3, #1
 8009782:	d03a      	beq.n	80097fa <USBD_StdEPReq+0xee>
 8009784:	e115      	b.n	80099b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	2b02      	cmp	r3, #2
 800978e:	d002      	beq.n	8009796 <USBD_StdEPReq+0x8a>
 8009790:	2b03      	cmp	r3, #3
 8009792:	d015      	beq.n	80097c0 <USBD_StdEPReq+0xb4>
 8009794:	e02b      	b.n	80097ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00c      	beq.n	80097b6 <USBD_StdEPReq+0xaa>
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2b80      	cmp	r3, #128	; 0x80
 80097a0:	d009      	beq.n	80097b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 f896 	bl	800a8d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80097ac:	2180      	movs	r1, #128	; 0x80
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f892 	bl	800a8d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80097b4:	e020      	b.n	80097f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fc1e 	bl	8009ffa <USBD_CtlError>
              break;
 80097be:	e01b      	b.n	80097f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	885b      	ldrh	r3, [r3, #2]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10e      	bne.n	80097e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <USBD_StdEPReq+0xda>
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b80      	cmp	r3, #128	; 0x80
 80097d2:	d008      	beq.n	80097e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	88db      	ldrh	r3, [r3, #6]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f001 f879 	bl	800a8d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fccf 	bl	800a18a <USBD_CtlSendStatus>

              break;
 80097ec:	e004      	b.n	80097f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fc02 	bl	8009ffa <USBD_CtlError>
              break;
 80097f6:	bf00      	nop
          }
          break;
 80097f8:	e0e0      	b.n	80099bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009800:	2b02      	cmp	r3, #2
 8009802:	d002      	beq.n	800980a <USBD_StdEPReq+0xfe>
 8009804:	2b03      	cmp	r3, #3
 8009806:	d015      	beq.n	8009834 <USBD_StdEPReq+0x128>
 8009808:	e026      	b.n	8009858 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00c      	beq.n	800982a <USBD_StdEPReq+0x11e>
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b80      	cmp	r3, #128	; 0x80
 8009814:	d009      	beq.n	800982a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009816:	7bbb      	ldrb	r3, [r7, #14]
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 f85c 	bl	800a8d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009820:	2180      	movs	r1, #128	; 0x80
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 f858 	bl	800a8d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009828:	e01c      	b.n	8009864 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fbe4 	bl	8009ffa <USBD_CtlError>
              break;
 8009832:	e017      	b.n	8009864 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	885b      	ldrh	r3, [r3, #2]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d112      	bne.n	8009862 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800983c:	7bbb      	ldrb	r3, [r7, #14]
 800983e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009842:	2b00      	cmp	r3, #0
 8009844:	d004      	beq.n	8009850 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f001 f863 	bl	800a916 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 fc9a 	bl	800a18a <USBD_CtlSendStatus>
              }
              break;
 8009856:	e004      	b.n	8009862 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fbcd 	bl	8009ffa <USBD_CtlError>
              break;
 8009860:	e000      	b.n	8009864 <USBD_StdEPReq+0x158>
              break;
 8009862:	bf00      	nop
          }
          break;
 8009864:	e0aa      	b.n	80099bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986c:	2b02      	cmp	r3, #2
 800986e:	d002      	beq.n	8009876 <USBD_StdEPReq+0x16a>
 8009870:	2b03      	cmp	r3, #3
 8009872:	d032      	beq.n	80098da <USBD_StdEPReq+0x1ce>
 8009874:	e097      	b.n	80099a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d007      	beq.n	800988c <USBD_StdEPReq+0x180>
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	2b80      	cmp	r3, #128	; 0x80
 8009880:	d004      	beq.n	800988c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fbb8 	bl	8009ffa <USBD_CtlError>
                break;
 800988a:	e091      	b.n	80099b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800988c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009890:	2b00      	cmp	r3, #0
 8009892:	da0b      	bge.n	80098ac <USBD_StdEPReq+0x1a0>
 8009894:	7bbb      	ldrb	r3, [r7, #14]
 8009896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	3310      	adds	r3, #16
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4413      	add	r3, r2
 80098a8:	3304      	adds	r3, #4
 80098aa:	e00b      	b.n	80098c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	3304      	adds	r3, #4
 80098c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2200      	movs	r2, #0
 80098ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2202      	movs	r2, #2
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fbfb 	bl	800a0ce <USBD_CtlSendData>
              break;
 80098d8:	e06a      	b.n	80099b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80098da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da11      	bge.n	8009906 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	f003 020f 	and.w	r2, r3, #15
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	440b      	add	r3, r1
 80098f4:	3318      	adds	r3, #24
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d117      	bne.n	800992c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fb7b 	bl	8009ffa <USBD_CtlError>
                  break;
 8009904:	e054      	b.n	80099b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009906:	7bbb      	ldrb	r3, [r7, #14]
 8009908:	f003 020f 	and.w	r2, r3, #15
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d104      	bne.n	800992c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 fb68 	bl	8009ffa <USBD_CtlError>
                  break;
 800992a:	e041      	b.n	80099b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800992c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009930:	2b00      	cmp	r3, #0
 8009932:	da0b      	bge.n	800994c <USBD_StdEPReq+0x240>
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800993a:	4613      	mov	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	3310      	adds	r3, #16
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	4413      	add	r3, r2
 8009948:	3304      	adds	r3, #4
 800994a:	e00b      	b.n	8009964 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	4413      	add	r3, r2
 8009962:	3304      	adds	r3, #4
 8009964:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <USBD_StdEPReq+0x266>
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b80      	cmp	r3, #128	; 0x80
 8009970:	d103      	bne.n	800997a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	2200      	movs	r2, #0
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e00e      	b.n	8009998 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800997a:	7bbb      	ldrb	r3, [r7, #14]
 800997c:	4619      	mov	r1, r3
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 ffe8 	bl	800a954 <USBD_LL_IsStallEP>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2201      	movs	r2, #1
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	e002      	b.n	8009998 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2202      	movs	r2, #2
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fb95 	bl	800a0ce <USBD_CtlSendData>
              break;
 80099a4:	e004      	b.n	80099b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fb26 	bl	8009ffa <USBD_CtlError>
              break;
 80099ae:	bf00      	nop
          }
          break;
 80099b0:	e004      	b.n	80099bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fb20 	bl	8009ffa <USBD_CtlError>
          break;
 80099ba:	bf00      	nop
      }
      break;
 80099bc:	e004      	b.n	80099c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb1a 	bl	8009ffa <USBD_CtlError>
      break;
 80099c6:	bf00      	nop
  }

  return ret;
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	885b      	ldrh	r3, [r3, #2]
 80099ee:	0a1b      	lsrs	r3, r3, #8
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	3b01      	subs	r3, #1
 80099f4:	2b06      	cmp	r3, #6
 80099f6:	f200 8128 	bhi.w	8009c4a <USBD_GetDescriptor+0x276>
 80099fa:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <USBD_GetDescriptor+0x2c>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a1d 	.word	0x08009a1d
 8009a04:	08009a35 	.word	0x08009a35
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009c4b 	.word	0x08009c4b
 8009a10:	08009c4b 	.word	0x08009c4b
 8009a14:	08009beb 	.word	0x08009beb
 8009a18:	08009c17 	.word	0x08009c17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	7c12      	ldrb	r2, [r2, #16]
 8009a28:	f107 0108 	add.w	r1, r7, #8
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	4798      	blx	r3
 8009a30:	60f8      	str	r0, [r7, #12]
      break;
 8009a32:	e112      	b.n	8009c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	7c1b      	ldrb	r3, [r3, #16]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10d      	bne.n	8009a58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a44:	f107 0208 	add.w	r2, r7, #8
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4798      	blx	r3
 8009a4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3301      	adds	r3, #1
 8009a52:	2202      	movs	r2, #2
 8009a54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009a56:	e100      	b.n	8009c5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	f107 0208 	add.w	r2, r7, #8
 8009a64:	4610      	mov	r0, r2
 8009a66:	4798      	blx	r3
 8009a68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	2202      	movs	r2, #2
 8009a70:	701a      	strb	r2, [r3, #0]
      break;
 8009a72:	e0f2      	b.n	8009c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	885b      	ldrh	r3, [r3, #2]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b05      	cmp	r3, #5
 8009a7c:	f200 80ac 	bhi.w	8009bd8 <USBD_GetDescriptor+0x204>
 8009a80:	a201      	add	r2, pc, #4	; (adr r2, 8009a88 <USBD_GetDescriptor+0xb4>)
 8009a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a86:	bf00      	nop
 8009a88:	08009aa1 	.word	0x08009aa1
 8009a8c:	08009ad5 	.word	0x08009ad5
 8009a90:	08009b09 	.word	0x08009b09
 8009a94:	08009b3d 	.word	0x08009b3d
 8009a98:	08009b71 	.word	0x08009b71
 8009a9c:	08009ba5 	.word	0x08009ba5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac2:	e091      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa97 	bl	8009ffa <USBD_CtlError>
            err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad2:	e089      	b.n	8009be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e077      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa7d 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e06f      	b.n	8009be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00b      	beq.n	8009b2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	7c12      	ldrb	r2, [r2, #16]
 8009b20:	f107 0108 	add.w	r1, r7, #8
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
 8009b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2a:	e05d      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fa63 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b34:	7afb      	ldrb	r3, [r7, #11]
 8009b36:	3301      	adds	r3, #1
 8009b38:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3a:	e055      	b.n	8009be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	7c12      	ldrb	r2, [r2, #16]
 8009b54:	f107 0108 	add.w	r1, r7, #8
 8009b58:	4610      	mov	r0, r2
 8009b5a:	4798      	blx	r3
 8009b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b5e:	e043      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fa49 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b68:	7afb      	ldrb	r3, [r7, #11]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b6e:	e03b      	b.n	8009be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b76:	695b      	ldr	r3, [r3, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	7c12      	ldrb	r2, [r2, #16]
 8009b88:	f107 0108 	add.w	r1, r7, #8
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	4798      	blx	r3
 8009b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b92:	e029      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fa2f 	bl	8009ffa <USBD_CtlError>
            err++;
 8009b9c:	7afb      	ldrb	r3, [r7, #11]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ba2:	e021      	b.n	8009be8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009bc6:	e00f      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa15 	bl	8009ffa <USBD_CtlError>
            err++;
 8009bd0:	7afb      	ldrb	r3, [r7, #11]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009bd6:	e007      	b.n	8009be8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa0d 	bl	8009ffa <USBD_CtlError>
          err++;
 8009be0:	7afb      	ldrb	r3, [r7, #11]
 8009be2:	3301      	adds	r3, #1
 8009be4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009be6:	e038      	b.n	8009c5a <USBD_GetDescriptor+0x286>
 8009be8:	e037      	b.n	8009c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	7c1b      	ldrb	r3, [r3, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d109      	bne.n	8009c06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bfa:	f107 0208 	add.w	r2, r7, #8
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4798      	blx	r3
 8009c02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c04:	e029      	b.n	8009c5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c06:	6839      	ldr	r1, [r7, #0]
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 f9f6 	bl	8009ffa <USBD_CtlError>
        err++;
 8009c0e:	7afb      	ldrb	r3, [r7, #11]
 8009c10:	3301      	adds	r3, #1
 8009c12:	72fb      	strb	r3, [r7, #11]
      break;
 8009c14:	e021      	b.n	8009c5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	7c1b      	ldrb	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10d      	bne.n	8009c3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c26:	f107 0208 	add.w	r2, r7, #8
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	4798      	blx	r3
 8009c2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	2207      	movs	r2, #7
 8009c36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009c38:	e00f      	b.n	8009c5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f9dc 	bl	8009ffa <USBD_CtlError>
        err++;
 8009c42:	7afb      	ldrb	r3, [r7, #11]
 8009c44:	3301      	adds	r3, #1
 8009c46:	72fb      	strb	r3, [r7, #11]
      break;
 8009c48:	e007      	b.n	8009c5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f9d4 	bl	8009ffa <USBD_CtlError>
      err++;
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	3301      	adds	r3, #1
 8009c56:	72fb      	strb	r3, [r7, #11]
      break;
 8009c58:	bf00      	nop
  }

  if (err != 0U)
 8009c5a:	7afb      	ldrb	r3, [r7, #11]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d11c      	bne.n	8009c9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009c60:	893b      	ldrh	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d011      	beq.n	8009c8a <USBD_GetDescriptor+0x2b6>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	88db      	ldrh	r3, [r3, #6]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00d      	beq.n	8009c8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	88da      	ldrh	r2, [r3, #6]
 8009c72:	893b      	ldrh	r3, [r7, #8]
 8009c74:	4293      	cmp	r3, r2
 8009c76:	bf28      	it	cs
 8009c78:	4613      	movcs	r3, r2
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c7e:	893b      	ldrh	r3, [r7, #8]
 8009c80:	461a      	mov	r2, r3
 8009c82:	68f9      	ldr	r1, [r7, #12]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fa22 	bl	800a0ce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	88db      	ldrh	r3, [r3, #6]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa79 	bl	800a18a <USBD_CtlSendStatus>
 8009c98:	e000      	b.n	8009c9c <USBD_GetDescriptor+0x2c8>
    return;
 8009c9a:	bf00      	nop
    }
  }
}
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop

08009ca4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	889b      	ldrh	r3, [r3, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d130      	bne.n	8009d18 <USBD_SetAddress+0x74>
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	88db      	ldrh	r3, [r3, #6]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d12c      	bne.n	8009d18 <USBD_SetAddress+0x74>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	885b      	ldrh	r3, [r3, #2]
 8009cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8009cc4:	d828      	bhi.n	8009d18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d104      	bne.n	8009ce6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f98b 	bl	8009ffa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ce4:	e01d      	b.n	8009d22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7bfa      	ldrb	r2, [r7, #15]
 8009cea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fe5a 	bl	800a9ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fa46 	bl	800a18a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d0c:	e009      	b.n	8009d22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d16:	e004      	b.n	8009d22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f96d 	bl	8009ffa <USBD_CtlError>
  }
}
 8009d20:	bf00      	nop
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	885b      	ldrh	r3, [r3, #2]
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	4b41      	ldr	r3, [pc, #260]	; (8009e44 <USBD_SetConfig+0x118>)
 8009d3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009d40:	4b40      	ldr	r3, [pc, #256]	; (8009e44 <USBD_SetConfig+0x118>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d904      	bls.n	8009d52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f955 	bl	8009ffa <USBD_CtlError>
 8009d50:	e075      	b.n	8009e3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d002      	beq.n	8009d62 <USBD_SetConfig+0x36>
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d023      	beq.n	8009da8 <USBD_SetConfig+0x7c>
 8009d60:	e062      	b.n	8009e28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009d62:	4b38      	ldr	r3, [pc, #224]	; (8009e44 <USBD_SetConfig+0x118>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d01a      	beq.n	8009da0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009d6a:	4b36      	ldr	r3, [pc, #216]	; (8009e44 <USBD_SetConfig+0x118>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2203      	movs	r2, #3
 8009d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d7c:	4b31      	ldr	r3, [pc, #196]	; (8009e44 <USBD_SetConfig+0x118>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff f9e7 	bl	8009156 <USBD_SetClassConfig>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d104      	bne.n	8009d98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f932 	bl	8009ffa <USBD_CtlError>
            return;
 8009d96:	e052      	b.n	8009e3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f9f6 	bl	800a18a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d9e:	e04e      	b.n	8009e3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f9f2 	bl	800a18a <USBD_CtlSendStatus>
        break;
 8009da6:	e04a      	b.n	8009e3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009da8:	4b26      	ldr	r3, [pc, #152]	; (8009e44 <USBD_SetConfig+0x118>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d112      	bne.n	8009dd6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009db8:	4b22      	ldr	r3, [pc, #136]	; (8009e44 <USBD_SetConfig+0x118>)
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009dc2:	4b20      	ldr	r3, [pc, #128]	; (8009e44 <USBD_SetConfig+0x118>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f7ff f9e3 	bl	8009194 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f9db 	bl	800a18a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009dd4:	e033      	b.n	8009e3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009dd6:	4b1b      	ldr	r3, [pc, #108]	; (8009e44 <USBD_SetConfig+0x118>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d01d      	beq.n	8009e20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff f9d1 	bl	8009194 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009df2:	4b14      	ldr	r3, [pc, #80]	; (8009e44 <USBD_SetConfig+0x118>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009dfc:	4b11      	ldr	r3, [pc, #68]	; (8009e44 <USBD_SetConfig+0x118>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff f9a7 	bl	8009156 <USBD_SetClassConfig>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d104      	bne.n	8009e18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f8f2 	bl	8009ffa <USBD_CtlError>
            return;
 8009e16:	e012      	b.n	8009e3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f9b6 	bl	800a18a <USBD_CtlSendStatus>
        break;
 8009e1e:	e00e      	b.n	8009e3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 f9b2 	bl	800a18a <USBD_CtlSendStatus>
        break;
 8009e26:	e00a      	b.n	8009e3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f8e5 	bl	8009ffa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009e30:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <USBD_SetConfig+0x118>)
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f7ff f9ac 	bl	8009194 <USBD_ClrClassConfig>
        break;
 8009e3c:	bf00      	nop
    }
  }
}
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	20000488 	.word	0x20000488

08009e48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	88db      	ldrh	r3, [r3, #6]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d004      	beq.n	8009e64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f8cc 	bl	8009ffa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e62:	e022      	b.n	8009eaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	dc02      	bgt.n	8009e74 <USBD_GetConfig+0x2c>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	dc03      	bgt.n	8009e7a <USBD_GetConfig+0x32>
 8009e72:	e015      	b.n	8009ea0 <USBD_GetConfig+0x58>
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetConfig+0x48>
 8009e78:	e012      	b.n	8009ea0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3308      	adds	r3, #8
 8009e84:	2201      	movs	r2, #1
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f920 	bl	800a0ce <USBD_CtlSendData>
        break;
 8009e8e:	e00c      	b.n	8009eaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	3304      	adds	r3, #4
 8009e94:	2201      	movs	r2, #1
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f918 	bl	800a0ce <USBD_CtlSendData>
        break;
 8009e9e:	e004      	b.n	8009eaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f8a9 	bl	8009ffa <USBD_CtlError>
        break;
 8009ea8:	bf00      	nop
}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d81e      	bhi.n	8009f06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	88db      	ldrh	r3, [r3, #6]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d004      	beq.n	8009eda <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 f891 	bl	8009ffa <USBD_CtlError>
        break;
 8009ed8:	e01a      	b.n	8009f10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f043 0202 	orr.w	r2, r3, #2
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	2202      	movs	r2, #2
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f8e5 	bl	800a0ce <USBD_CtlSendData>
      break;
 8009f04:	e004      	b.n	8009f10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f876 	bl	8009ffa <USBD_CtlError>
      break;
 8009f0e:	bf00      	nop
  }
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	885b      	ldrh	r3, [r3, #2]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d106      	bne.n	8009f38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f929 	bl	800a18a <USBD_CtlSendStatus>
  }
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f50:	3b01      	subs	r3, #1
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d80b      	bhi.n	8009f6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	885b      	ldrh	r3, [r3, #2]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d10c      	bne.n	8009f78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f90f 	bl	800a18a <USBD_CtlSendStatus>
      }
      break;
 8009f6c:	e004      	b.n	8009f78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f842 	bl	8009ffa <USBD_CtlError>
      break;
 8009f76:	e000      	b.n	8009f7a <USBD_ClrFeature+0x3a>
      break;
 8009f78:	bf00      	nop
  }
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	785a      	ldrb	r2, [r3, #1]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	3303      	adds	r3, #3
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4413      	add	r3, r2
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	3305      	adds	r3, #5
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4413      	add	r3, r2
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	3306      	adds	r3, #6
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	3307      	adds	r3, #7
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	021b      	lsls	r3, r3, #8
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4413      	add	r3, r2
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	80da      	strh	r2, [r3, #6]

}
 8009ff0:	bf00      	nop
 8009ff2:	370c      	adds	r7, #12
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr

08009ffa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a004:	2180      	movs	r1, #128	; 0x80
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fc66 	bl	800a8d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a00c:	2100      	movs	r1, #0
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fc62 	bl	800a8d8 <USBD_LL_StallEP>
}
 800a014:	bf00      	nop
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d032      	beq.n	800a098 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 f834 	bl	800a0a0 <USBD_GetLen>
 800a038:	4603      	mov	r3, r0
 800a03a:	3301      	adds	r3, #1
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	75fa      	strb	r2, [r7, #23]
 800a04c:	461a      	mov	r2, r3
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	4413      	add	r3, r2
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	7812      	ldrb	r2, [r2, #0]
 800a056:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	75fa      	strb	r2, [r7, #23]
 800a05e:	461a      	mov	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	4413      	add	r3, r2
 800a064:	2203      	movs	r2, #3
 800a066:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a068:	e012      	b.n	800a090 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	60fa      	str	r2, [r7, #12]
 800a070:	7dfa      	ldrb	r2, [r7, #23]
 800a072:	1c51      	adds	r1, r2, #1
 800a074:	75f9      	strb	r1, [r7, #23]
 800a076:	4611      	mov	r1, r2
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	440a      	add	r2, r1
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a080:	7dfb      	ldrb	r3, [r7, #23]
 800a082:	1c5a      	adds	r2, r3, #1
 800a084:	75fa      	strb	r2, [r7, #23]
 800a086:	461a      	mov	r2, r3
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	4413      	add	r3, r2
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e8      	bne.n	800a06a <USBD_GetString+0x4e>
    }
  }
}
 800a098:	bf00      	nop
 800a09a:	3718      	adds	r7, #24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a0ac:	e005      	b.n	800a0ba <USBD_GetLen+0x1a>
  {
    len++;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f5      	bne.n	800a0ae <USBD_GetLen+0xe>
  }

  return len;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr

0800a0ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0e4:	88fa      	ldrh	r2, [r7, #6]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 fc77 	bl	800a9ea <USBD_LL_Transmit>

  return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	4613      	mov	r3, r2
 800a112:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a114:	88fb      	ldrh	r3, [r7, #6]
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	2100      	movs	r1, #0
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fc65 	bl	800a9ea <USBD_LL_Transmit>

  return USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	60b9      	str	r1, [r7, #8]
 800a134:	4613      	mov	r3, r2
 800a136:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2203      	movs	r2, #3
 800a13c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a140:	88fa      	ldrh	r2, [r7, #6]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a148:	88fa      	ldrh	r2, [r7, #6]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a150:	88fb      	ldrh	r3, [r7, #6]
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	2100      	movs	r1, #0
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 fc6a 	bl	800aa30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	60f8      	str	r0, [r7, #12]
 800a16e:	60b9      	str	r1, [r7, #8]
 800a170:	4613      	mov	r3, r2
 800a172:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a174:	88fb      	ldrh	r3, [r7, #6]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	2100      	movs	r1, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f000 fc58 	bl	800aa30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2204      	movs	r2, #4
 800a196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a19a:	2300      	movs	r3, #0
 800a19c:	2200      	movs	r2, #0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fc22 	bl	800a9ea <USBD_LL_Transmit>

  return USBD_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2205      	movs	r2, #5
 800a1bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fc32 	bl	800aa30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4912      	ldr	r1, [pc, #72]	; (800a228 <MX_USB_DEVICE_Init+0x50>)
 800a1e0:	4812      	ldr	r0, [pc, #72]	; (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a1e2:	f7fe ff5e 	bl	80090a2 <USBD_Init>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1ec:	f7f7 f890 	bl	8001310 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1f0:	490f      	ldr	r1, [pc, #60]	; (800a230 <MX_USB_DEVICE_Init+0x58>)
 800a1f2:	480e      	ldr	r0, [pc, #56]	; (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a1f4:	f7fe ff80 	bl	80090f8 <USBD_RegisterClass>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d001      	beq.n	800a202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1fe:	f7f7 f887 	bl	8001310 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a202:	490c      	ldr	r1, [pc, #48]	; (800a234 <MX_USB_DEVICE_Init+0x5c>)
 800a204:	4809      	ldr	r0, [pc, #36]	; (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a206:	f7fe feb1 	bl	8008f6c <USBD_CDC_RegisterInterface>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a210:	f7f7 f87e 	bl	8001310 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a214:	4805      	ldr	r0, [pc, #20]	; (800a22c <MX_USB_DEVICE_Init+0x54>)
 800a216:	f7fe ff88 	bl	800912a <USBD_Start>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a220:	f7f7 f876 	bl	8001310 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a224:	bf00      	nop
 800a226:	bd80      	pop	{r7, pc}
 800a228:	2000012c 	.word	0x2000012c
 800a22c:	2000048c 	.word	0x2000048c
 800a230:	20000018 	.word	0x20000018
 800a234:	2000011c 	.word	0x2000011c

0800a238 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a23c:	2200      	movs	r2, #0
 800a23e:	4905      	ldr	r1, [pc, #20]	; (800a254 <CDC_Init_FS+0x1c>)
 800a240:	4805      	ldr	r0, [pc, #20]	; (800a258 <CDC_Init_FS+0x20>)
 800a242:	f7fe fea9 	bl	8008f98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a246:	4905      	ldr	r1, [pc, #20]	; (800a25c <CDC_Init_FS+0x24>)
 800a248:	4803      	ldr	r0, [pc, #12]	; (800a258 <CDC_Init_FS+0x20>)
 800a24a:	f7fe febe 	bl	8008fca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a24e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a250:	4618      	mov	r0, r3
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000b50 	.word	0x20000b50
 800a258:	2000048c 	.word	0x2000048c
 800a25c:	20000750 	.word	0x20000750

0800a260 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a264:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a266:	4618      	mov	r0, r3
 800a268:	46bd      	mov	sp, r7
 800a26a:	bc80      	pop	{r7}
 800a26c:	4770      	bx	lr
	...

0800a270 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
 800a27c:	4613      	mov	r3, r2
 800a27e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	2b23      	cmp	r3, #35	; 0x23
 800a284:	d84a      	bhi.n	800a31c <CDC_Control_FS+0xac>
 800a286:	a201      	add	r2, pc, #4	; (adr r2, 800a28c <CDC_Control_FS+0x1c>)
 800a288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28c:	0800a31d 	.word	0x0800a31d
 800a290:	0800a31d 	.word	0x0800a31d
 800a294:	0800a31d 	.word	0x0800a31d
 800a298:	0800a31d 	.word	0x0800a31d
 800a29c:	0800a31d 	.word	0x0800a31d
 800a2a0:	0800a31d 	.word	0x0800a31d
 800a2a4:	0800a31d 	.word	0x0800a31d
 800a2a8:	0800a31d 	.word	0x0800a31d
 800a2ac:	0800a31d 	.word	0x0800a31d
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a31d 	.word	0x0800a31d
 800a2b8:	0800a31d 	.word	0x0800a31d
 800a2bc:	0800a31d 	.word	0x0800a31d
 800a2c0:	0800a31d 	.word	0x0800a31d
 800a2c4:	0800a31d 	.word	0x0800a31d
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a31d 	.word	0x0800a31d
 800a2d0:	0800a31d 	.word	0x0800a31d
 800a2d4:	0800a31d 	.word	0x0800a31d
 800a2d8:	0800a31d 	.word	0x0800a31d
 800a2dc:	0800a31d 	.word	0x0800a31d
 800a2e0:	0800a31d 	.word	0x0800a31d
 800a2e4:	0800a31d 	.word	0x0800a31d
 800a2e8:	0800a31d 	.word	0x0800a31d
 800a2ec:	0800a31d 	.word	0x0800a31d
 800a2f0:	0800a31d 	.word	0x0800a31d
 800a2f4:	0800a31d 	.word	0x0800a31d
 800a2f8:	0800a31d 	.word	0x0800a31d
 800a2fc:	0800a31d 	.word	0x0800a31d
 800a300:	0800a31d 	.word	0x0800a31d
 800a304:	0800a31d 	.word	0x0800a31d
 800a308:	0800a31d 	.word	0x0800a31d
 800a30c:	0800a31d 	.word	0x0800a31d
 800a310:	0800a31d 	.word	0x0800a31d
 800a314:	0800a31d 	.word	0x0800a31d
 800a318:	0800a31d 	.word	0x0800a31d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a31c:	bf00      	nop
  }

  return (USBD_OK);
 800a31e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop

0800a32c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	480e      	ldr	r0, [pc, #56]	; (800a374 <CDC_Receive_FS+0x48>)
 800a33a:	f7fe fe46 	bl	8008fca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a33e:	480d      	ldr	r0, [pc, #52]	; (800a374 <CDC_Receive_FS+0x48>)
 800a340:	f7fe fe85 	bl	800904e <USBD_CDC_ReceivePacket>

  // Processa cada byte recebido
  for (uint32_t i = 0; i < *Len; i++) {
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	e009      	b.n	800a35e <CDC_Receive_FS+0x32>
	  Process_Byte(Buf[i]);
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f7f6 fb28 	bl	80009a8 <Process_Byte>
  for (uint32_t i = 0; i < *Len; i++) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d3f0      	bcc.n	800a34a <CDC_Receive_FS+0x1e>
  }

  return (USBD_OK);
 800a368:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	2000048c 	.word	0x2000048c

0800a378 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	460b      	mov	r3, r1
 800a382:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a388:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <CDC_Transmit_FS+0x48>)
 800a38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e00b      	b.n	800a3b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a39e:	887b      	ldrh	r3, [r7, #2]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	4806      	ldr	r0, [pc, #24]	; (800a3c0 <CDC_Transmit_FS+0x48>)
 800a3a6:	f7fe fdf7 	bl	8008f98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3aa:	4805      	ldr	r0, [pc, #20]	; (800a3c0 <CDC_Transmit_FS+0x48>)
 800a3ac:	f7fe fe20 	bl	8008ff0 <USBD_CDC_TransmitPacket>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	2000048c 	.word	0x2000048c

0800a3c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	6039      	str	r1, [r7, #0]
 800a3ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	2212      	movs	r2, #18
 800a3d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3d6:	4b03      	ldr	r3, [pc, #12]	; (800a3e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000148 	.word	0x20000148

0800a3e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2204      	movs	r2, #4
 800a3f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3fa:	4b03      	ldr	r3, [pc, #12]	; (800a408 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	bc80      	pop	{r7}
 800a404:	4770      	bx	lr
 800a406:	bf00      	nop
 800a408:	2000015c 	.word	0x2000015c

0800a40c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	4603      	mov	r3, r0
 800a414:	6039      	str	r1, [r7, #0]
 800a416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d105      	bne.n	800a42a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	4907      	ldr	r1, [pc, #28]	; (800a440 <USBD_FS_ProductStrDescriptor+0x34>)
 800a422:	4808      	ldr	r0, [pc, #32]	; (800a444 <USBD_FS_ProductStrDescriptor+0x38>)
 800a424:	f7ff fdfa 	bl	800a01c <USBD_GetString>
 800a428:	e004      	b.n	800a434 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	4904      	ldr	r1, [pc, #16]	; (800a440 <USBD_FS_ProductStrDescriptor+0x34>)
 800a42e:	4805      	ldr	r0, [pc, #20]	; (800a444 <USBD_FS_ProductStrDescriptor+0x38>)
 800a430:	f7ff fdf4 	bl	800a01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a434:	4b02      	ldr	r3, [pc, #8]	; (800a440 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a436:	4618      	mov	r0, r3
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000f50 	.word	0x20000f50
 800a444:	0800b52c 	.word	0x0800b52c

0800a448 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	6039      	str	r1, [r7, #0]
 800a452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	4904      	ldr	r1, [pc, #16]	; (800a468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a458:	4804      	ldr	r0, [pc, #16]	; (800a46c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a45a:	f7ff fddf 	bl	800a01c <USBD_GetString>
  return USBD_StrDesc;
 800a45e:	4b02      	ldr	r3, [pc, #8]	; (800a468 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a460:	4618      	mov	r0, r3
 800a462:	3708      	adds	r7, #8
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	20000f50 	.word	0x20000f50
 800a46c:	0800b544 	.word	0x0800b544

0800a470 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	6039      	str	r1, [r7, #0]
 800a47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	221a      	movs	r2, #26
 800a480:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a482:	f000 f843 	bl	800a50c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a486:	4b02      	ldr	r3, [pc, #8]	; (800a490 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	20000160 	.word	0x20000160

0800a494 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	4603      	mov	r3, r0
 800a49c:	6039      	str	r1, [r7, #0]
 800a49e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d105      	bne.n	800a4b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	4907      	ldr	r1, [pc, #28]	; (800a4c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4aa:	4808      	ldr	r0, [pc, #32]	; (800a4cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4ac:	f7ff fdb6 	bl	800a01c <USBD_GetString>
 800a4b0:	e004      	b.n	800a4bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	4904      	ldr	r1, [pc, #16]	; (800a4c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4b8:	f7ff fdb0 	bl	800a01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4bc:	4b02      	ldr	r3, [pc, #8]	; (800a4c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	20000f50 	.word	0x20000f50
 800a4cc:	0800b558 	.word	0x0800b558

0800a4d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d105      	bne.n	800a4ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	4907      	ldr	r1, [pc, #28]	; (800a504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4e6:	4808      	ldr	r0, [pc, #32]	; (800a508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4e8:	f7ff fd98 	bl	800a01c <USBD_GetString>
 800a4ec:	e004      	b.n	800a4f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	4904      	ldr	r1, [pc, #16]	; (800a504 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4f2:	4805      	ldr	r0, [pc, #20]	; (800a508 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4f4:	f7ff fd92 	bl	800a01c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4f8:	4b02      	ldr	r3, [pc, #8]	; (800a504 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20000f50 	.word	0x20000f50
 800a508:	0800b564 	.word	0x0800b564

0800a50c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a512:	4b0f      	ldr	r3, [pc, #60]	; (800a550 <Get_SerialNum+0x44>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a518:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <Get_SerialNum+0x48>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a51e:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <Get_SerialNum+0x4c>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4413      	add	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d009      	beq.n	800a546 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a532:	2208      	movs	r2, #8
 800a534:	4909      	ldr	r1, [pc, #36]	; (800a55c <Get_SerialNum+0x50>)
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 f814 	bl	800a564 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a53c:	2204      	movs	r2, #4
 800a53e:	4908      	ldr	r1, [pc, #32]	; (800a560 <Get_SerialNum+0x54>)
 800a540:	68b8      	ldr	r0, [r7, #8]
 800a542:	f000 f80f 	bl	800a564 <IntToUnicode>
  }
}
 800a546:	bf00      	nop
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	1ffff7e8 	.word	0x1ffff7e8
 800a554:	1ffff7ec 	.word	0x1ffff7ec
 800a558:	1ffff7f0 	.word	0x1ffff7f0
 800a55c:	20000162 	.word	0x20000162
 800a560:	20000172 	.word	0x20000172

0800a564 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a564:	b480      	push	{r7}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	4613      	mov	r3, r2
 800a570:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a576:	2300      	movs	r3, #0
 800a578:	75fb      	strb	r3, [r7, #23]
 800a57a:	e027      	b.n	800a5cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	0f1b      	lsrs	r3, r3, #28
 800a580:	2b09      	cmp	r3, #9
 800a582:	d80b      	bhi.n	800a59c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	0f1b      	lsrs	r3, r3, #28
 800a588:	b2da      	uxtb	r2, r3
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	4619      	mov	r1, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	440b      	add	r3, r1
 800a594:	3230      	adds	r2, #48	; 0x30
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	701a      	strb	r2, [r3, #0]
 800a59a:	e00a      	b.n	800a5b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	0f1b      	lsrs	r3, r3, #28
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	7dfb      	ldrb	r3, [r7, #23]
 800a5a4:	005b      	lsls	r3, r3, #1
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	440b      	add	r3, r1
 800a5ac:	3237      	adds	r2, #55	; 0x37
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	011b      	lsls	r3, r3, #4
 800a5b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ba:	005b      	lsls	r3, r3, #1
 800a5bc:	3301      	adds	r3, #1
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	75fb      	strb	r3, [r7, #23]
 800a5cc:	7dfa      	ldrb	r2, [r7, #23]
 800a5ce:	79fb      	ldrb	r3, [r7, #7]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d3d3      	bcc.n	800a57c <IntToUnicode+0x18>
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	bf00      	nop
 800a5d8:	371c      	adds	r7, #28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a0d      	ldr	r2, [pc, #52]	; (800a624 <HAL_PCD_MspInit+0x44>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d113      	bne.n	800a61a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <HAL_PCD_MspInit+0x48>)
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	4a0c      	ldr	r2, [pc, #48]	; (800a628 <HAL_PCD_MspInit+0x48>)
 800a5f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a5fc:	61d3      	str	r3, [r2, #28]
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <HAL_PCD_MspInit+0x48>)
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a606:	60fb      	str	r3, [r7, #12]
 800a608:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a60a:	2200      	movs	r2, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	2014      	movs	r0, #20
 800a610:	f7f8 f81b 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a614:	2014      	movs	r0, #20
 800a616:	f7f8 f834 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a61a:	bf00      	nop
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	40005c00 	.word	0x40005c00
 800a628:	40021000 	.word	0x40021000

0800a62c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a640:	4619      	mov	r1, r3
 800a642:	4610      	mov	r0, r2
 800a644:	f7fe fdb9 	bl	80091ba <USBD_LL_SetupStage>
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a662:	78fa      	ldrb	r2, [r7, #3]
 800a664:	6879      	ldr	r1, [r7, #4]
 800a666:	4613      	mov	r3, r2
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	440b      	add	r3, r1
 800a670:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	78fb      	ldrb	r3, [r7, #3]
 800a678:	4619      	mov	r1, r3
 800a67a:	f7fe fdeb 	bl	8009254 <USBD_LL_DataOutStage>
}
 800a67e:	bf00      	nop
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	4613      	mov	r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	4413      	add	r3, r2
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	440b      	add	r3, r1
 800a6a6:	333c      	adds	r3, #60	; 0x3c
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	f7fe fe42 	bl	8009336 <USBD_LL_DataInStage>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe ff52 	bl	8009572 <USBD_LL_SOF>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	689b      	ldr	r3, [r3, #8]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d001      	beq.n	800a6ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a6ea:	f7f6 fe11 	bl	8001310 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a6f4:	7bfa      	ldrb	r2, [r7, #15]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fe ff02 	bl	8009502 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe febb 	bl	8009480 <USBD_LL_Reset>
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fefc 	bl	8009520 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d005      	beq.n	800a73c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a730:	4b04      	ldr	r3, [pc, #16]	; (800a744 <HAL_PCD_SuspendCallback+0x30>)
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	4a03      	ldr	r2, [pc, #12]	; (800a744 <HAL_PCD_SuspendCallback+0x30>)
 800a736:	f043 0306 	orr.w	r3, r3, #6
 800a73a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	e000ed00 	.word	0xe000ed00

0800a748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800a756:	4618      	mov	r0, r3
 800a758:	f7fe fef6 	bl	8009548 <USBD_LL_Resume>
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a76c:	4a28      	ldr	r2, [pc, #160]	; (800a810 <USBD_LL_Init+0xac>)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a26      	ldr	r2, [pc, #152]	; (800a810 <USBD_LL_Init+0xac>)
 800a778:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a77c:	4b24      	ldr	r3, [pc, #144]	; (800a810 <USBD_LL_Init+0xac>)
 800a77e:	4a25      	ldr	r2, [pc, #148]	; (800a814 <USBD_LL_Init+0xb0>)
 800a780:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a782:	4b23      	ldr	r3, [pc, #140]	; (800a810 <USBD_LL_Init+0xac>)
 800a784:	2208      	movs	r2, #8
 800a786:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a788:	4b21      	ldr	r3, [pc, #132]	; (800a810 <USBD_LL_Init+0xac>)
 800a78a:	2202      	movs	r2, #2
 800a78c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a78e:	4b20      	ldr	r3, [pc, #128]	; (800a810 <USBD_LL_Init+0xac>)
 800a790:	2200      	movs	r2, #0
 800a792:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a794:	4b1e      	ldr	r3, [pc, #120]	; (800a810 <USBD_LL_Init+0xac>)
 800a796:	2200      	movs	r2, #0
 800a798:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a79a:	4b1d      	ldr	r3, [pc, #116]	; (800a810 <USBD_LL_Init+0xac>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a7a0:	481b      	ldr	r0, [pc, #108]	; (800a810 <USBD_LL_Init+0xac>)
 800a7a2:	f7f8 ffc9 	bl	8003738 <HAL_PCD_Init>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a7ac:	f7f6 fdb0 	bl	8001310 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7b6:	2318      	movs	r3, #24
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	f7fa fce8 	bl	8005190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7c6:	2358      	movs	r3, #88	; 0x58
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2180      	movs	r1, #128	; 0x80
 800a7cc:	f7fa fce0 	bl	8005190 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7d6:	23c0      	movs	r3, #192	; 0xc0
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2181      	movs	r1, #129	; 0x81
 800a7dc:	f7fa fcd8 	bl	8005190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	f7fa fccf 	bl	8005190 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2182      	movs	r1, #130	; 0x82
 800a800:	f7fa fcc6 	bl	8005190 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20001150 	.word	0x20001150
 800a814:	40005c00 	.word	0x40005c00

0800a818 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a82e:	4618      	mov	r0, r3
 800a830:	f7f9 f881 	bl	8003936 <HAL_PCD_Start>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f94e 	bl	800aadc <USBD_Get_USB_Status>
 800a840:	4603      	mov	r3, r0
 800a842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a844:	7bbb      	ldrb	r3, [r7, #14]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	4608      	mov	r0, r1
 800a858:	4611      	mov	r1, r2
 800a85a:	461a      	mov	r2, r3
 800a85c:	4603      	mov	r3, r0
 800a85e:	70fb      	strb	r3, [r7, #3]
 800a860:	460b      	mov	r3, r1
 800a862:	70bb      	strb	r3, [r7, #2]
 800a864:	4613      	mov	r3, r2
 800a866:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a876:	78bb      	ldrb	r3, [r7, #2]
 800a878:	883a      	ldrh	r2, [r7, #0]
 800a87a:	78f9      	ldrb	r1, [r7, #3]
 800a87c:	f7f9 f9d6 	bl	8003c2c <HAL_PCD_EP_Open>
 800a880:	4603      	mov	r3, r0
 800a882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a884:	7bfb      	ldrb	r3, [r7, #15]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 f928 	bl	800aadc <USBD_Get_USB_Status>
 800a88c:	4603      	mov	r3, r0
 800a88e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a890:	7bbb      	ldrb	r3, [r7, #14]
}
 800a892:	4618      	mov	r0, r3
 800a894:	3710      	adds	r7, #16
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b084      	sub	sp, #16
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8b4:	78fa      	ldrb	r2, [r7, #3]
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7f9 fa14 	bl	8003ce6 <HAL_PCD_EP_Close>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 f909 	bl	800aadc <USBD_Get_USB_Status>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7f9 fabc 	bl	8003e74 <HAL_PCD_EP_SetStall>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f8ea 	bl	800aadc <USBD_Get_USB_Status>
 800a908:	4603      	mov	r3, r0
 800a90a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a930:	78fa      	ldrb	r2, [r7, #3]
 800a932:	4611      	mov	r1, r2
 800a934:	4618      	mov	r0, r3
 800a936:	f7f9 fafd 	bl	8003f34 <HAL_PCD_EP_ClrStall>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	4618      	mov	r0, r3
 800a942:	f000 f8cb 	bl	800aadc <USBD_Get_USB_Status>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a966:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	da0c      	bge.n	800a98a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	68f9      	ldr	r1, [r7, #12]
 800a978:	1c5a      	adds	r2, r3, #1
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	00db      	lsls	r3, r3, #3
 800a982:	440b      	add	r3, r1
 800a984:	3302      	adds	r3, #2
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	e00b      	b.n	800a9a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a98a:	78fb      	ldrb	r3, [r7, #3]
 800a98c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a990:	68f9      	ldr	r1, [r7, #12]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	00db      	lsls	r3, r3, #3
 800a99a:	440b      	add	r3, r1
 800a99c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a9a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bc80      	pop	{r7}
 800a9aa:	4770      	bx	lr

0800a9ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c6:	78fa      	ldrb	r2, [r7, #3]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7f9 f909 	bl	8003be2 <HAL_PCD_SetAddress>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f880 	bl	800aadc <USBD_Get_USB_Status>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b086      	sub	sp, #24
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	72fb      	strb	r3, [r7, #11]
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa0c:	893b      	ldrh	r3, [r7, #8]
 800aa0e:	7af9      	ldrb	r1, [r7, #11]
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	f7f9 f9f8 	bl	8003e06 <HAL_PCD_EP_Transmit>
 800aa16:	4603      	mov	r3, r0
 800aa18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 f85d 	bl	800aadc <USBD_Get_USB_Status>
 800aa22:	4603      	mov	r3, r0
 800aa24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa26:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	607a      	str	r2, [r7, #4]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	72fb      	strb	r3, [r7, #11]
 800aa40:	4613      	mov	r3, r2
 800aa42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa52:	893b      	ldrh	r3, [r7, #8]
 800aa54:	7af9      	ldrb	r1, [r7, #11]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	f7f9 f98d 	bl	8003d76 <HAL_PCD_EP_Receive>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 f83a 	bl	800aadc <USBD_Get_USB_Status>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
 800aa7e:	460b      	mov	r3, r1
 800aa80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa88:	78fa      	ldrb	r2, [r7, #3]
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7f9 f9a3 	bl	8003dd8 <HAL_PCD_EP_GetRxCount>
 800aa92:	4603      	mov	r3, r0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aaa4:	4b02      	ldr	r3, [pc, #8]	; (800aab0 <USBD_static_malloc+0x14>)
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	370c      	adds	r7, #12
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bc80      	pop	{r7}
 800aaae:	4770      	bx	lr
 800aab0:	20001440 	.word	0x20001440

0800aab4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]

}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bc80      	pop	{r7}
 800aac4:	4770      	bx	lr

0800aac6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac6:	b480      	push	{r7}
 800aac8:	b083      	sub	sp, #12
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
 800aace:	460b      	mov	r3, r1
 800aad0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aad2:	bf00      	nop
 800aad4:	370c      	adds	r7, #12
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bc80      	pop	{r7}
 800aada:	4770      	bx	lr

0800aadc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaea:	79fb      	ldrb	r3, [r7, #7]
 800aaec:	2b03      	cmp	r3, #3
 800aaee:	d817      	bhi.n	800ab20 <USBD_Get_USB_Status+0x44>
 800aaf0:	a201      	add	r2, pc, #4	; (adr r2, 800aaf8 <USBD_Get_USB_Status+0x1c>)
 800aaf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf6:	bf00      	nop
 800aaf8:	0800ab09 	.word	0x0800ab09
 800aafc:	0800ab0f 	.word	0x0800ab0f
 800ab00:	0800ab15 	.word	0x0800ab15
 800ab04:	0800ab1b 	.word	0x0800ab1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab0c:	e00b      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab0e:	2302      	movs	r3, #2
 800ab10:	73fb      	strb	r3, [r7, #15]
    break;
 800ab12:	e008      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab14:	2301      	movs	r3, #1
 800ab16:	73fb      	strb	r3, [r7, #15]
    break;
 800ab18:	e005      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1e:	e002      	b.n	800ab26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab20:	2302      	movs	r3, #2
 800ab22:	73fb      	strb	r3, [r7, #15]
    break;
 800ab24:	bf00      	nop
  }
  return usb_status;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bc80      	pop	{r7}
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop

0800ab34 <siprintf>:
 800ab34:	b40e      	push	{r1, r2, r3}
 800ab36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ab3a:	b500      	push	{lr}
 800ab3c:	b09c      	sub	sp, #112	; 0x70
 800ab3e:	ab1d      	add	r3, sp, #116	; 0x74
 800ab40:	9002      	str	r0, [sp, #8]
 800ab42:	9006      	str	r0, [sp, #24]
 800ab44:	9107      	str	r1, [sp, #28]
 800ab46:	9104      	str	r1, [sp, #16]
 800ab48:	4808      	ldr	r0, [pc, #32]	; (800ab6c <siprintf+0x38>)
 800ab4a:	4909      	ldr	r1, [pc, #36]	; (800ab70 <siprintf+0x3c>)
 800ab4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab50:	9105      	str	r1, [sp, #20]
 800ab52:	6800      	ldr	r0, [r0, #0]
 800ab54:	a902      	add	r1, sp, #8
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	f000 f98e 	bl	800ae78 <_svfiprintf_r>
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	b01c      	add	sp, #112	; 0x70
 800ab64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab68:	b003      	add	sp, #12
 800ab6a:	4770      	bx	lr
 800ab6c:	200001c8 	.word	0x200001c8
 800ab70:	ffff0208 	.word	0xffff0208

0800ab74 <memset>:
 800ab74:	4603      	mov	r3, r0
 800ab76:	4402      	add	r2, r0
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d100      	bne.n	800ab7e <memset+0xa>
 800ab7c:	4770      	bx	lr
 800ab7e:	f803 1b01 	strb.w	r1, [r3], #1
 800ab82:	e7f9      	b.n	800ab78 <memset+0x4>

0800ab84 <__errno>:
 800ab84:	4b01      	ldr	r3, [pc, #4]	; (800ab8c <__errno+0x8>)
 800ab86:	6818      	ldr	r0, [r3, #0]
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	200001c8 	.word	0x200001c8

0800ab90 <__libc_init_array>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	2600      	movs	r6, #0
 800ab94:	4d0c      	ldr	r5, [pc, #48]	; (800abc8 <__libc_init_array+0x38>)
 800ab96:	4c0d      	ldr	r4, [pc, #52]	; (800abcc <__libc_init_array+0x3c>)
 800ab98:	1b64      	subs	r4, r4, r5
 800ab9a:	10a4      	asrs	r4, r4, #2
 800ab9c:	42a6      	cmp	r6, r4
 800ab9e:	d109      	bne.n	800abb4 <__libc_init_array+0x24>
 800aba0:	f000 fc7a 	bl	800b498 <_init>
 800aba4:	2600      	movs	r6, #0
 800aba6:	4d0a      	ldr	r5, [pc, #40]	; (800abd0 <__libc_init_array+0x40>)
 800aba8:	4c0a      	ldr	r4, [pc, #40]	; (800abd4 <__libc_init_array+0x44>)
 800abaa:	1b64      	subs	r4, r4, r5
 800abac:	10a4      	asrs	r4, r4, #2
 800abae:	42a6      	cmp	r6, r4
 800abb0:	d105      	bne.n	800abbe <__libc_init_array+0x2e>
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb8:	4798      	blx	r3
 800abba:	3601      	adds	r6, #1
 800abbc:	e7ee      	b.n	800ab9c <__libc_init_array+0xc>
 800abbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800abc2:	4798      	blx	r3
 800abc4:	3601      	adds	r6, #1
 800abc6:	e7f2      	b.n	800abae <__libc_init_array+0x1e>
 800abc8:	0800b5d4 	.word	0x0800b5d4
 800abcc:	0800b5d4 	.word	0x0800b5d4
 800abd0:	0800b5d4 	.word	0x0800b5d4
 800abd4:	0800b5d8 	.word	0x0800b5d8

0800abd8 <__retarget_lock_acquire_recursive>:
 800abd8:	4770      	bx	lr

0800abda <__retarget_lock_release_recursive>:
 800abda:	4770      	bx	lr

0800abdc <_free_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4605      	mov	r5, r0
 800abe0:	2900      	cmp	r1, #0
 800abe2:	d040      	beq.n	800ac66 <_free_r+0x8a>
 800abe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe8:	1f0c      	subs	r4, r1, #4
 800abea:	2b00      	cmp	r3, #0
 800abec:	bfb8      	it	lt
 800abee:	18e4      	addlt	r4, r4, r3
 800abf0:	f000 f8dc 	bl	800adac <__malloc_lock>
 800abf4:	4a1c      	ldr	r2, [pc, #112]	; (800ac68 <_free_r+0x8c>)
 800abf6:	6813      	ldr	r3, [r2, #0]
 800abf8:	b933      	cbnz	r3, 800ac08 <_free_r+0x2c>
 800abfa:	6063      	str	r3, [r4, #4]
 800abfc:	6014      	str	r4, [r2, #0]
 800abfe:	4628      	mov	r0, r5
 800ac00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac04:	f000 b8d8 	b.w	800adb8 <__malloc_unlock>
 800ac08:	42a3      	cmp	r3, r4
 800ac0a:	d908      	bls.n	800ac1e <_free_r+0x42>
 800ac0c:	6820      	ldr	r0, [r4, #0]
 800ac0e:	1821      	adds	r1, r4, r0
 800ac10:	428b      	cmp	r3, r1
 800ac12:	bf01      	itttt	eq
 800ac14:	6819      	ldreq	r1, [r3, #0]
 800ac16:	685b      	ldreq	r3, [r3, #4]
 800ac18:	1809      	addeq	r1, r1, r0
 800ac1a:	6021      	streq	r1, [r4, #0]
 800ac1c:	e7ed      	b.n	800abfa <_free_r+0x1e>
 800ac1e:	461a      	mov	r2, r3
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	b10b      	cbz	r3, 800ac28 <_free_r+0x4c>
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	d9fa      	bls.n	800ac1e <_free_r+0x42>
 800ac28:	6811      	ldr	r1, [r2, #0]
 800ac2a:	1850      	adds	r0, r2, r1
 800ac2c:	42a0      	cmp	r0, r4
 800ac2e:	d10b      	bne.n	800ac48 <_free_r+0x6c>
 800ac30:	6820      	ldr	r0, [r4, #0]
 800ac32:	4401      	add	r1, r0
 800ac34:	1850      	adds	r0, r2, r1
 800ac36:	4283      	cmp	r3, r0
 800ac38:	6011      	str	r1, [r2, #0]
 800ac3a:	d1e0      	bne.n	800abfe <_free_r+0x22>
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	4408      	add	r0, r1
 800ac42:	6010      	str	r0, [r2, #0]
 800ac44:	6053      	str	r3, [r2, #4]
 800ac46:	e7da      	b.n	800abfe <_free_r+0x22>
 800ac48:	d902      	bls.n	800ac50 <_free_r+0x74>
 800ac4a:	230c      	movs	r3, #12
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	e7d6      	b.n	800abfe <_free_r+0x22>
 800ac50:	6820      	ldr	r0, [r4, #0]
 800ac52:	1821      	adds	r1, r4, r0
 800ac54:	428b      	cmp	r3, r1
 800ac56:	bf01      	itttt	eq
 800ac58:	6819      	ldreq	r1, [r3, #0]
 800ac5a:	685b      	ldreq	r3, [r3, #4]
 800ac5c:	1809      	addeq	r1, r1, r0
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	6063      	str	r3, [r4, #4]
 800ac62:	6054      	str	r4, [r2, #4]
 800ac64:	e7cb      	b.n	800abfe <_free_r+0x22>
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	200017a0 	.word	0x200017a0

0800ac6c <sbrk_aligned>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4e0e      	ldr	r6, [pc, #56]	; (800aca8 <sbrk_aligned+0x3c>)
 800ac70:	460c      	mov	r4, r1
 800ac72:	6831      	ldr	r1, [r6, #0]
 800ac74:	4605      	mov	r5, r0
 800ac76:	b911      	cbnz	r1, 800ac7e <sbrk_aligned+0x12>
 800ac78:	f000 fbaa 	bl	800b3d0 <_sbrk_r>
 800ac7c:	6030      	str	r0, [r6, #0]
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4628      	mov	r0, r5
 800ac82:	f000 fba5 	bl	800b3d0 <_sbrk_r>
 800ac86:	1c43      	adds	r3, r0, #1
 800ac88:	d00a      	beq.n	800aca0 <sbrk_aligned+0x34>
 800ac8a:	1cc4      	adds	r4, r0, #3
 800ac8c:	f024 0403 	bic.w	r4, r4, #3
 800ac90:	42a0      	cmp	r0, r4
 800ac92:	d007      	beq.n	800aca4 <sbrk_aligned+0x38>
 800ac94:	1a21      	subs	r1, r4, r0
 800ac96:	4628      	mov	r0, r5
 800ac98:	f000 fb9a 	bl	800b3d0 <_sbrk_r>
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d101      	bne.n	800aca4 <sbrk_aligned+0x38>
 800aca0:	f04f 34ff 	mov.w	r4, #4294967295
 800aca4:	4620      	mov	r0, r4
 800aca6:	bd70      	pop	{r4, r5, r6, pc}
 800aca8:	200017a4 	.word	0x200017a4

0800acac <_malloc_r>:
 800acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb0:	1ccd      	adds	r5, r1, #3
 800acb2:	f025 0503 	bic.w	r5, r5, #3
 800acb6:	3508      	adds	r5, #8
 800acb8:	2d0c      	cmp	r5, #12
 800acba:	bf38      	it	cc
 800acbc:	250c      	movcc	r5, #12
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	4607      	mov	r7, r0
 800acc2:	db01      	blt.n	800acc8 <_malloc_r+0x1c>
 800acc4:	42a9      	cmp	r1, r5
 800acc6:	d905      	bls.n	800acd4 <_malloc_r+0x28>
 800acc8:	230c      	movs	r3, #12
 800acca:	2600      	movs	r6, #0
 800accc:	603b      	str	r3, [r7, #0]
 800acce:	4630      	mov	r0, r6
 800acd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ada8 <_malloc_r+0xfc>
 800acd8:	f000 f868 	bl	800adac <__malloc_lock>
 800acdc:	f8d8 3000 	ldr.w	r3, [r8]
 800ace0:	461c      	mov	r4, r3
 800ace2:	bb5c      	cbnz	r4, 800ad3c <_malloc_r+0x90>
 800ace4:	4629      	mov	r1, r5
 800ace6:	4638      	mov	r0, r7
 800ace8:	f7ff ffc0 	bl	800ac6c <sbrk_aligned>
 800acec:	1c43      	adds	r3, r0, #1
 800acee:	4604      	mov	r4, r0
 800acf0:	d155      	bne.n	800ad9e <_malloc_r+0xf2>
 800acf2:	f8d8 4000 	ldr.w	r4, [r8]
 800acf6:	4626      	mov	r6, r4
 800acf8:	2e00      	cmp	r6, #0
 800acfa:	d145      	bne.n	800ad88 <_malloc_r+0xdc>
 800acfc:	2c00      	cmp	r4, #0
 800acfe:	d048      	beq.n	800ad92 <_malloc_r+0xe6>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	4631      	mov	r1, r6
 800ad04:	4638      	mov	r0, r7
 800ad06:	eb04 0903 	add.w	r9, r4, r3
 800ad0a:	f000 fb61 	bl	800b3d0 <_sbrk_r>
 800ad0e:	4581      	cmp	r9, r0
 800ad10:	d13f      	bne.n	800ad92 <_malloc_r+0xe6>
 800ad12:	6821      	ldr	r1, [r4, #0]
 800ad14:	4638      	mov	r0, r7
 800ad16:	1a6d      	subs	r5, r5, r1
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7ff ffa7 	bl	800ac6c <sbrk_aligned>
 800ad1e:	3001      	adds	r0, #1
 800ad20:	d037      	beq.n	800ad92 <_malloc_r+0xe6>
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	442b      	add	r3, r5
 800ad26:	6023      	str	r3, [r4, #0]
 800ad28:	f8d8 3000 	ldr.w	r3, [r8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d038      	beq.n	800ada2 <_malloc_r+0xf6>
 800ad30:	685a      	ldr	r2, [r3, #4]
 800ad32:	42a2      	cmp	r2, r4
 800ad34:	d12b      	bne.n	800ad8e <_malloc_r+0xe2>
 800ad36:	2200      	movs	r2, #0
 800ad38:	605a      	str	r2, [r3, #4]
 800ad3a:	e00f      	b.n	800ad5c <_malloc_r+0xb0>
 800ad3c:	6822      	ldr	r2, [r4, #0]
 800ad3e:	1b52      	subs	r2, r2, r5
 800ad40:	d41f      	bmi.n	800ad82 <_malloc_r+0xd6>
 800ad42:	2a0b      	cmp	r2, #11
 800ad44:	d917      	bls.n	800ad76 <_malloc_r+0xca>
 800ad46:	1961      	adds	r1, r4, r5
 800ad48:	42a3      	cmp	r3, r4
 800ad4a:	6025      	str	r5, [r4, #0]
 800ad4c:	bf18      	it	ne
 800ad4e:	6059      	strne	r1, [r3, #4]
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	bf08      	it	eq
 800ad54:	f8c8 1000 	streq.w	r1, [r8]
 800ad58:	5162      	str	r2, [r4, r5]
 800ad5a:	604b      	str	r3, [r1, #4]
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f104 060b 	add.w	r6, r4, #11
 800ad62:	f000 f829 	bl	800adb8 <__malloc_unlock>
 800ad66:	f026 0607 	bic.w	r6, r6, #7
 800ad6a:	1d23      	adds	r3, r4, #4
 800ad6c:	1af2      	subs	r2, r6, r3
 800ad6e:	d0ae      	beq.n	800acce <_malloc_r+0x22>
 800ad70:	1b9b      	subs	r3, r3, r6
 800ad72:	50a3      	str	r3, [r4, r2]
 800ad74:	e7ab      	b.n	800acce <_malloc_r+0x22>
 800ad76:	42a3      	cmp	r3, r4
 800ad78:	6862      	ldr	r2, [r4, #4]
 800ad7a:	d1dd      	bne.n	800ad38 <_malloc_r+0x8c>
 800ad7c:	f8c8 2000 	str.w	r2, [r8]
 800ad80:	e7ec      	b.n	800ad5c <_malloc_r+0xb0>
 800ad82:	4623      	mov	r3, r4
 800ad84:	6864      	ldr	r4, [r4, #4]
 800ad86:	e7ac      	b.n	800ace2 <_malloc_r+0x36>
 800ad88:	4634      	mov	r4, r6
 800ad8a:	6876      	ldr	r6, [r6, #4]
 800ad8c:	e7b4      	b.n	800acf8 <_malloc_r+0x4c>
 800ad8e:	4613      	mov	r3, r2
 800ad90:	e7cc      	b.n	800ad2c <_malloc_r+0x80>
 800ad92:	230c      	movs	r3, #12
 800ad94:	4638      	mov	r0, r7
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	f000 f80e 	bl	800adb8 <__malloc_unlock>
 800ad9c:	e797      	b.n	800acce <_malloc_r+0x22>
 800ad9e:	6025      	str	r5, [r4, #0]
 800ada0:	e7dc      	b.n	800ad5c <_malloc_r+0xb0>
 800ada2:	605b      	str	r3, [r3, #4]
 800ada4:	deff      	udf	#255	; 0xff
 800ada6:	bf00      	nop
 800ada8:	200017a0 	.word	0x200017a0

0800adac <__malloc_lock>:
 800adac:	4801      	ldr	r0, [pc, #4]	; (800adb4 <__malloc_lock+0x8>)
 800adae:	f7ff bf13 	b.w	800abd8 <__retarget_lock_acquire_recursive>
 800adb2:	bf00      	nop
 800adb4:	2000179c 	.word	0x2000179c

0800adb8 <__malloc_unlock>:
 800adb8:	4801      	ldr	r0, [pc, #4]	; (800adc0 <__malloc_unlock+0x8>)
 800adba:	f7ff bf0e 	b.w	800abda <__retarget_lock_release_recursive>
 800adbe:	bf00      	nop
 800adc0:	2000179c 	.word	0x2000179c

0800adc4 <__ssputs_r>:
 800adc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adc8:	461f      	mov	r7, r3
 800adca:	688e      	ldr	r6, [r1, #8]
 800adcc:	4682      	mov	sl, r0
 800adce:	42be      	cmp	r6, r7
 800add0:	460c      	mov	r4, r1
 800add2:	4690      	mov	r8, r2
 800add4:	680b      	ldr	r3, [r1, #0]
 800add6:	d82c      	bhi.n	800ae32 <__ssputs_r+0x6e>
 800add8:	898a      	ldrh	r2, [r1, #12]
 800adda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adde:	d026      	beq.n	800ae2e <__ssputs_r+0x6a>
 800ade0:	6965      	ldr	r5, [r4, #20]
 800ade2:	6909      	ldr	r1, [r1, #16]
 800ade4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ade8:	eba3 0901 	sub.w	r9, r3, r1
 800adec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adf0:	1c7b      	adds	r3, r7, #1
 800adf2:	444b      	add	r3, r9
 800adf4:	106d      	asrs	r5, r5, #1
 800adf6:	429d      	cmp	r5, r3
 800adf8:	bf38      	it	cc
 800adfa:	461d      	movcc	r5, r3
 800adfc:	0553      	lsls	r3, r2, #21
 800adfe:	d527      	bpl.n	800ae50 <__ssputs_r+0x8c>
 800ae00:	4629      	mov	r1, r5
 800ae02:	f7ff ff53 	bl	800acac <_malloc_r>
 800ae06:	4606      	mov	r6, r0
 800ae08:	b360      	cbz	r0, 800ae64 <__ssputs_r+0xa0>
 800ae0a:	464a      	mov	r2, r9
 800ae0c:	6921      	ldr	r1, [r4, #16]
 800ae0e:	f000 fafd 	bl	800b40c <memcpy>
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae1c:	81a3      	strh	r3, [r4, #12]
 800ae1e:	6126      	str	r6, [r4, #16]
 800ae20:	444e      	add	r6, r9
 800ae22:	6026      	str	r6, [r4, #0]
 800ae24:	463e      	mov	r6, r7
 800ae26:	6165      	str	r5, [r4, #20]
 800ae28:	eba5 0509 	sub.w	r5, r5, r9
 800ae2c:	60a5      	str	r5, [r4, #8]
 800ae2e:	42be      	cmp	r6, r7
 800ae30:	d900      	bls.n	800ae34 <__ssputs_r+0x70>
 800ae32:	463e      	mov	r6, r7
 800ae34:	4632      	mov	r2, r6
 800ae36:	4641      	mov	r1, r8
 800ae38:	6820      	ldr	r0, [r4, #0]
 800ae3a:	f000 faaf 	bl	800b39c <memmove>
 800ae3e:	2000      	movs	r0, #0
 800ae40:	68a3      	ldr	r3, [r4, #8]
 800ae42:	1b9b      	subs	r3, r3, r6
 800ae44:	60a3      	str	r3, [r4, #8]
 800ae46:	6823      	ldr	r3, [r4, #0]
 800ae48:	4433      	add	r3, r6
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae50:	462a      	mov	r2, r5
 800ae52:	f000 fae9 	bl	800b428 <_realloc_r>
 800ae56:	4606      	mov	r6, r0
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1e0      	bne.n	800ae1e <__ssputs_r+0x5a>
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	6921      	ldr	r1, [r4, #16]
 800ae60:	f7ff febc 	bl	800abdc <_free_r>
 800ae64:	230c      	movs	r3, #12
 800ae66:	f8ca 3000 	str.w	r3, [sl]
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	e7e9      	b.n	800ae4c <__ssputs_r+0x88>

0800ae78 <_svfiprintf_r>:
 800ae78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae7c:	4698      	mov	r8, r3
 800ae7e:	898b      	ldrh	r3, [r1, #12]
 800ae80:	4607      	mov	r7, r0
 800ae82:	061b      	lsls	r3, r3, #24
 800ae84:	460d      	mov	r5, r1
 800ae86:	4614      	mov	r4, r2
 800ae88:	b09d      	sub	sp, #116	; 0x74
 800ae8a:	d50e      	bpl.n	800aeaa <_svfiprintf_r+0x32>
 800ae8c:	690b      	ldr	r3, [r1, #16]
 800ae8e:	b963      	cbnz	r3, 800aeaa <_svfiprintf_r+0x32>
 800ae90:	2140      	movs	r1, #64	; 0x40
 800ae92:	f7ff ff0b 	bl	800acac <_malloc_r>
 800ae96:	6028      	str	r0, [r5, #0]
 800ae98:	6128      	str	r0, [r5, #16]
 800ae9a:	b920      	cbnz	r0, 800aea6 <_svfiprintf_r+0x2e>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	e0d0      	b.n	800b048 <_svfiprintf_r+0x1d0>
 800aea6:	2340      	movs	r3, #64	; 0x40
 800aea8:	616b      	str	r3, [r5, #20]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9309      	str	r3, [sp, #36]	; 0x24
 800aeae:	2320      	movs	r3, #32
 800aeb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeb4:	2330      	movs	r3, #48	; 0x30
 800aeb6:	f04f 0901 	mov.w	r9, #1
 800aeba:	f8cd 800c 	str.w	r8, [sp, #12]
 800aebe:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b060 <_svfiprintf_r+0x1e8>
 800aec2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aec6:	4623      	mov	r3, r4
 800aec8:	469a      	mov	sl, r3
 800aeca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aece:	b10a      	cbz	r2, 800aed4 <_svfiprintf_r+0x5c>
 800aed0:	2a25      	cmp	r2, #37	; 0x25
 800aed2:	d1f9      	bne.n	800aec8 <_svfiprintf_r+0x50>
 800aed4:	ebba 0b04 	subs.w	fp, sl, r4
 800aed8:	d00b      	beq.n	800aef2 <_svfiprintf_r+0x7a>
 800aeda:	465b      	mov	r3, fp
 800aedc:	4622      	mov	r2, r4
 800aede:	4629      	mov	r1, r5
 800aee0:	4638      	mov	r0, r7
 800aee2:	f7ff ff6f 	bl	800adc4 <__ssputs_r>
 800aee6:	3001      	adds	r0, #1
 800aee8:	f000 80a9 	beq.w	800b03e <_svfiprintf_r+0x1c6>
 800aeec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aeee:	445a      	add	r2, fp
 800aef0:	9209      	str	r2, [sp, #36]	; 0x24
 800aef2:	f89a 3000 	ldrb.w	r3, [sl]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f000 80a1 	beq.w	800b03e <_svfiprintf_r+0x1c6>
 800aefc:	2300      	movs	r3, #0
 800aefe:	f04f 32ff 	mov.w	r2, #4294967295
 800af02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af06:	f10a 0a01 	add.w	sl, sl, #1
 800af0a:	9304      	str	r3, [sp, #16]
 800af0c:	9307      	str	r3, [sp, #28]
 800af0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af12:	931a      	str	r3, [sp, #104]	; 0x68
 800af14:	4654      	mov	r4, sl
 800af16:	2205      	movs	r2, #5
 800af18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1c:	4850      	ldr	r0, [pc, #320]	; (800b060 <_svfiprintf_r+0x1e8>)
 800af1e:	f000 fa67 	bl	800b3f0 <memchr>
 800af22:	9a04      	ldr	r2, [sp, #16]
 800af24:	b9d8      	cbnz	r0, 800af5e <_svfiprintf_r+0xe6>
 800af26:	06d0      	lsls	r0, r2, #27
 800af28:	bf44      	itt	mi
 800af2a:	2320      	movmi	r3, #32
 800af2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af30:	0711      	lsls	r1, r2, #28
 800af32:	bf44      	itt	mi
 800af34:	232b      	movmi	r3, #43	; 0x2b
 800af36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3a:	f89a 3000 	ldrb.w	r3, [sl]
 800af3e:	2b2a      	cmp	r3, #42	; 0x2a
 800af40:	d015      	beq.n	800af6e <_svfiprintf_r+0xf6>
 800af42:	4654      	mov	r4, sl
 800af44:	2000      	movs	r0, #0
 800af46:	f04f 0c0a 	mov.w	ip, #10
 800af4a:	9a07      	ldr	r2, [sp, #28]
 800af4c:	4621      	mov	r1, r4
 800af4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af52:	3b30      	subs	r3, #48	; 0x30
 800af54:	2b09      	cmp	r3, #9
 800af56:	d94d      	bls.n	800aff4 <_svfiprintf_r+0x17c>
 800af58:	b1b0      	cbz	r0, 800af88 <_svfiprintf_r+0x110>
 800af5a:	9207      	str	r2, [sp, #28]
 800af5c:	e014      	b.n	800af88 <_svfiprintf_r+0x110>
 800af5e:	eba0 0308 	sub.w	r3, r0, r8
 800af62:	fa09 f303 	lsl.w	r3, r9, r3
 800af66:	4313      	orrs	r3, r2
 800af68:	46a2      	mov	sl, r4
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	e7d2      	b.n	800af14 <_svfiprintf_r+0x9c>
 800af6e:	9b03      	ldr	r3, [sp, #12]
 800af70:	1d19      	adds	r1, r3, #4
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	9103      	str	r1, [sp, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	bfbb      	ittet	lt
 800af7a:	425b      	neglt	r3, r3
 800af7c:	f042 0202 	orrlt.w	r2, r2, #2
 800af80:	9307      	strge	r3, [sp, #28]
 800af82:	9307      	strlt	r3, [sp, #28]
 800af84:	bfb8      	it	lt
 800af86:	9204      	strlt	r2, [sp, #16]
 800af88:	7823      	ldrb	r3, [r4, #0]
 800af8a:	2b2e      	cmp	r3, #46	; 0x2e
 800af8c:	d10c      	bne.n	800afa8 <_svfiprintf_r+0x130>
 800af8e:	7863      	ldrb	r3, [r4, #1]
 800af90:	2b2a      	cmp	r3, #42	; 0x2a
 800af92:	d134      	bne.n	800affe <_svfiprintf_r+0x186>
 800af94:	9b03      	ldr	r3, [sp, #12]
 800af96:	3402      	adds	r4, #2
 800af98:	1d1a      	adds	r2, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9203      	str	r2, [sp, #12]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfb8      	it	lt
 800afa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800afa6:	9305      	str	r3, [sp, #20]
 800afa8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b064 <_svfiprintf_r+0x1ec>
 800afac:	2203      	movs	r2, #3
 800afae:	4650      	mov	r0, sl
 800afb0:	7821      	ldrb	r1, [r4, #0]
 800afb2:	f000 fa1d 	bl	800b3f0 <memchr>
 800afb6:	b138      	cbz	r0, 800afc8 <_svfiprintf_r+0x150>
 800afb8:	2240      	movs	r2, #64	; 0x40
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	eba0 000a 	sub.w	r0, r0, sl
 800afc0:	4082      	lsls	r2, r0
 800afc2:	4313      	orrs	r3, r2
 800afc4:	3401      	adds	r4, #1
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afcc:	2206      	movs	r2, #6
 800afce:	4826      	ldr	r0, [pc, #152]	; (800b068 <_svfiprintf_r+0x1f0>)
 800afd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afd4:	f000 fa0c 	bl	800b3f0 <memchr>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d038      	beq.n	800b04e <_svfiprintf_r+0x1d6>
 800afdc:	4b23      	ldr	r3, [pc, #140]	; (800b06c <_svfiprintf_r+0x1f4>)
 800afde:	bb1b      	cbnz	r3, 800b028 <_svfiprintf_r+0x1b0>
 800afe0:	9b03      	ldr	r3, [sp, #12]
 800afe2:	3307      	adds	r3, #7
 800afe4:	f023 0307 	bic.w	r3, r3, #7
 800afe8:	3308      	adds	r3, #8
 800afea:	9303      	str	r3, [sp, #12]
 800afec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afee:	4433      	add	r3, r6
 800aff0:	9309      	str	r3, [sp, #36]	; 0x24
 800aff2:	e768      	b.n	800aec6 <_svfiprintf_r+0x4e>
 800aff4:	460c      	mov	r4, r1
 800aff6:	2001      	movs	r0, #1
 800aff8:	fb0c 3202 	mla	r2, ip, r2, r3
 800affc:	e7a6      	b.n	800af4c <_svfiprintf_r+0xd4>
 800affe:	2300      	movs	r3, #0
 800b000:	f04f 0c0a 	mov.w	ip, #10
 800b004:	4619      	mov	r1, r3
 800b006:	3401      	adds	r4, #1
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	4620      	mov	r0, r4
 800b00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b010:	3a30      	subs	r2, #48	; 0x30
 800b012:	2a09      	cmp	r2, #9
 800b014:	d903      	bls.n	800b01e <_svfiprintf_r+0x1a6>
 800b016:	2b00      	cmp	r3, #0
 800b018:	d0c6      	beq.n	800afa8 <_svfiprintf_r+0x130>
 800b01a:	9105      	str	r1, [sp, #20]
 800b01c:	e7c4      	b.n	800afa8 <_svfiprintf_r+0x130>
 800b01e:	4604      	mov	r4, r0
 800b020:	2301      	movs	r3, #1
 800b022:	fb0c 2101 	mla	r1, ip, r1, r2
 800b026:	e7f0      	b.n	800b00a <_svfiprintf_r+0x192>
 800b028:	ab03      	add	r3, sp, #12
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	462a      	mov	r2, r5
 800b02e:	4638      	mov	r0, r7
 800b030:	4b0f      	ldr	r3, [pc, #60]	; (800b070 <_svfiprintf_r+0x1f8>)
 800b032:	a904      	add	r1, sp, #16
 800b034:	f3af 8000 	nop.w
 800b038:	1c42      	adds	r2, r0, #1
 800b03a:	4606      	mov	r6, r0
 800b03c:	d1d6      	bne.n	800afec <_svfiprintf_r+0x174>
 800b03e:	89ab      	ldrh	r3, [r5, #12]
 800b040:	065b      	lsls	r3, r3, #25
 800b042:	f53f af2d 	bmi.w	800aea0 <_svfiprintf_r+0x28>
 800b046:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b048:	b01d      	add	sp, #116	; 0x74
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	ab03      	add	r3, sp, #12
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	462a      	mov	r2, r5
 800b054:	4638      	mov	r0, r7
 800b056:	4b06      	ldr	r3, [pc, #24]	; (800b070 <_svfiprintf_r+0x1f8>)
 800b058:	a904      	add	r1, sp, #16
 800b05a:	f000 f87d 	bl	800b158 <_printf_i>
 800b05e:	e7eb      	b.n	800b038 <_svfiprintf_r+0x1c0>
 800b060:	0800b59e 	.word	0x0800b59e
 800b064:	0800b5a4 	.word	0x0800b5a4
 800b068:	0800b5a8 	.word	0x0800b5a8
 800b06c:	00000000 	.word	0x00000000
 800b070:	0800adc5 	.word	0x0800adc5

0800b074 <_printf_common>:
 800b074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b078:	4616      	mov	r6, r2
 800b07a:	4699      	mov	r9, r3
 800b07c:	688a      	ldr	r2, [r1, #8]
 800b07e:	690b      	ldr	r3, [r1, #16]
 800b080:	4607      	mov	r7, r0
 800b082:	4293      	cmp	r3, r2
 800b084:	bfb8      	it	lt
 800b086:	4613      	movlt	r3, r2
 800b088:	6033      	str	r3, [r6, #0]
 800b08a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b08e:	460c      	mov	r4, r1
 800b090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b094:	b10a      	cbz	r2, 800b09a <_printf_common+0x26>
 800b096:	3301      	adds	r3, #1
 800b098:	6033      	str	r3, [r6, #0]
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	0699      	lsls	r1, r3, #26
 800b09e:	bf42      	ittt	mi
 800b0a0:	6833      	ldrmi	r3, [r6, #0]
 800b0a2:	3302      	addmi	r3, #2
 800b0a4:	6033      	strmi	r3, [r6, #0]
 800b0a6:	6825      	ldr	r5, [r4, #0]
 800b0a8:	f015 0506 	ands.w	r5, r5, #6
 800b0ac:	d106      	bne.n	800b0bc <_printf_common+0x48>
 800b0ae:	f104 0a19 	add.w	sl, r4, #25
 800b0b2:	68e3      	ldr	r3, [r4, #12]
 800b0b4:	6832      	ldr	r2, [r6, #0]
 800b0b6:	1a9b      	subs	r3, r3, r2
 800b0b8:	42ab      	cmp	r3, r5
 800b0ba:	dc2b      	bgt.n	800b114 <_printf_common+0xa0>
 800b0bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0c0:	1e13      	subs	r3, r2, #0
 800b0c2:	6822      	ldr	r2, [r4, #0]
 800b0c4:	bf18      	it	ne
 800b0c6:	2301      	movne	r3, #1
 800b0c8:	0692      	lsls	r2, r2, #26
 800b0ca:	d430      	bmi.n	800b12e <_printf_common+0xba>
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0d4:	47c0      	blx	r8
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	d023      	beq.n	800b122 <_printf_common+0xae>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	f003 0306 	and.w	r3, r3, #6
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	bf14      	ite	ne
 800b0e6:	2500      	movne	r5, #0
 800b0e8:	6833      	ldreq	r3, [r6, #0]
 800b0ea:	f04f 0600 	mov.w	r6, #0
 800b0ee:	bf08      	it	eq
 800b0f0:	68e5      	ldreq	r5, [r4, #12]
 800b0f2:	f104 041a 	add.w	r4, r4, #26
 800b0f6:	bf08      	it	eq
 800b0f8:	1aed      	subeq	r5, r5, r3
 800b0fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b0fe:	bf08      	it	eq
 800b100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b104:	4293      	cmp	r3, r2
 800b106:	bfc4      	itt	gt
 800b108:	1a9b      	subgt	r3, r3, r2
 800b10a:	18ed      	addgt	r5, r5, r3
 800b10c:	42b5      	cmp	r5, r6
 800b10e:	d11a      	bne.n	800b146 <_printf_common+0xd2>
 800b110:	2000      	movs	r0, #0
 800b112:	e008      	b.n	800b126 <_printf_common+0xb2>
 800b114:	2301      	movs	r3, #1
 800b116:	4652      	mov	r2, sl
 800b118:	4649      	mov	r1, r9
 800b11a:	4638      	mov	r0, r7
 800b11c:	47c0      	blx	r8
 800b11e:	3001      	adds	r0, #1
 800b120:	d103      	bne.n	800b12a <_printf_common+0xb6>
 800b122:	f04f 30ff 	mov.w	r0, #4294967295
 800b126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b12a:	3501      	adds	r5, #1
 800b12c:	e7c1      	b.n	800b0b2 <_printf_common+0x3e>
 800b12e:	2030      	movs	r0, #48	; 0x30
 800b130:	18e1      	adds	r1, r4, r3
 800b132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b136:	1c5a      	adds	r2, r3, #1
 800b138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b13c:	4422      	add	r2, r4
 800b13e:	3302      	adds	r3, #2
 800b140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b144:	e7c2      	b.n	800b0cc <_printf_common+0x58>
 800b146:	2301      	movs	r3, #1
 800b148:	4622      	mov	r2, r4
 800b14a:	4649      	mov	r1, r9
 800b14c:	4638      	mov	r0, r7
 800b14e:	47c0      	blx	r8
 800b150:	3001      	adds	r0, #1
 800b152:	d0e6      	beq.n	800b122 <_printf_common+0xae>
 800b154:	3601      	adds	r6, #1
 800b156:	e7d9      	b.n	800b10c <_printf_common+0x98>

0800b158 <_printf_i>:
 800b158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b15c:	7e0f      	ldrb	r7, [r1, #24]
 800b15e:	4691      	mov	r9, r2
 800b160:	2f78      	cmp	r7, #120	; 0x78
 800b162:	4680      	mov	r8, r0
 800b164:	460c      	mov	r4, r1
 800b166:	469a      	mov	sl, r3
 800b168:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b16a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b16e:	d807      	bhi.n	800b180 <_printf_i+0x28>
 800b170:	2f62      	cmp	r7, #98	; 0x62
 800b172:	d80a      	bhi.n	800b18a <_printf_i+0x32>
 800b174:	2f00      	cmp	r7, #0
 800b176:	f000 80d5 	beq.w	800b324 <_printf_i+0x1cc>
 800b17a:	2f58      	cmp	r7, #88	; 0x58
 800b17c:	f000 80c1 	beq.w	800b302 <_printf_i+0x1aa>
 800b180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b188:	e03a      	b.n	800b200 <_printf_i+0xa8>
 800b18a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b18e:	2b15      	cmp	r3, #21
 800b190:	d8f6      	bhi.n	800b180 <_printf_i+0x28>
 800b192:	a101      	add	r1, pc, #4	; (adr r1, 800b198 <_printf_i+0x40>)
 800b194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b198:	0800b1f1 	.word	0x0800b1f1
 800b19c:	0800b205 	.word	0x0800b205
 800b1a0:	0800b181 	.word	0x0800b181
 800b1a4:	0800b181 	.word	0x0800b181
 800b1a8:	0800b181 	.word	0x0800b181
 800b1ac:	0800b181 	.word	0x0800b181
 800b1b0:	0800b205 	.word	0x0800b205
 800b1b4:	0800b181 	.word	0x0800b181
 800b1b8:	0800b181 	.word	0x0800b181
 800b1bc:	0800b181 	.word	0x0800b181
 800b1c0:	0800b181 	.word	0x0800b181
 800b1c4:	0800b30b 	.word	0x0800b30b
 800b1c8:	0800b231 	.word	0x0800b231
 800b1cc:	0800b2c5 	.word	0x0800b2c5
 800b1d0:	0800b181 	.word	0x0800b181
 800b1d4:	0800b181 	.word	0x0800b181
 800b1d8:	0800b32d 	.word	0x0800b32d
 800b1dc:	0800b181 	.word	0x0800b181
 800b1e0:	0800b231 	.word	0x0800b231
 800b1e4:	0800b181 	.word	0x0800b181
 800b1e8:	0800b181 	.word	0x0800b181
 800b1ec:	0800b2cd 	.word	0x0800b2cd
 800b1f0:	682b      	ldr	r3, [r5, #0]
 800b1f2:	1d1a      	adds	r2, r3, #4
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	602a      	str	r2, [r5, #0]
 800b1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b200:	2301      	movs	r3, #1
 800b202:	e0a0      	b.n	800b346 <_printf_i+0x1ee>
 800b204:	6820      	ldr	r0, [r4, #0]
 800b206:	682b      	ldr	r3, [r5, #0]
 800b208:	0607      	lsls	r7, r0, #24
 800b20a:	f103 0104 	add.w	r1, r3, #4
 800b20e:	6029      	str	r1, [r5, #0]
 800b210:	d501      	bpl.n	800b216 <_printf_i+0xbe>
 800b212:	681e      	ldr	r6, [r3, #0]
 800b214:	e003      	b.n	800b21e <_printf_i+0xc6>
 800b216:	0646      	lsls	r6, r0, #25
 800b218:	d5fb      	bpl.n	800b212 <_printf_i+0xba>
 800b21a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b21e:	2e00      	cmp	r6, #0
 800b220:	da03      	bge.n	800b22a <_printf_i+0xd2>
 800b222:	232d      	movs	r3, #45	; 0x2d
 800b224:	4276      	negs	r6, r6
 800b226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b22a:	230a      	movs	r3, #10
 800b22c:	4859      	ldr	r0, [pc, #356]	; (800b394 <_printf_i+0x23c>)
 800b22e:	e012      	b.n	800b256 <_printf_i+0xfe>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	6820      	ldr	r0, [r4, #0]
 800b234:	1d19      	adds	r1, r3, #4
 800b236:	6029      	str	r1, [r5, #0]
 800b238:	0605      	lsls	r5, r0, #24
 800b23a:	d501      	bpl.n	800b240 <_printf_i+0xe8>
 800b23c:	681e      	ldr	r6, [r3, #0]
 800b23e:	e002      	b.n	800b246 <_printf_i+0xee>
 800b240:	0641      	lsls	r1, r0, #25
 800b242:	d5fb      	bpl.n	800b23c <_printf_i+0xe4>
 800b244:	881e      	ldrh	r6, [r3, #0]
 800b246:	2f6f      	cmp	r7, #111	; 0x6f
 800b248:	bf0c      	ite	eq
 800b24a:	2308      	moveq	r3, #8
 800b24c:	230a      	movne	r3, #10
 800b24e:	4851      	ldr	r0, [pc, #324]	; (800b394 <_printf_i+0x23c>)
 800b250:	2100      	movs	r1, #0
 800b252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b256:	6865      	ldr	r5, [r4, #4]
 800b258:	2d00      	cmp	r5, #0
 800b25a:	bfa8      	it	ge
 800b25c:	6821      	ldrge	r1, [r4, #0]
 800b25e:	60a5      	str	r5, [r4, #8]
 800b260:	bfa4      	itt	ge
 800b262:	f021 0104 	bicge.w	r1, r1, #4
 800b266:	6021      	strge	r1, [r4, #0]
 800b268:	b90e      	cbnz	r6, 800b26e <_printf_i+0x116>
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	d04b      	beq.n	800b306 <_printf_i+0x1ae>
 800b26e:	4615      	mov	r5, r2
 800b270:	fbb6 f1f3 	udiv	r1, r6, r3
 800b274:	fb03 6711 	mls	r7, r3, r1, r6
 800b278:	5dc7      	ldrb	r7, [r0, r7]
 800b27a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b27e:	4637      	mov	r7, r6
 800b280:	42bb      	cmp	r3, r7
 800b282:	460e      	mov	r6, r1
 800b284:	d9f4      	bls.n	800b270 <_printf_i+0x118>
 800b286:	2b08      	cmp	r3, #8
 800b288:	d10b      	bne.n	800b2a2 <_printf_i+0x14a>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	07de      	lsls	r6, r3, #31
 800b28e:	d508      	bpl.n	800b2a2 <_printf_i+0x14a>
 800b290:	6923      	ldr	r3, [r4, #16]
 800b292:	6861      	ldr	r1, [r4, #4]
 800b294:	4299      	cmp	r1, r3
 800b296:	bfde      	ittt	le
 800b298:	2330      	movle	r3, #48	; 0x30
 800b29a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b29e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2a2:	1b52      	subs	r2, r2, r5
 800b2a4:	6122      	str	r2, [r4, #16]
 800b2a6:	464b      	mov	r3, r9
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4640      	mov	r0, r8
 800b2ac:	f8cd a000 	str.w	sl, [sp]
 800b2b0:	aa03      	add	r2, sp, #12
 800b2b2:	f7ff fedf 	bl	800b074 <_printf_common>
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d14a      	bne.n	800b350 <_printf_i+0x1f8>
 800b2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b2be:	b004      	add	sp, #16
 800b2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	f043 0320 	orr.w	r3, r3, #32
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	2778      	movs	r7, #120	; 0x78
 800b2ce:	4832      	ldr	r0, [pc, #200]	; (800b398 <_printf_i+0x240>)
 800b2d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	6829      	ldr	r1, [r5, #0]
 800b2d8:	061f      	lsls	r7, r3, #24
 800b2da:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2de:	d402      	bmi.n	800b2e6 <_printf_i+0x18e>
 800b2e0:	065f      	lsls	r7, r3, #25
 800b2e2:	bf48      	it	mi
 800b2e4:	b2b6      	uxthmi	r6, r6
 800b2e6:	07df      	lsls	r7, r3, #31
 800b2e8:	bf48      	it	mi
 800b2ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b2ee:	6029      	str	r1, [r5, #0]
 800b2f0:	bf48      	it	mi
 800b2f2:	6023      	strmi	r3, [r4, #0]
 800b2f4:	b91e      	cbnz	r6, 800b2fe <_printf_i+0x1a6>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	f023 0320 	bic.w	r3, r3, #32
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	2310      	movs	r3, #16
 800b300:	e7a6      	b.n	800b250 <_printf_i+0xf8>
 800b302:	4824      	ldr	r0, [pc, #144]	; (800b394 <_printf_i+0x23c>)
 800b304:	e7e4      	b.n	800b2d0 <_printf_i+0x178>
 800b306:	4615      	mov	r5, r2
 800b308:	e7bd      	b.n	800b286 <_printf_i+0x12e>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	6826      	ldr	r6, [r4, #0]
 800b30e:	1d18      	adds	r0, r3, #4
 800b310:	6961      	ldr	r1, [r4, #20]
 800b312:	6028      	str	r0, [r5, #0]
 800b314:	0635      	lsls	r5, r6, #24
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	d501      	bpl.n	800b31e <_printf_i+0x1c6>
 800b31a:	6019      	str	r1, [r3, #0]
 800b31c:	e002      	b.n	800b324 <_printf_i+0x1cc>
 800b31e:	0670      	lsls	r0, r6, #25
 800b320:	d5fb      	bpl.n	800b31a <_printf_i+0x1c2>
 800b322:	8019      	strh	r1, [r3, #0]
 800b324:	2300      	movs	r3, #0
 800b326:	4615      	mov	r5, r2
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	e7bc      	b.n	800b2a6 <_printf_i+0x14e>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	2100      	movs	r1, #0
 800b330:	1d1a      	adds	r2, r3, #4
 800b332:	602a      	str	r2, [r5, #0]
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	6862      	ldr	r2, [r4, #4]
 800b338:	4628      	mov	r0, r5
 800b33a:	f000 f859 	bl	800b3f0 <memchr>
 800b33e:	b108      	cbz	r0, 800b344 <_printf_i+0x1ec>
 800b340:	1b40      	subs	r0, r0, r5
 800b342:	6060      	str	r0, [r4, #4]
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	6123      	str	r3, [r4, #16]
 800b348:	2300      	movs	r3, #0
 800b34a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b34e:	e7aa      	b.n	800b2a6 <_printf_i+0x14e>
 800b350:	462a      	mov	r2, r5
 800b352:	4649      	mov	r1, r9
 800b354:	4640      	mov	r0, r8
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	47d0      	blx	sl
 800b35a:	3001      	adds	r0, #1
 800b35c:	d0ad      	beq.n	800b2ba <_printf_i+0x162>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	079b      	lsls	r3, r3, #30
 800b362:	d413      	bmi.n	800b38c <_printf_i+0x234>
 800b364:	68e0      	ldr	r0, [r4, #12]
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	4298      	cmp	r0, r3
 800b36a:	bfb8      	it	lt
 800b36c:	4618      	movlt	r0, r3
 800b36e:	e7a6      	b.n	800b2be <_printf_i+0x166>
 800b370:	2301      	movs	r3, #1
 800b372:	4632      	mov	r2, r6
 800b374:	4649      	mov	r1, r9
 800b376:	4640      	mov	r0, r8
 800b378:	47d0      	blx	sl
 800b37a:	3001      	adds	r0, #1
 800b37c:	d09d      	beq.n	800b2ba <_printf_i+0x162>
 800b37e:	3501      	adds	r5, #1
 800b380:	68e3      	ldr	r3, [r4, #12]
 800b382:	9903      	ldr	r1, [sp, #12]
 800b384:	1a5b      	subs	r3, r3, r1
 800b386:	42ab      	cmp	r3, r5
 800b388:	dcf2      	bgt.n	800b370 <_printf_i+0x218>
 800b38a:	e7eb      	b.n	800b364 <_printf_i+0x20c>
 800b38c:	2500      	movs	r5, #0
 800b38e:	f104 0619 	add.w	r6, r4, #25
 800b392:	e7f5      	b.n	800b380 <_printf_i+0x228>
 800b394:	0800b5af 	.word	0x0800b5af
 800b398:	0800b5c0 	.word	0x0800b5c0

0800b39c <memmove>:
 800b39c:	4288      	cmp	r0, r1
 800b39e:	b510      	push	{r4, lr}
 800b3a0:	eb01 0402 	add.w	r4, r1, r2
 800b3a4:	d902      	bls.n	800b3ac <memmove+0x10>
 800b3a6:	4284      	cmp	r4, r0
 800b3a8:	4623      	mov	r3, r4
 800b3aa:	d807      	bhi.n	800b3bc <memmove+0x20>
 800b3ac:	1e43      	subs	r3, r0, #1
 800b3ae:	42a1      	cmp	r1, r4
 800b3b0:	d008      	beq.n	800b3c4 <memmove+0x28>
 800b3b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3ba:	e7f8      	b.n	800b3ae <memmove+0x12>
 800b3bc:	4601      	mov	r1, r0
 800b3be:	4402      	add	r2, r0
 800b3c0:	428a      	cmp	r2, r1
 800b3c2:	d100      	bne.n	800b3c6 <memmove+0x2a>
 800b3c4:	bd10      	pop	{r4, pc}
 800b3c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3ce:	e7f7      	b.n	800b3c0 <memmove+0x24>

0800b3d0 <_sbrk_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4d05      	ldr	r5, [pc, #20]	; (800b3ec <_sbrk_r+0x1c>)
 800b3d6:	4604      	mov	r4, r0
 800b3d8:	4608      	mov	r0, r1
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	f7f6 f940 	bl	8001660 <_sbrk>
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	d102      	bne.n	800b3ea <_sbrk_r+0x1a>
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	b103      	cbz	r3, 800b3ea <_sbrk_r+0x1a>
 800b3e8:	6023      	str	r3, [r4, #0]
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	20001798 	.word	0x20001798

0800b3f0 <memchr>:
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	b510      	push	{r4, lr}
 800b3f4:	b2c9      	uxtb	r1, r1
 800b3f6:	4402      	add	r2, r0
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	d101      	bne.n	800b402 <memchr+0x12>
 800b3fe:	2000      	movs	r0, #0
 800b400:	e003      	b.n	800b40a <memchr+0x1a>
 800b402:	7804      	ldrb	r4, [r0, #0]
 800b404:	3301      	adds	r3, #1
 800b406:	428c      	cmp	r4, r1
 800b408:	d1f6      	bne.n	800b3f8 <memchr+0x8>
 800b40a:	bd10      	pop	{r4, pc}

0800b40c <memcpy>:
 800b40c:	440a      	add	r2, r1
 800b40e:	4291      	cmp	r1, r2
 800b410:	f100 33ff 	add.w	r3, r0, #4294967295
 800b414:	d100      	bne.n	800b418 <memcpy+0xc>
 800b416:	4770      	bx	lr
 800b418:	b510      	push	{r4, lr}
 800b41a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b41e:	4291      	cmp	r1, r2
 800b420:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b424:	d1f9      	bne.n	800b41a <memcpy+0xe>
 800b426:	bd10      	pop	{r4, pc}

0800b428 <_realloc_r>:
 800b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42c:	4680      	mov	r8, r0
 800b42e:	4614      	mov	r4, r2
 800b430:	460e      	mov	r6, r1
 800b432:	b921      	cbnz	r1, 800b43e <_realloc_r+0x16>
 800b434:	4611      	mov	r1, r2
 800b436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	f7ff bc37 	b.w	800acac <_malloc_r>
 800b43e:	b92a      	cbnz	r2, 800b44c <_realloc_r+0x24>
 800b440:	f7ff fbcc 	bl	800abdc <_free_r>
 800b444:	4625      	mov	r5, r4
 800b446:	4628      	mov	r0, r5
 800b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b44c:	f000 f81b 	bl	800b486 <_malloc_usable_size_r>
 800b450:	4284      	cmp	r4, r0
 800b452:	4607      	mov	r7, r0
 800b454:	d802      	bhi.n	800b45c <_realloc_r+0x34>
 800b456:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b45a:	d812      	bhi.n	800b482 <_realloc_r+0x5a>
 800b45c:	4621      	mov	r1, r4
 800b45e:	4640      	mov	r0, r8
 800b460:	f7ff fc24 	bl	800acac <_malloc_r>
 800b464:	4605      	mov	r5, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	d0ed      	beq.n	800b446 <_realloc_r+0x1e>
 800b46a:	42bc      	cmp	r4, r7
 800b46c:	4622      	mov	r2, r4
 800b46e:	4631      	mov	r1, r6
 800b470:	bf28      	it	cs
 800b472:	463a      	movcs	r2, r7
 800b474:	f7ff ffca 	bl	800b40c <memcpy>
 800b478:	4631      	mov	r1, r6
 800b47a:	4640      	mov	r0, r8
 800b47c:	f7ff fbae 	bl	800abdc <_free_r>
 800b480:	e7e1      	b.n	800b446 <_realloc_r+0x1e>
 800b482:	4635      	mov	r5, r6
 800b484:	e7df      	b.n	800b446 <_realloc_r+0x1e>

0800b486 <_malloc_usable_size_r>:
 800b486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48a:	1f18      	subs	r0, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfbc      	itt	lt
 800b490:	580b      	ldrlt	r3, [r1, r0]
 800b492:	18c0      	addlt	r0, r0, r3
 800b494:	4770      	bx	lr
	...

0800b498 <_init>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr

0800b4a4 <_fini>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	bf00      	nop
 800b4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4aa:	bc08      	pop	{r3}
 800b4ac:	469e      	mov	lr, r3
 800b4ae:	4770      	bx	lr
